<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="725"><g><title>[[stack]] (1 samples, 0.14%)</title><rect x="0.0000%" y="581" width="0.1379%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>__res_thread_freeres (1 samples, 0.14%)</title><rect x="0.0000%" y="565" width="0.1379%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.0000%" y="549" width="0.1379%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="0.4138%" y="549" width="0.4138%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="3"/><text x="0.6638%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="0.4138%" y="533" width="0.4138%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="3"/><text x="0.6638%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.6897%" y="517" width="0.1379%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.9397%" y="527.50"></text></g><g><title>__GI___call_tls_dtors (4 samples, 0.55%)</title><rect x="0.8276%" y="549" width="0.5517%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="4"/><text x="1.0776%" y="559.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::destroy_value (2 samples, 0.28%)</title><rect x="1.1034%" y="533" width="0.2759%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="2"/><text x="1.3534%" y="543.50"></text></g><g><title>&lt;parking_lot_core::parking_lot::ThreadData as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="1.2414%" y="517" width="0.1379%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="1.4914%" y="527.50"></text></g><g><title>__glibc_tls_internal_free (3 samples, 0.41%)</title><rect x="1.3793%" y="533" width="0.4138%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="3"/><text x="1.6293%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="1.5172%" y="517" width="0.2759%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="2"/><text x="1.7672%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="1.6552%" y="501" width="0.1379%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="1"/><text x="1.9052%" y="511.50"></text></g><g><title>__libc_thread_freeres (7 samples, 0.97%)</title><rect x="1.3793%" y="549" width="0.9655%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="7"/><text x="1.6293%" y="559.50"></text></g><g><title>__res_thread_freeres (4 samples, 0.55%)</title><rect x="1.7931%" y="533" width="0.5517%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="4"/><text x="2.0431%" y="543.50"></text></g><g><title>__resolv_context_freeres (2 samples, 0.28%)</title><rect x="2.0690%" y="517" width="0.2759%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="2"/><text x="2.3190%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="2.2069%" y="501" width="0.1379%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="1"/><text x="2.4569%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="2.8966%" y="517" width="0.1379%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="1"/><text x="3.1466%" y="527.50"></text></g><g><title>_int_free (1 samples, 0.14%)</title><rect x="3.0345%" y="501" width="0.1379%" height="15" fill="rgb(210,31,41)" fg:x="22" fg:w="1"/><text x="3.2845%" y="511.50"></text></g><g><title>__malloc_arena_thread_freeres (7 samples, 0.97%)</title><rect x="2.3448%" y="549" width="0.9655%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="7"/><text x="2.5948%" y="559.50"></text></g><g><title>tcache_thread_shutdown (7 samples, 0.97%)</title><rect x="2.3448%" y="533" width="0.9655%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="7"/><text x="2.5948%" y="543.50"></text></g><g><title>__GI___libc_free (2 samples, 0.28%)</title><rect x="3.0345%" y="517" width="0.2759%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="2"/><text x="3.2845%" y="527.50"></text></g><g><title>tcache_init (1 samples, 0.14%)</title><rect x="3.1724%" y="501" width="0.1379%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="1"/><text x="3.4224%" y="511.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.14%)</title><rect x="3.4483%" y="485" width="0.1379%" height="15" fill="rgb(221,5,38)" fg:x="25" fg:w="1"/><text x="3.6983%" y="495.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.14%)</title><rect x="3.4483%" y="469" width="0.1379%" height="15" fill="rgb(247,18,42)" fg:x="25" fg:w="1"/><text x="3.6983%" y="479.50"></text></g><g><title>__GI___pthread_getaffinity_np (1 samples, 0.14%)</title><rect x="3.4483%" y="453" width="0.1379%" height="15" fill="rgb(241,131,45)" fg:x="25" fg:w="1"/><text x="3.6983%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.14%)</title><rect x="3.7241%" y="469" width="0.1379%" height="15" fill="rgb(249,31,29)" fg:x="27" fg:w="1"/><text x="3.9741%" y="479.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.14%)</title><rect x="4.9655%" y="437" width="0.1379%" height="15" fill="rgb(225,111,53)" fg:x="36" fg:w="1"/><text x="5.2155%" y="447.50"></text></g><g><title>parking_lot_core::parking_lot::ThreadData::new (1 samples, 0.14%)</title><rect x="4.9655%" y="421" width="0.1379%" height="15" fill="rgb(238,160,17)" fg:x="36" fg:w="1"/><text x="5.2155%" y="431.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (4 samples, 0.55%)</title><rect x="4.6897%" y="453" width="0.5517%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="4"/><text x="4.9397%" y="463.50"></text></g><g><title>syscall (1 samples, 0.14%)</title><rect x="5.1034%" y="437" width="0.1379%" height="15" fill="rgb(232,36,49)" fg:x="37" fg:w="1"/><text x="5.3534%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="5.1034%" y="421" width="0.1379%" height="15" fill="rgb(209,103,24)" fg:x="37" fg:w="1"/><text x="5.3534%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="5.1034%" y="405" width="0.1379%" height="15" fill="rgb(229,88,8)" fg:x="37" fg:w="1"/><text x="5.3534%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="5.1034%" y="389" width="0.1379%" height="15" fill="rgb(213,181,19)" fg:x="37" fg:w="1"/><text x="5.3534%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="5.1034%" y="373" width="0.1379%" height="15" fill="rgb(254,191,54)" fg:x="37" fg:w="1"/><text x="5.3534%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="5.1034%" y="357" width="0.1379%" height="15" fill="rgb(241,83,37)" fg:x="37" fg:w="1"/><text x="5.3534%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="5.1034%" y="341" width="0.1379%" height="15" fill="rgb(233,36,39)" fg:x="37" fg:w="1"/><text x="5.3534%" y="351.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock_slow (1 samples, 0.14%)</title><rect x="5.3793%" y="437" width="0.1379%" height="15" fill="rgb(226,3,54)" fg:x="39" fg:w="1"/><text x="5.6293%" y="447.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (8 samples, 1.10%)</title><rect x="5.2414%" y="453" width="1.1034%" height="15" fill="rgb(245,192,40)" fg:x="38" fg:w="8"/><text x="5.4914%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (6 samples, 0.83%)</title><rect x="5.5172%" y="437" width="0.8276%" height="15" fill="rgb(238,167,29)" fg:x="40" fg:w="6"/><text x="5.7672%" y="447.50"></text></g><g><title>__GI___clock_gettime (6 samples, 0.83%)</title><rect x="5.5172%" y="421" width="0.8276%" height="15" fill="rgb(232,182,51)" fg:x="40" fg:w="6"/><text x="5.7672%" y="431.50"></text></g><g><title>__vdso_clock_gettime (6 samples, 0.83%)</title><rect x="5.5172%" y="405" width="0.8276%" height="15" fill="rgb(231,60,39)" fg:x="40" fg:w="6"/><text x="5.7672%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.55%)</title><rect x="5.7931%" y="389" width="0.5517%" height="15" fill="rgb(208,69,12)" fg:x="42" fg:w="4"/><text x="6.0431%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.55%)</title><rect x="5.7931%" y="373" width="0.5517%" height="15" fill="rgb(235,93,37)" fg:x="42" fg:w="4"/><text x="6.0431%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="5.9310%" y="357" width="0.4138%" height="15" fill="rgb(213,116,39)" fg:x="43" fg:w="3"/><text x="6.1810%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="5.9310%" y="341" width="0.4138%" height="15" fill="rgb(222,207,29)" fg:x="43" fg:w="3"/><text x="6.1810%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="6.0690%" y="325" width="0.2759%" height="15" fill="rgb(206,96,30)" fg:x="44" fg:w="2"/><text x="6.3190%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="6.0690%" y="309" width="0.2759%" height="15" fill="rgb(218,138,4)" fg:x="44" fg:w="2"/><text x="6.3190%" y="319.50"></text></g><g><title>syscall (3 samples, 0.41%)</title><rect x="6.3448%" y="453" width="0.4138%" height="15" fill="rgb(250,191,14)" fg:x="46" fg:w="3"/><text x="6.5948%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="6.3448%" y="437" width="0.4138%" height="15" fill="rgb(239,60,40)" fg:x="46" fg:w="3"/><text x="6.5948%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="6.3448%" y="421" width="0.4138%" height="15" fill="rgb(206,27,48)" fg:x="46" fg:w="3"/><text x="6.5948%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="6.3448%" y="405" width="0.4138%" height="15" fill="rgb(225,35,8)" fg:x="46" fg:w="3"/><text x="6.5948%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="6.3448%" y="389" width="0.4138%" height="15" fill="rgb(250,213,24)" fg:x="46" fg:w="3"/><text x="6.5948%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="6.6207%" y="373" width="0.1379%" height="15" fill="rgb(247,123,22)" fg:x="48" fg:w="1"/><text x="6.8707%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Context&gt; (2 samples, 0.28%)</title><rect x="7.4483%" y="405" width="0.2759%" height="15" fill="rgb(231,138,38)" fg:x="54" fg:w="2"/><text x="7.6983%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.14%)</title><rect x="7.5862%" y="389" width="0.1379%" height="15" fill="rgb(231,145,46)" fg:x="55" fg:w="1"/><text x="7.8362%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="10.4828%" y="373" width="0.4138%" height="15" fill="rgb(251,118,11)" fg:x="76" fg:w="3"/><text x="10.7328%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="10.6207%" y="357" width="0.2759%" height="15" fill="rgb(217,147,25)" fg:x="77" fg:w="2"/><text x="10.8707%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="10.6207%" y="341" width="0.2759%" height="15" fill="rgb(247,81,37)" fg:x="77" fg:w="2"/><text x="10.8707%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (2 samples, 0.28%)</title><rect x="10.8966%" y="373" width="0.2759%" height="15" fill="rgb(209,12,38)" fg:x="79" fg:w="2"/><text x="11.1466%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (1 samples, 0.14%)</title><rect x="11.1724%" y="373" width="0.1379%" height="15" fill="rgb(227,1,9)" fg:x="81" fg:w="1"/><text x="11.4224%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.14%)</title><rect x="11.1724%" y="357" width="0.1379%" height="15" fill="rgb(248,47,43)" fg:x="81" fg:w="1"/><text x="11.4224%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="11.1724%" y="341" width="0.1379%" height="15" fill="rgb(221,10,30)" fg:x="81" fg:w="1"/><text x="11.4224%" y="351.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.14%)</title><rect x="11.1724%" y="325" width="0.1379%" height="15" fill="rgb(210,229,1)" fg:x="81" fg:w="1"/><text x="11.4224%" y="335.50"></text></g><g><title>_int_realloc (1 samples, 0.14%)</title><rect x="11.1724%" y="309" width="0.1379%" height="15" fill="rgb(222,148,37)" fg:x="81" fg:w="1"/><text x="11.4224%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.14%)</title><rect x="11.1724%" y="293" width="0.1379%" height="15" fill="rgb(234,67,33)" fg:x="81" fg:w="1"/><text x="11.4224%" y="303.50"></text></g><g><title>tcache_put (1 samples, 0.14%)</title><rect x="11.1724%" y="277" width="0.1379%" height="15" fill="rgb(247,98,35)" fg:x="81" fg:w="1"/><text x="11.4224%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.83%)</title><rect x="12.8276%" y="341" width="0.8276%" height="15" fill="rgb(247,138,52)" fg:x="93" fg:w="6"/><text x="13.0776%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="13.5172%" y="325" width="0.1379%" height="15" fill="rgb(213,79,30)" fg:x="98" fg:w="1"/><text x="13.7672%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12 samples, 1.66%)</title><rect x="12.1379%" y="357" width="1.6552%" height="15" fill="rgb(246,177,23)" fg:x="88" fg:w="12"/><text x="12.3879%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="13.6552%" y="341" width="0.1379%" height="15" fill="rgb(230,62,27)" fg:x="99" fg:w="1"/><text x="13.9052%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 0.83%)</title><rect x="14.2069%" y="341" width="0.8276%" height="15" fill="rgb(216,154,8)" fg:x="103" fg:w="6"/><text x="14.4569%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.14%)</title><rect x="15.1724%" y="325" width="0.1379%" height="15" fill="rgb(244,35,45)" fg:x="110" fg:w="1"/><text x="15.4224%" y="335.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.14%)</title><rect x="15.1724%" y="309" width="0.1379%" height="15" fill="rgb(251,115,12)" fg:x="110" fg:w="1"/><text x="15.4224%" y="319.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.14%)</title><rect x="15.3103%" y="325" width="0.1379%" height="15" fill="rgb(240,54,50)" fg:x="111" fg:w="1"/><text x="15.5603%" y="335.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="15.5862%" y="309" width="0.1379%" height="15" fill="rgb(233,84,52)" fg:x="113" fg:w="1"/><text x="15.8362%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (33 samples, 4.55%)</title><rect x="11.3103%" y="373" width="4.5517%" height="15" fill="rgb(207,117,47)" fg:x="82" fg:w="33"/><text x="11.5603%" y="383.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (15 samples, 2.07%)</title><rect x="13.7931%" y="357" width="2.0690%" height="15" fill="rgb(249,43,39)" fg:x="100" fg:w="15"/><text x="14.0431%" y="367.50">t..</text></g><g><title>tokio::runtime::time::Driver::park_internal (6 samples, 0.83%)</title><rect x="15.0345%" y="341" width="0.8276%" height="15" fill="rgb(209,38,44)" fg:x="109" fg:w="6"/><text x="15.2845%" y="351.50"></text></g><g><title>tokio::runtime::io::Driver::turn (3 samples, 0.41%)</title><rect x="15.4483%" y="325" width="0.4138%" height="15" fill="rgb(236,212,23)" fg:x="112" fg:w="3"/><text x="15.6983%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.14%)</title><rect x="15.7241%" y="309" width="0.1379%" height="15" fill="rgb(242,79,21)" fg:x="114" fg:w="1"/><text x="15.9741%" y="319.50"></text></g><g><title>epoll_wait (1 samples, 0.14%)</title><rect x="15.7241%" y="293" width="0.1379%" height="15" fill="rgb(211,96,35)" fg:x="114" fg:w="1"/><text x="15.9741%" y="303.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.14%)</title><rect x="15.7241%" y="277" width="0.1379%" height="15" fill="rgb(253,215,40)" fg:x="114" fg:w="1"/><text x="15.9741%" y="287.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.14%)</title><rect x="16.1379%" y="341" width="0.1379%" height="15" fill="rgb(211,81,21)" fg:x="117" fg:w="1"/><text x="16.3879%" y="351.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.14%)</title><rect x="16.1379%" y="325" width="0.1379%" height="15" fill="rgb(208,190,38)" fg:x="117" fg:w="1"/><text x="16.3879%" y="335.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.14%)</title><rect x="16.1379%" y="309" width="0.1379%" height="15" fill="rgb(235,213,38)" fg:x="117" fg:w="1"/><text x="16.3879%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.55%)</title><rect x="15.8621%" y="357" width="0.5517%" height="15" fill="rgb(237,122,38)" fg:x="115" fg:w="4"/><text x="16.1121%" y="367.50"></text></g><g><title>syscall (1 samples, 0.14%)</title><rect x="16.2759%" y="341" width="0.1379%" height="15" fill="rgb(244,218,35)" fg:x="118" fg:w="1"/><text x="16.5259%" y="351.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (1 samples, 0.14%)</title><rect x="16.4138%" y="357" width="0.1379%" height="15" fill="rgb(240,68,47)" fg:x="119" fg:w="1"/><text x="16.6638%" y="367.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (1 samples, 0.14%)</title><rect x="16.4138%" y="341" width="0.1379%" height="15" fill="rgb(210,16,53)" fg:x="119" fg:w="1"/><text x="16.6638%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (5 samples, 0.69%)</title><rect x="16.5517%" y="357" width="0.6897%" height="15" fill="rgb(235,124,12)" fg:x="120" fg:w="5"/><text x="16.8017%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (1 samples, 0.14%)</title><rect x="17.2414%" y="357" width="0.1379%" height="15" fill="rgb(224,169,11)" fg:x="125" fg:w="1"/><text x="17.4914%" y="367.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="17.5172%" y="309" width="0.1379%" height="15" fill="rgb(250,166,2)" fg:x="127" fg:w="1"/><text x="17.7672%" y="319.50"></text></g><g><title>__GI___libc_read (10 samples, 1.38%)</title><rect x="36.5517%" y="213" width="1.3793%" height="15" fill="rgb(242,216,29)" fg:x="265" fg:w="10"/><text x="36.8017%" y="223.50"></text></g><g><title>__GI___libc_read (10 samples, 1.38%)</title><rect x="36.5517%" y="197" width="1.3793%" height="15" fill="rgb(230,116,27)" fg:x="265" fg:w="10"/><text x="36.8017%" y="207.50"></text></g><g><title>[unknown] (10 samples, 1.38%)</title><rect x="36.5517%" y="181" width="1.3793%" height="15" fill="rgb(228,99,48)" fg:x="265" fg:w="10"/><text x="36.8017%" y="191.50"></text></g><g><title>[unknown] (10 samples, 1.38%)</title><rect x="36.5517%" y="165" width="1.3793%" height="15" fill="rgb(253,11,6)" fg:x="265" fg:w="10"/><text x="36.8017%" y="175.50"></text></g><g><title>[unknown] (10 samples, 1.38%)</title><rect x="36.5517%" y="149" width="1.3793%" height="15" fill="rgb(247,143,39)" fg:x="265" fg:w="10"/><text x="36.8017%" y="159.50"></text></g><g><title>[unknown] (8 samples, 1.10%)</title><rect x="36.8276%" y="133" width="1.1034%" height="15" fill="rgb(236,97,10)" fg:x="267" fg:w="8"/><text x="37.0776%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.83%)</title><rect x="37.1034%" y="117" width="0.8276%" height="15" fill="rgb(233,208,19)" fg:x="269" fg:w="6"/><text x="37.3534%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.69%)</title><rect x="37.2414%" y="101" width="0.6897%" height="15" fill="rgb(216,164,2)" fg:x="270" fg:w="5"/><text x="37.4914%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="37.5172%" y="85" width="0.4138%" height="15" fill="rgb(220,129,5)" fg:x="272" fg:w="3"/><text x="37.7672%" y="95.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (11 samples, 1.52%)</title><rect x="36.5517%" y="261" width="1.5172%" height="15" fill="rgb(242,17,10)" fg:x="265" fg:w="11"/><text x="36.8017%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (11 samples, 1.52%)</title><rect x="36.5517%" y="245" width="1.5172%" height="15" fill="rgb(242,107,0)" fg:x="265" fg:w="11"/><text x="36.8017%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (11 samples, 1.52%)</title><rect x="36.5517%" y="229" width="1.5172%" height="15" fill="rgb(251,28,31)" fg:x="265" fg:w="11"/><text x="36.8017%" y="239.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.14%)</title><rect x="37.9310%" y="213" width="0.1379%" height="15" fill="rgb(233,223,10)" fg:x="275" fg:w="1"/><text x="38.1810%" y="223.50"></text></g><g><title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (8 samples, 1.10%)</title><rect x="38.0690%" y="261" width="1.1034%" height="15" fill="rgb(215,21,27)" fg:x="276" fg:w="8"/><text x="38.3190%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned (7 samples, 0.97%)</title><rect x="39.1724%" y="261" width="0.9655%" height="15" fill="rgb(232,23,21)" fg:x="284" fg:w="7"/><text x="39.4224%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 1.10%)</title><rect x="40.1379%" y="261" width="1.1034%" height="15" fill="rgb(244,5,23)" fg:x="291" fg:w="8"/><text x="40.3879%" y="271.50"></text></g><g><title>checked_request2size (4 samples, 0.55%)</title><rect x="48.4138%" y="213" width="0.5517%" height="15" fill="rgb(226,81,46)" fg:x="351" fg:w="4"/><text x="48.6638%" y="223.50"></text></g><g><title>__GI___libc_malloc (30 samples, 4.14%)</title><rect x="45.9310%" y="229" width="4.1379%" height="15" fill="rgb(247,70,30)" fg:x="333" fg:w="30"/><text x="46.1810%" y="239.50">__GI_..</text></g><g><title>tcache_get (8 samples, 1.10%)</title><rect x="48.9655%" y="213" width="1.1034%" height="15" fill="rgb(212,68,19)" fg:x="355" fg:w="8"/><text x="49.2155%" y="223.50"></text></g><g><title>__rdl_alloc (8 samples, 1.10%)</title><rect x="50.0690%" y="229" width="1.1034%" height="15" fill="rgb(240,187,13)" fg:x="363" fg:w="8"/><text x="50.3190%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.97%)</title><rect x="50.2069%" y="213" width="0.9655%" height="15" fill="rgb(223,113,26)" fg:x="364" fg:w="7"/><text x="50.4569%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (79 samples, 10.90%)</title><rect x="41.2414%" y="261" width="10.8966%" height="15" fill="rgb(206,192,2)" fg:x="299" fg:w="79"/><text x="41.4914%" y="271.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::finish_grow (62 samples, 8.55%)</title><rect x="43.5862%" y="245" width="8.5517%" height="15" fill="rgb(241,108,4)" fg:x="316" fg:w="62"/><text x="43.8362%" y="255.50">alloc::raw_v..</text></g><g><title>__rust_alloc (7 samples, 0.97%)</title><rect x="51.1724%" y="229" width="0.9655%" height="15" fill="rgb(247,173,49)" fg:x="371" fg:w="7"/><text x="51.4224%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (69 samples, 9.52%)</title><rect x="52.1379%" y="261" width="9.5172%" height="15" fill="rgb(224,114,35)" fg:x="378" fg:w="69"/><text x="52.3879%" y="271.50">core::str::con..</text></g><g><title>core::str::validations::run_utf8_validation (52 samples, 7.17%)</title><rect x="54.4828%" y="245" width="7.1724%" height="15" fill="rgb(245,159,27)" fg:x="395" fg:w="52"/><text x="54.7328%" y="255.50">core::str:..</text></g><g><title>core::str::validations::contains_nonascii (1 samples, 0.14%)</title><rect x="61.5172%" y="229" width="0.1379%" height="15" fill="rgb(245,172,44)" fg:x="446" fg:w="1"/><text x="61.7672%" y="239.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (339 samples, 46.76%)</title><rect x="22.0690%" y="293" width="46.7586%" height="15" fill="rgb(236,23,11)" fg:x="160" fg:w="339"/><text x="22.3190%" y="303.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>std::io::append_to_string (304 samples, 41.93%)</title><rect x="26.8966%" y="277" width="41.9310%" height="15" fill="rgb(205,117,38)" fg:x="195" fg:w="304"/><text x="27.1466%" y="287.50">std::io::append_to_string</text></g><g><title>std::sys::unix::memchr::memchr (52 samples, 7.17%)</title><rect x="61.6552%" y="261" width="7.1724%" height="15" fill="rgb(237,72,25)" fg:x="447" fg:w="52"/><text x="61.9052%" y="271.50">std::sys::..</text></g><g><title>__memchr_avx2 (33 samples, 4.55%)</title><rect x="64.2759%" y="245" width="4.5517%" height="15" fill="rgb(244,70,9)" fg:x="466" fg:w="33"/><text x="64.5259%" y="255.50">__mem..</text></g><g><title>_int_free (26 samples, 3.59%)</title><rect x="72.1379%" y="277" width="3.5862%" height="15" fill="rgb(217,125,39)" fg:x="523" fg:w="26"/><text x="72.3879%" y="287.50">_int..</text></g><g><title>tcache_put (4 samples, 0.55%)</title><rect x="75.1724%" y="261" width="0.5517%" height="15" fill="rgb(235,36,10)" fg:x="545" fg:w="4"/><text x="75.4224%" y="271.50"></text></g><g><title>__GI___libc_free (54 samples, 7.45%)</title><rect x="68.8276%" y="293" width="7.4483%" height="15" fill="rgb(251,123,47)" fg:x="499" fg:w="54"/><text x="69.0776%" y="303.50">__GI___lib..</text></g><g><title>arena_for_chunk (4 samples, 0.55%)</title><rect x="75.7241%" y="277" width="0.5517%" height="15" fill="rgb(221,13,13)" fg:x="549" fg:w="4"/><text x="75.9741%" y="287.50"></text></g><g><title>arena_for_chunk (3 samples, 0.41%)</title><rect x="75.8621%" y="261" width="0.4138%" height="15" fill="rgb(238,131,9)" fg:x="550" fg:w="3"/><text x="76.1121%" y="271.50"></text></g><g><title>heap_for_ptr (1 samples, 0.14%)</title><rect x="76.1379%" y="245" width="0.1379%" height="15" fill="rgb(211,50,8)" fg:x="552" fg:w="1"/><text x="76.3879%" y="255.50"></text></g><g><title>__rust_dealloc (9 samples, 1.24%)</title><rect x="76.2759%" y="293" width="1.2414%" height="15" fill="rgb(245,182,24)" fg:x="553" fg:w="9"/><text x="76.5259%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (58 samples, 8.00%)</title><rect x="77.5172%" y="293" width="8.0000%" height="15" fill="rgb(242,14,37)" fg:x="562" fg:w="58"/><text x="77.7672%" y="303.50">core::iter:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.28%)</title><rect x="86.0690%" y="261" width="0.2759%" height="15" fill="rgb(246,228,12)" fg:x="624" fg:w="2"/><text x="86.3190%" y="271.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (7 samples, 0.97%)</title><rect x="85.5172%" y="293" width="0.9655%" height="15" fill="rgb(213,55,15)" fg:x="620" fg:w="7"/><text x="85.7672%" y="303.50"></text></g><g><title>core::num::from_str_radix (6 samples, 0.83%)</title><rect x="85.6552%" y="277" width="0.8276%" height="15" fill="rgb(209,9,3)" fg:x="621" fg:w="6"/><text x="85.9052%" y="287.50"></text></g><g><title>&lt;u64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.14%)</title><rect x="86.3448%" y="261" width="0.1379%" height="15" fill="rgb(230,59,30)" fg:x="626" fg:w="1"/><text x="86.5948%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.14%)</title><rect x="86.6207%" y="277" width="0.1379%" height="15" fill="rgb(209,121,21)" fg:x="628" fg:w="1"/><text x="86.8707%" y="287.50"></text></g><g><title>std::fs::buffer_capacity_required (1 samples, 0.14%)</title><rect x="86.6207%" y="261" width="0.1379%" height="15" fill="rgb(220,109,13)" fg:x="628" fg:w="1"/><text x="86.8707%" y="271.50"></text></g><g><title>std::fs::File::metadata (1 samples, 0.14%)</title><rect x="86.6207%" y="245" width="0.1379%" height="15" fill="rgb(232,18,1)" fg:x="628" fg:w="1"/><text x="86.8707%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (1 samples, 0.14%)</title><rect x="86.6207%" y="229" width="0.1379%" height="15" fill="rgb(215,41,42)" fg:x="628" fg:w="1"/><text x="86.8707%" y="239.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.14%)</title><rect x="86.6207%" y="213" width="0.1379%" height="15" fill="rgb(224,123,36)" fg:x="628" fg:w="1"/><text x="86.8707%" y="223.50"></text></g><g><title>alloc::string::String::with_capacity (2 samples, 0.28%)</title><rect x="86.7586%" y="261" width="0.2759%" height="15" fill="rgb(240,125,3)" fg:x="629" fg:w="2"/><text x="87.0086%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.28%)</title><rect x="86.7586%" y="245" width="0.2759%" height="15" fill="rgb(205,98,50)" fg:x="629" fg:w="2"/><text x="87.0086%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.28%)</title><rect x="86.7586%" y="229" width="0.2759%" height="15" fill="rgb(205,185,37)" fg:x="629" fg:w="2"/><text x="87.0086%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.28%)</title><rect x="86.7586%" y="213" width="0.2759%" height="15" fill="rgb(238,207,15)" fg:x="629" fg:w="2"/><text x="87.0086%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.28%)</title><rect x="86.7586%" y="197" width="0.2759%" height="15" fill="rgb(213,199,42)" fg:x="629" fg:w="2"/><text x="87.0086%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.28%)</title><rect x="86.7586%" y="181" width="0.2759%" height="15" fill="rgb(235,201,11)" fg:x="629" fg:w="2"/><text x="87.0086%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.28%)</title><rect x="86.7586%" y="165" width="0.2759%" height="15" fill="rgb(207,46,11)" fg:x="629" fg:w="2"/><text x="87.0086%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.28%)</title><rect x="86.7586%" y="149" width="0.2759%" height="15" fill="rgb(241,35,35)" fg:x="629" fg:w="2"/><text x="87.0086%" y="159.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.28%)</title><rect x="86.7586%" y="133" width="0.2759%" height="15" fill="rgb(243,32,47)" fg:x="629" fg:w="2"/><text x="87.0086%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.41%)</title><rect x="86.7586%" y="277" width="0.4138%" height="15" fill="rgb(247,202,23)" fg:x="629" fg:w="3"/><text x="87.0086%" y="287.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.14%)</title><rect x="87.0345%" y="261" width="0.1379%" height="15" fill="rgb(219,102,11)" fg:x="631" fg:w="1"/><text x="87.2845%" y="271.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (507 samples, 69.93%)</title><rect x="17.3793%" y="341" width="69.9310%" height="15" fill="rgb(243,110,44)" fg:x="126" fg:w="507"/><text x="17.6293%" y="351.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (507 samples, 69.93%)</title><rect x="17.3793%" y="325" width="69.9310%" height="15" fill="rgb(222,74,54)" fg:x="126" fg:w="507"/><text x="17.6293%" y="335.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>zmem::memory::Process::new (505 samples, 69.66%)</title><rect x="17.6552%" y="309" width="69.6552%" height="15" fill="rgb(216,99,12)" fg:x="128" fg:w="505"/><text x="17.9052%" y="319.50">zmem::memory::Process::new</text></g><g><title>zmem::memory::get_cmd (6 samples, 0.83%)</title><rect x="86.4828%" y="293" width="0.8276%" height="15" fill="rgb(226,22,26)" fg:x="627" fg:w="6"/><text x="86.7328%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.14%)</title><rect x="87.1724%" y="277" width="0.1379%" height="15" fill="rgb(217,163,10)" fg:x="632" fg:w="1"/><text x="87.4224%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="87.1724%" y="261" width="0.1379%" height="15" fill="rgb(213,25,53)" fg:x="632" fg:w="1"/><text x="87.4224%" y="271.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.14%)</title><rect x="87.1724%" y="245" width="0.1379%" height="15" fill="rgb(252,105,26)" fg:x="632" fg:w="1"/><text x="87.4224%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.14%)</title><rect x="87.1724%" y="229" width="0.1379%" height="15" fill="rgb(220,39,43)" fg:x="632" fg:w="1"/><text x="87.4224%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::gen_u32 (1 samples, 0.14%)</title><rect x="87.3103%" y="261" width="0.1379%" height="15" fill="rgb(229,68,48)" fg:x="633" fg:w="1"/><text x="87.5603%" y="271.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.28%)</title><rect x="87.3103%" y="341" width="0.2759%" height="15" fill="rgb(252,8,32)" fg:x="633" fg:w="2"/><text x="87.5603%" y="351.50"></text></g><g><title>futures_task::waker::wake_by_ref_arc_raw (2 samples, 0.28%)</title><rect x="87.3103%" y="325" width="0.2759%" height="15" fill="rgb(223,20,43)" fg:x="633" fg:w="2"/><text x="87.5603%" y="335.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (2 samples, 0.28%)</title><rect x="87.3103%" y="309" width="0.2759%" height="15" fill="rgb(229,81,49)" fg:x="633" fg:w="2"/><text x="87.5603%" y="319.50"></text></g><g><title>tokio::runtime::park::wake (2 samples, 0.28%)</title><rect x="87.3103%" y="293" width="0.2759%" height="15" fill="rgb(236,28,36)" fg:x="633" fg:w="2"/><text x="87.5603%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.28%)</title><rect x="87.3103%" y="277" width="0.2759%" height="15" fill="rgb(249,185,26)" fg:x="633" fg:w="2"/><text x="87.5603%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.14%)</title><rect x="87.4483%" y="261" width="0.1379%" height="15" fill="rgb(249,174,33)" fg:x="634" fg:w="1"/><text x="87.6983%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (522 samples, 72.00%)</title><rect x="15.8621%" y="373" width="72.0000%" height="15" fill="rgb(233,201,37)" fg:x="115" fg:w="522"/><text x="16.1121%" y="383.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (511 samples, 70.48%)</title><rect x="17.3793%" y="357" width="70.4828%" height="15" fill="rgb(221,78,26)" fg:x="126" fg:w="511"/><text x="17.6293%" y="367.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (2 samples, 0.28%)</title><rect x="87.5862%" y="341" width="0.2759%" height="15" fill="rgb(250,127,30)" fg:x="635" fg:w="2"/><text x="87.8362%" y="351.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (589 samples, 81.24%)</title><rect x="6.7586%" y="453" width="81.2414%" height="15" fill="rgb(230,49,44)" fg:x="49" fg:w="589"/><text x="7.0086%" y="463.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (588 samples, 81.10%)</title><rect x="6.8966%" y="437" width="81.1034%" height="15" fill="rgb(229,67,23)" fg:x="50" fg:w="588"/><text x="7.1466%" y="447.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (588 samples, 81.10%)</title><rect x="6.8966%" y="421" width="81.1034%" height="15" fill="rgb(249,83,47)" fg:x="50" fg:w="588"/><text x="7.1466%" y="431.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (582 samples, 80.28%)</title><rect x="7.7241%" y="405" width="80.2759%" height="15" fill="rgb(215,43,3)" fg:x="56" fg:w="582"/><text x="7.9741%" y="415.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (581 samples, 80.14%)</title><rect x="7.8621%" y="389" width="80.1379%" height="15" fill="rgb(238,154,13)" fg:x="57" fg:w="581"/><text x="8.1121%" y="399.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::close_and_shutdown_all (1 samples, 0.14%)</title><rect x="87.8621%" y="373" width="0.1379%" height="15" fill="rgb(219,56,2)" fg:x="637" fg:w="1"/><text x="88.1121%" y="383.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (613 samples, 84.55%)</title><rect x="3.5862%" y="485" width="84.5517%" height="15" fill="rgb(233,0,4)" fg:x="26" fg:w="613"/><text x="3.8362%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (611 samples, 84.28%)</title><rect x="3.8621%" y="469" width="84.2759%" height="15" fill="rgb(235,30,7)" fg:x="28" fg:w="611"/><text x="4.1121%" y="479.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.14%)</title><rect x="88.0000%" y="453" width="0.1379%" height="15" fill="rgb(250,79,13)" fg:x="638" fg:w="1"/><text x="88.2500%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (615 samples, 84.83%)</title><rect x="3.4483%" y="533" width="84.8276%" height="15" fill="rgb(211,146,34)" fg:x="25" fg:w="615"/><text x="3.6983%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (615 samples, 84.83%)</title><rect x="3.4483%" y="517" width="84.8276%" height="15" fill="rgb(228,22,38)" fg:x="25" fg:w="615"/><text x="3.6983%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (615 samples, 84.83%)</title><rect x="3.4483%" y="501" width="84.8276%" height="15" fill="rgb(235,168,5)" fg:x="25" fg:w="615"/><text x="3.6983%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::thread_info::set (1 samples, 0.14%)</title><rect x="88.1379%" y="485" width="0.1379%" height="15" fill="rgb(221,155,16)" fg:x="639" fg:w="1"/><text x="88.3879%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.14%)</title><rect x="88.1379%" y="469" width="0.1379%" height="15" fill="rgb(215,215,53)" fg:x="639" fg:w="1"/><text x="88.3879%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.14%)</title><rect x="88.1379%" y="453" width="0.1379%" height="15" fill="rgb(223,4,10)" fg:x="639" fg:w="1"/><text x="88.3879%" y="463.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (1 samples, 0.14%)</title><rect x="88.1379%" y="437" width="0.1379%" height="15" fill="rgb(234,103,6)" fg:x="639" fg:w="1"/><text x="88.3879%" y="447.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::register_dtor (1 samples, 0.14%)</title><rect x="88.1379%" y="421" width="0.1379%" height="15" fill="rgb(227,97,0)" fg:x="639" fg:w="1"/><text x="88.3879%" y="431.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.14%)</title><rect x="88.1379%" y="405" width="0.1379%" height="15" fill="rgb(234,150,53)" fg:x="639" fg:w="1"/><text x="88.3879%" y="415.50"></text></g><g><title>tokio-runtime-w (641 samples, 88.41%)</title><rect x="0.0000%" y="597" width="88.4138%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="641"/><text x="0.2500%" y="607.50">tokio-runtime-w</text></g><g><title>clone3 (640 samples, 88.28%)</title><rect x="0.1379%" y="581" width="88.2759%" height="15" fill="rgb(222,22,37)" fg:x="1" fg:w="640"/><text x="0.3879%" y="591.50">clone3</text></g><g><title>start_thread (640 samples, 88.28%)</title><rect x="0.1379%" y="565" width="88.2759%" height="15" fill="rgb(237,53,32)" fg:x="1" fg:w="640"/><text x="0.3879%" y="575.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (617 samples, 85.10%)</title><rect x="3.3103%" y="549" width="85.1034%" height="15" fill="rgb(233,25,53)" fg:x="24" fg:w="617"/><text x="3.5603%" y="559.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="88.2759%" y="533" width="0.1379%" height="15" fill="rgb(210,40,34)" fg:x="640" fg:w="1"/><text x="88.5259%" y="543.50"></text></g><g><title>[[heap]] (1 samples, 0.14%)</title><rect x="88.4138%" y="581" width="0.1379%" height="15" fill="rgb(241,220,44)" fg:x="641" fg:w="1"/><text x="88.6638%" y="591.50"></text></g><g><title>clone3 (1 samples, 0.14%)</title><rect x="88.4138%" y="565" width="0.1379%" height="15" fill="rgb(235,28,35)" fg:x="641" fg:w="1"/><text x="88.6638%" y="575.50"></text></g><g><title>[unknown] (10 samples, 1.38%)</title><rect x="88.5517%" y="581" width="1.3793%" height="15" fill="rgb(210,56,17)" fg:x="642" fg:w="10"/><text x="88.8017%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="89.7931%" y="565" width="0.1379%" height="15" fill="rgb(224,130,29)" fg:x="651" fg:w="1"/><text x="90.0431%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="89.9310%" y="565" width="0.1379%" height="15" fill="rgb(235,212,8)" fg:x="652" fg:w="1"/><text x="90.1810%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="89.9310%" y="549" width="0.1379%" height="15" fill="rgb(223,33,50)" fg:x="652" fg:w="1"/><text x="90.1810%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="89.9310%" y="533" width="0.1379%" height="15" fill="rgb(219,149,13)" fg:x="652" fg:w="1"/><text x="90.1810%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="89.9310%" y="517" width="0.1379%" height="15" fill="rgb(250,156,29)" fg:x="652" fg:w="1"/><text x="90.1810%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="89.9310%" y="501" width="0.1379%" height="15" fill="rgb(216,193,19)" fg:x="652" fg:w="1"/><text x="90.1810%" y="511.50"></text></g><g><title>__GI_exit (1 samples, 0.14%)</title><rect x="90.0690%" y="533" width="0.1379%" height="15" fill="rgb(216,135,14)" fg:x="653" fg:w="1"/><text x="90.3190%" y="543.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.14%)</title><rect x="90.0690%" y="517" width="0.1379%" height="15" fill="rgb(241,47,5)" fg:x="653" fg:w="1"/><text x="90.3190%" y="527.50"></text></g><g><title>_dl_fini (1 samples, 0.14%)</title><rect x="90.0690%" y="501" width="0.1379%" height="15" fill="rgb(233,42,35)" fg:x="653" fg:w="1"/><text x="90.3190%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="90.2069%" y="293" width="0.1379%" height="15" fill="rgb(231,13,6)" fg:x="654" fg:w="1"/><text x="90.4569%" y="303.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.14%)</title><rect x="90.2069%" y="277" width="0.1379%" height="15" fill="rgb(207,181,40)" fg:x="654" fg:w="1"/><text x="90.4569%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.14%)</title><rect x="90.3448%" y="293" width="0.1379%" height="15" fill="rgb(254,173,49)" fg:x="655" fg:w="1"/><text x="90.5948%" y="303.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1 samples, 0.14%)</title><rect x="90.4828%" y="293" width="0.1379%" height="15" fill="rgb(221,1,38)" fg:x="656" fg:w="1"/><text x="90.7328%" y="303.50"></text></g><g><title>std::sys::unix::thread::Thread::join (1 samples, 0.14%)</title><rect x="90.4828%" y="277" width="0.1379%" height="15" fill="rgb(206,124,46)" fg:x="656" fg:w="1"/><text x="90.7328%" y="287.50"></text></g><g><title>__pthread_clockjoin_ex (1 samples, 0.14%)</title><rect x="90.4828%" y="261" width="0.1379%" height="15" fill="rgb(249,21,11)" fg:x="656" fg:w="1"/><text x="90.7328%" y="271.50"></text></g><g><title>__GI___futex_abstimed_wait_cancelable64 (1 samples, 0.14%)</title><rect x="90.4828%" y="245" width="0.1379%" height="15" fill="rgb(222,201,40)" fg:x="656" fg:w="1"/><text x="90.7328%" y="255.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.14%)</title><rect x="90.4828%" y="229" width="0.1379%" height="15" fill="rgb(235,61,29)" fg:x="656" fg:w="1"/><text x="90.7328%" y="239.50"></text></g><g><title>__futex_abstimed_wait_common64 (1 samples, 0.14%)</title><rect x="90.4828%" y="213" width="0.1379%" height="15" fill="rgb(219,207,3)" fg:x="656" fg:w="1"/><text x="90.7328%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="90.4828%" y="197" width="0.1379%" height="15" fill="rgb(222,56,46)" fg:x="656" fg:w="1"/><text x="90.7328%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (7 samples, 0.97%)</title><rect x="90.2069%" y="325" width="0.9655%" height="15" fill="rgb(239,76,54)" fg:x="654" fg:w="7"/><text x="90.4569%" y="335.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (7 samples, 0.97%)</title><rect x="90.2069%" y="309" width="0.9655%" height="15" fill="rgb(231,124,27)" fg:x="654" fg:w="7"/><text x="90.4569%" y="319.50"></text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (4 samples, 0.55%)</title><rect x="90.6207%" y="293" width="0.5517%" height="15" fill="rgb(249,195,6)" fg:x="657" fg:w="4"/><text x="90.8707%" y="303.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (3 samples, 0.41%)</title><rect x="90.7586%" y="277" width="0.4138%" height="15" fill="rgb(237,174,47)" fg:x="658" fg:w="3"/><text x="91.0086%" y="287.50"></text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.28%)</title><rect x="90.8966%" y="261" width="0.2759%" height="15" fill="rgb(206,201,31)" fg:x="659" fg:w="2"/><text x="91.1466%" y="271.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.14%)</title><rect x="91.0345%" y="245" width="0.1379%" height="15" fill="rgb(231,57,52)" fg:x="660" fg:w="1"/><text x="91.2845%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;zmem::memory::Process&gt;&gt;&gt;&gt;&gt; (1 samples, 0.14%)</title><rect x="91.7241%" y="213" width="0.1379%" height="15" fill="rgb(248,177,22)" fg:x="665" fg:w="1"/><text x="91.9741%" y="223.50"></text></g><g><title>__GI___libc_free (1 samples, 0.14%)</title><rect x="91.7241%" y="197" width="0.1379%" height="15" fill="rgb(215,211,37)" fg:x="665" fg:w="1"/><text x="91.9741%" y="207.50"></text></g><g><title>_int_free (1 samples, 0.14%)</title><rect x="91.7241%" y="181" width="0.1379%" height="15" fill="rgb(241,128,51)" fg:x="665" fg:w="1"/><text x="91.9741%" y="191.50"></text></g><g><title>unlink_chunk (1 samples, 0.14%)</title><rect x="91.7241%" y="165" width="0.1379%" height="15" fill="rgb(227,165,31)" fg:x="665" fg:w="1"/><text x="91.9741%" y="175.50"></text></g><g><title>&lt;futures_util::future::try_join_all::TryJoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (5 samples, 0.69%)</title><rect x="91.3103%" y="277" width="0.6897%" height="15" fill="rgb(228,167,24)" fg:x="662" fg:w="5"/><text x="91.5603%" y="287.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (5 samples, 0.69%)</title><rect x="91.3103%" y="261" width="0.6897%" height="15" fill="rgb(228,143,12)" fg:x="662" fg:w="5"/><text x="91.5603%" y="271.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (4 samples, 0.55%)</title><rect x="91.4483%" y="245" width="0.5517%" height="15" fill="rgb(249,149,8)" fg:x="663" fg:w="4"/><text x="91.6983%" y="255.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (3 samples, 0.41%)</title><rect x="91.5862%" y="229" width="0.4138%" height="15" fill="rgb(243,35,44)" fg:x="664" fg:w="3"/><text x="91.8362%" y="239.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 0.14%)</title><rect x="91.8621%" y="213" width="0.1379%" height="15" fill="rgb(246,89,9)" fg:x="666" fg:w="1"/><text x="92.1121%" y="223.50"></text></g><g><title>tokio::runtime::park::clone (1 samples, 0.14%)</title><rect x="91.8621%" y="197" width="0.1379%" height="15" fill="rgb(233,213,13)" fg:x="666" fg:w="1"/><text x="92.1121%" y="207.50"></text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.14%)</title><rect x="92.0000%" y="277" width="0.1379%" height="15" fill="rgb(233,141,41)" fg:x="667" fg:w="1"/><text x="92.2500%" y="287.50"></text></g><g><title>__libc_start_main_impl (16 samples, 2.21%)</title><rect x="90.0690%" y="565" width="2.2069%" height="15" fill="rgb(239,167,4)" fg:x="653" fg:w="16"/><text x="90.3190%" y="575.50">_..</text></g><g><title>__libc_start_call_main (16 samples, 2.21%)</title><rect x="90.0690%" y="549" width="2.2069%" height="15" fill="rgb(209,217,16)" fg:x="653" fg:w="16"/><text x="90.3190%" y="559.50">_..</text></g><g><title>main (15 samples, 2.07%)</title><rect x="90.2069%" y="533" width="2.0690%" height="15" fill="rgb(219,88,35)" fg:x="654" fg:w="15"/><text x="90.4569%" y="543.50">m..</text></g><g><title>std::rt::lang_start_internal (15 samples, 2.07%)</title><rect x="90.2069%" y="517" width="2.0690%" height="15" fill="rgb(220,193,23)" fg:x="654" fg:w="15"/><text x="90.4569%" y="527.50">s..</text></g><g><title>std::panic::catch_unwind (15 samples, 2.07%)</title><rect x="90.2069%" y="501" width="2.0690%" height="15" fill="rgb(230,90,52)" fg:x="654" fg:w="15"/><text x="90.4569%" y="511.50">s..</text></g><g><title>std::panicking::try (15 samples, 2.07%)</title><rect x="90.2069%" y="485" width="2.0690%" height="15" fill="rgb(252,106,19)" fg:x="654" fg:w="15"/><text x="90.4569%" y="495.50">s..</text></g><g><title>std::panicking::try::do_call (15 samples, 2.07%)</title><rect x="90.2069%" y="469" width="2.0690%" height="15" fill="rgb(206,74,20)" fg:x="654" fg:w="15"/><text x="90.4569%" y="479.50">s..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (15 samples, 2.07%)</title><rect x="90.2069%" y="453" width="2.0690%" height="15" fill="rgb(230,138,44)" fg:x="654" fg:w="15"/><text x="90.4569%" y="463.50">s..</text></g><g><title>std::panic::catch_unwind (15 samples, 2.07%)</title><rect x="90.2069%" y="437" width="2.0690%" height="15" fill="rgb(235,182,43)" fg:x="654" fg:w="15"/><text x="90.4569%" y="447.50">s..</text></g><g><title>std::panicking::try (15 samples, 2.07%)</title><rect x="90.2069%" y="421" width="2.0690%" height="15" fill="rgb(242,16,51)" fg:x="654" fg:w="15"/><text x="90.4569%" y="431.50">s..</text></g><g><title>std::panicking::try::do_call (15 samples, 2.07%)</title><rect x="90.2069%" y="405" width="2.0690%" height="15" fill="rgb(248,9,4)" fg:x="654" fg:w="15"/><text x="90.4569%" y="415.50">s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (15 samples, 2.07%)</title><rect x="90.2069%" y="389" width="2.0690%" height="15" fill="rgb(210,31,22)" fg:x="654" fg:w="15"/><text x="90.4569%" y="399.50">c..</text></g><g><title>std::rt::lang_start::{{closure}} (15 samples, 2.07%)</title><rect x="90.2069%" y="373" width="2.0690%" height="15" fill="rgb(239,54,39)" fg:x="654" fg:w="15"/><text x="90.4569%" y="383.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (15 samples, 2.07%)</title><rect x="90.2069%" y="357" width="2.0690%" height="15" fill="rgb(230,99,41)" fg:x="654" fg:w="15"/><text x="90.4569%" y="367.50">s..</text></g><g><title>zmem::main (15 samples, 2.07%)</title><rect x="90.2069%" y="341" width="2.0690%" height="15" fill="rgb(253,106,12)" fg:x="654" fg:w="15"/><text x="90.4569%" y="351.50">z..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (8 samples, 1.10%)</title><rect x="91.1724%" y="325" width="1.1034%" height="15" fill="rgb(213,46,41)" fg:x="661" fg:w="8"/><text x="91.4224%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (8 samples, 1.10%)</title><rect x="91.1724%" y="309" width="1.1034%" height="15" fill="rgb(215,133,35)" fg:x="661" fg:w="8"/><text x="91.4224%" y="319.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (8 samples, 1.10%)</title><rect x="91.1724%" y="293" width="1.1034%" height="15" fill="rgb(213,28,5)" fg:x="661" fg:w="8"/><text x="91.4224%" y="303.50"></text></g><g><title>zmem::memory::get_cmd (1 samples, 0.14%)</title><rect x="92.1379%" y="277" width="0.1379%" height="15" fill="rgb(215,77,49)" fg:x="668" fg:w="1"/><text x="92.3879%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.14%)</title><rect x="92.1379%" y="261" width="0.1379%" height="15" fill="rgb(248,100,22)" fg:x="668" fg:w="1"/><text x="92.3879%" y="271.50"></text></g><g><title>std::fs::buffer_capacity_required (1 samples, 0.14%)</title><rect x="92.1379%" y="245" width="0.1379%" height="15" fill="rgb(208,67,9)" fg:x="668" fg:w="1"/><text x="92.3879%" y="255.50"></text></g><g><title>std::fs::File::metadata (1 samples, 0.14%)</title><rect x="92.1379%" y="229" width="0.1379%" height="15" fill="rgb(219,133,21)" fg:x="668" fg:w="1"/><text x="92.3879%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (1 samples, 0.14%)</title><rect x="92.1379%" y="213" width="0.1379%" height="15" fill="rgb(246,46,29)" fg:x="668" fg:w="1"/><text x="92.3879%" y="223.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.14%)</title><rect x="92.1379%" y="197" width="0.1379%" height="15" fill="rgb(246,185,52)" fg:x="668" fg:w="1"/><text x="92.3879%" y="207.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.14%)</title><rect x="92.1379%" y="181" width="0.1379%" height="15" fill="rgb(252,136,11)" fg:x="668" fg:w="1"/><text x="92.3879%" y="191.50"></text></g><g><title>statx (1 samples, 0.14%)</title><rect x="92.1379%" y="165" width="0.1379%" height="15" fill="rgb(219,138,53)" fg:x="668" fg:w="1"/><text x="92.3879%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.1379%" y="149" width="0.1379%" height="15" fill="rgb(211,51,23)" fg:x="668" fg:w="1"/><text x="92.3879%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.1379%" y="133" width="0.1379%" height="15" fill="rgb(247,221,28)" fg:x="668" fg:w="1"/><text x="92.3879%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.1379%" y="117" width="0.1379%" height="15" fill="rgb(251,222,45)" fg:x="668" fg:w="1"/><text x="92.3879%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.1379%" y="101" width="0.1379%" height="15" fill="rgb(217,162,53)" fg:x="668" fg:w="1"/><text x="92.3879%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.1379%" y="85" width="0.1379%" height="15" fill="rgb(229,93,14)" fg:x="668" fg:w="1"/><text x="92.3879%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.1379%" y="69" width="0.1379%" height="15" fill="rgb(209,67,49)" fg:x="668" fg:w="1"/><text x="92.3879%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.1379%" y="53" width="0.1379%" height="15" fill="rgb(213,87,29)" fg:x="668" fg:w="1"/><text x="92.3879%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.1379%" y="37" width="0.1379%" height="15" fill="rgb(205,151,52)" fg:x="668" fg:w="1"/><text x="92.3879%" y="47.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="92.4138%" y="549" width="0.2759%" height="15" fill="rgb(253,215,39)" fg:x="670" fg:w="2"/><text x="92.6638%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="92.4138%" y="533" width="0.2759%" height="15" fill="rgb(221,220,41)" fg:x="670" fg:w="2"/><text x="92.6638%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.5517%" y="517" width="0.1379%" height="15" fill="rgb(218,133,21)" fg:x="671" fg:w="1"/><text x="92.8017%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.5517%" y="501" width="0.1379%" height="15" fill="rgb(221,193,43)" fg:x="671" fg:w="1"/><text x="92.8017%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.5517%" y="485" width="0.1379%" height="15" fill="rgb(240,128,52)" fg:x="671" fg:w="1"/><text x="92.8017%" y="495.50"></text></g><g><title>_dl_start_final (1 samples, 0.14%)</title><rect x="92.6897%" y="549" width="0.1379%" height="15" fill="rgb(253,114,12)" fg:x="672" fg:w="1"/><text x="92.9397%" y="559.50"></text></g><g><title>_dl_setup_hash (1 samples, 0.14%)</title><rect x="92.6897%" y="533" width="0.1379%" height="15" fill="rgb(215,223,47)" fg:x="672" fg:w="1"/><text x="92.9397%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.6897%" y="517" width="0.1379%" height="15" fill="rgb(248,225,23)" fg:x="672" fg:w="1"/><text x="92.9397%" y="527.50"></text></g><g><title>_start (22 samples, 3.03%)</title><rect x="89.9310%" y="581" width="3.0345%" height="15" fill="rgb(250,108,0)" fg:x="652" fg:w="22"/><text x="90.1810%" y="591.50">_st..</text></g><g><title>_dl_start (5 samples, 0.69%)</title><rect x="92.2759%" y="565" width="0.6897%" height="15" fill="rgb(228,208,7)" fg:x="669" fg:w="5"/><text x="92.5259%" y="575.50"></text></g><g><title>rtld_timer_start (1 samples, 0.14%)</title><rect x="92.8276%" y="549" width="0.1379%" height="15" fill="rgb(244,45,10)" fg:x="673" fg:w="1"/><text x="93.0776%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.8276%" y="533" width="0.1379%" height="15" fill="rgb(207,125,25)" fg:x="673" fg:w="1"/><text x="93.0776%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.8276%" y="517" width="0.1379%" height="15" fill="rgb(210,195,18)" fg:x="673" fg:w="1"/><text x="93.0776%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.8276%" y="501" width="0.1379%" height="15" fill="rgb(249,80,12)" fg:x="673" fg:w="1"/><text x="93.0776%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="92.8276%" y="485" width="0.1379%" height="15" fill="rgb(221,65,9)" fg:x="673" fg:w="1"/><text x="93.0776%" y="495.50"></text></g><g><title>[unknown] (10 samples, 1.38%)</title><rect x="93.1034%" y="549" width="1.3793%" height="15" fill="rgb(235,49,36)" fg:x="675" fg:w="10"/><text x="93.3534%" y="559.50"></text></g><g><title>[unknown] (8 samples, 1.10%)</title><rect x="93.3793%" y="533" width="1.1034%" height="15" fill="rgb(225,32,20)" fg:x="677" fg:w="8"/><text x="93.6293%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.83%)</title><rect x="93.6552%" y="517" width="0.8276%" height="15" fill="rgb(215,141,46)" fg:x="679" fg:w="6"/><text x="93.9052%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.55%)</title><rect x="93.9310%" y="501" width="0.5517%" height="15" fill="rgb(250,160,47)" fg:x="681" fg:w="4"/><text x="94.1810%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="94.0690%" y="485" width="0.4138%" height="15" fill="rgb(216,222,40)" fg:x="682" fg:w="3"/><text x="94.3190%" y="495.50"></text></g><g><title>__GI___ctype_init (5 samples, 0.69%)</title><rect x="94.4828%" y="549" width="0.6897%" height="15" fill="rgb(234,217,39)" fg:x="685" fg:w="5"/><text x="94.7328%" y="559.50"></text></g><g><title>__GI___sigsetjmp (1 samples, 0.14%)</title><rect x="95.1724%" y="549" width="0.1379%" height="15" fill="rgb(207,178,40)" fg:x="690" fg:w="1"/><text x="95.4224%" y="559.50"></text></g><g><title>__GI__setjmp (1 samples, 0.14%)</title><rect x="95.3103%" y="549" width="0.1379%" height="15" fill="rgb(221,136,13)" fg:x="691" fg:w="1"/><text x="95.5603%" y="559.50"></text></g><g><title>rseq_register_current_thread (11 samples, 1.52%)</title><rect x="95.4483%" y="549" width="1.5172%" height="15" fill="rgb(249,199,10)" fg:x="692" fg:w="11"/><text x="95.6983%" y="559.50"></text></g><g><title>[unknown] (11 samples, 1.52%)</title><rect x="95.4483%" y="533" width="1.5172%" height="15" fill="rgb(249,222,13)" fg:x="692" fg:w="11"/><text x="95.6983%" y="543.50"></text></g><g><title>[unknown] (10 samples, 1.38%)</title><rect x="95.5862%" y="517" width="1.3793%" height="15" fill="rgb(244,185,38)" fg:x="693" fg:w="10"/><text x="95.8362%" y="527.50"></text></g><g><title>[unknown] (9 samples, 1.24%)</title><rect x="95.7241%" y="501" width="1.2414%" height="15" fill="rgb(236,202,9)" fg:x="694" fg:w="9"/><text x="95.9741%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.55%)</title><rect x="96.4138%" y="485" width="0.5517%" height="15" fill="rgb(250,229,37)" fg:x="699" fg:w="4"/><text x="96.6638%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.55%)</title><rect x="96.4138%" y="469" width="0.5517%" height="15" fill="rgb(206,174,23)" fg:x="699" fg:w="4"/><text x="96.6638%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="96.5517%" y="453" width="0.4138%" height="15" fill="rgb(211,33,43)" fg:x="700" fg:w="3"/><text x="96.8017%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="97.1034%" y="453" width="0.1379%" height="15" fill="rgb(245,58,50)" fg:x="704" fg:w="1"/><text x="97.3534%" y="463.50"></text></g><g><title>__pthread_setname_np (2 samples, 0.28%)</title><rect x="97.1034%" y="469" width="0.2759%" height="15" fill="rgb(244,68,36)" fg:x="704" fg:w="2"/><text x="97.3534%" y="479.50"></text></g><g><title>__GI___prctl (1 samples, 0.14%)</title><rect x="97.2414%" y="453" width="0.1379%" height="15" fill="rgb(232,229,15)" fg:x="705" fg:w="1"/><text x="97.4914%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="97.2414%" y="437" width="0.1379%" height="15" fill="rgb(254,30,23)" fg:x="705" fg:w="1"/><text x="97.4914%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="97.2414%" y="421" width="0.1379%" height="15" fill="rgb(235,160,14)" fg:x="705" fg:w="1"/><text x="97.4914%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="97.2414%" y="405" width="0.1379%" height="15" fill="rgb(212,155,44)" fg:x="705" fg:w="1"/><text x="97.4914%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="97.2414%" y="389" width="0.1379%" height="15" fill="rgb(226,2,50)" fg:x="705" fg:w="1"/><text x="97.4914%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="97.2414%" y="373" width="0.1379%" height="15" fill="rgb(234,177,6)" fg:x="705" fg:w="1"/><text x="97.4914%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.41%)</title><rect x="97.1034%" y="533" width="0.4138%" height="15" fill="rgb(217,24,9)" fg:x="704" fg:w="3"/><text x="97.3534%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.41%)</title><rect x="97.1034%" y="517" width="0.4138%" height="15" fill="rgb(220,13,46)" fg:x="704" fg:w="3"/><text x="97.3534%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.41%)</title><rect x="97.1034%" y="501" width="0.4138%" height="15" fill="rgb(239,221,27)" fg:x="704" fg:w="3"/><text x="97.3534%" y="511.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (3 samples, 0.41%)</title><rect x="97.1034%" y="485" width="0.4138%" height="15" fill="rgb(222,198,25)" fg:x="704" fg:w="3"/><text x="97.3534%" y="495.50"></text></g><g><title>std::sys::unix::thread::truncate_cstr (1 samples, 0.14%)</title><rect x="97.3793%" y="469" width="0.1379%" height="15" fill="rgb(211,99,13)" fg:x="706" fg:w="1"/><text x="97.6293%" y="479.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.14%)</title><rect x="97.3793%" y="453" width="0.1379%" height="15" fill="rgb(232,111,31)" fg:x="706" fg:w="1"/><text x="97.6293%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="97.5172%" y="533" width="0.1379%" height="15" fill="rgb(245,82,37)" fg:x="707" fg:w="1"/><text x="97.7672%" y="543.50"></text></g><g><title>__GI_sigaltstack (8 samples, 1.10%)</title><rect x="97.6552%" y="501" width="1.1034%" height="15" fill="rgb(227,149,46)" fg:x="708" fg:w="8"/><text x="97.9052%" y="511.50"></text></g><g><title>[unknown] (7 samples, 0.97%)</title><rect x="97.7931%" y="485" width="0.9655%" height="15" fill="rgb(218,36,50)" fg:x="709" fg:w="7"/><text x="98.0431%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.97%)</title><rect x="97.7931%" y="469" width="0.9655%" height="15" fill="rgb(226,80,48)" fg:x="709" fg:w="7"/><text x="98.0431%" y="479.50"></text></g><g><title>[unknown] (7 samples, 0.97%)</title><rect x="97.7931%" y="453" width="0.9655%" height="15" fill="rgb(238,224,15)" fg:x="709" fg:w="7"/><text x="98.0431%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.41%)</title><rect x="98.3448%" y="437" width="0.4138%" height="15" fill="rgb(241,136,10)" fg:x="713" fg:w="3"/><text x="98.5948%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="98.4828%" y="421" width="0.2759%" height="15" fill="rgb(208,32,45)" fg:x="714" fg:w="2"/><text x="98.7328%" y="431.50"></text></g><g><title>__GI___mmap64 (7 samples, 0.97%)</title><rect x="98.7586%" y="469" width="0.9655%" height="15" fill="rgb(207,135,9)" fg:x="716" fg:w="7"/><text x="99.0086%" y="479.50"></text></g><g><title>__GI___mmap64 (7 samples, 0.97%)</title><rect x="98.7586%" y="453" width="0.9655%" height="15" fill="rgb(206,86,44)" fg:x="716" fg:w="7"/><text x="99.0086%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.97%)</title><rect x="98.7586%" y="437" width="0.9655%" height="15" fill="rgb(245,177,15)" fg:x="716" fg:w="7"/><text x="99.0086%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.83%)</title><rect x="98.8966%" y="421" width="0.8276%" height="15" fill="rgb(206,64,50)" fg:x="717" fg:w="6"/><text x="99.1466%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.83%)</title><rect x="98.8966%" y="405" width="0.8276%" height="15" fill="rgb(234,36,40)" fg:x="717" fg:w="6"/><text x="99.1466%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.55%)</title><rect x="99.1724%" y="389" width="0.5517%" height="15" fill="rgb(213,64,8)" fg:x="719" fg:w="4"/><text x="99.4224%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="99.4483%" y="373" width="0.2759%" height="15" fill="rgb(210,75,36)" fg:x="721" fg:w="2"/><text x="99.6983%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="99.5862%" y="357" width="0.1379%" height="15" fill="rgb(229,88,21)" fg:x="722" fg:w="1"/><text x="99.8362%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="99.5862%" y="341" width="0.1379%" height="15" fill="rgb(252,204,47)" fg:x="722" fg:w="1"/><text x="99.8362%" y="351.50"></text></g><g><title>__GI_mprotect (1 samples, 0.14%)</title><rect x="99.7241%" y="469" width="0.1379%" height="15" fill="rgb(208,77,27)" fg:x="723" fg:w="1"/><text x="99.9741%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="99.7241%" y="453" width="0.1379%" height="15" fill="rgb(221,76,26)" fg:x="723" fg:w="1"/><text x="99.9741%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="99.7241%" y="437" width="0.1379%" height="15" fill="rgb(225,139,18)" fg:x="723" fg:w="1"/><text x="99.9741%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="99.7241%" y="421" width="0.1379%" height="15" fill="rgb(230,137,11)" fg:x="723" fg:w="1"/><text x="99.9741%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="99.7241%" y="405" width="0.1379%" height="15" fill="rgb(212,28,1)" fg:x="723" fg:w="1"/><text x="99.9741%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="99.7241%" y="389" width="0.1379%" height="15" fill="rgb(248,164,17)" fg:x="723" fg:w="1"/><text x="99.9741%" y="399.50"></text></g><g><title>all (725 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="725"/><text x="0.2500%" y="623.50"></text></g><g><title>zmem (84 samples, 11.59%)</title><rect x="88.4138%" y="597" width="11.5862%" height="15" fill="rgb(243,84,45)" fg:x="641" fg:w="84"/><text x="88.6638%" y="607.50">zmem</text></g><g><title>clone3 (51 samples, 7.03%)</title><rect x="92.9655%" y="581" width="7.0345%" height="15" fill="rgb(252,49,23)" fg:x="674" fg:w="51"/><text x="93.2155%" y="591.50">clone3</text></g><g><title>start_thread (51 samples, 7.03%)</title><rect x="92.9655%" y="565" width="7.0345%" height="15" fill="rgb(215,19,7)" fg:x="674" fg:w="51"/><text x="93.2155%" y="575.50">start_thr..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22 samples, 3.03%)</title><rect x="96.9655%" y="549" width="3.0345%" height="15" fill="rgb(238,81,41)" fg:x="703" fg:w="22"/><text x="97.2155%" y="559.50">std..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (17 samples, 2.34%)</title><rect x="97.6552%" y="533" width="2.3448%" height="15" fill="rgb(210,199,37)" fg:x="708" fg:w="17"/><text x="97.9052%" y="543.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (17 samples, 2.34%)</title><rect x="97.6552%" y="517" width="2.3448%" height="15" fill="rgb(244,192,49)" fg:x="708" fg:w="17"/><text x="97.9052%" y="527.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (9 samples, 1.24%)</title><rect x="98.7586%" y="501" width="1.2414%" height="15" fill="rgb(226,211,11)" fg:x="716" fg:w="9"/><text x="99.0086%" y="511.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (9 samples, 1.24%)</title><rect x="98.7586%" y="485" width="1.2414%" height="15" fill="rgb(236,162,54)" fg:x="716" fg:w="9"/><text x="99.0086%" y="495.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.14%)</title><rect x="99.8621%" y="469" width="0.1379%" height="15" fill="rgb(220,229,9)" fg:x="724" fg:w="1"/><text x="100.1121%" y="479.50"></text></g><g><title>__GI___sysconf (1 samples, 0.14%)</title><rect x="99.8621%" y="453" width="0.1379%" height="15" fill="rgb(250,87,22)" fg:x="724" fg:w="1"/><text x="100.1121%" y="463.50"></text></g><g><title>linux_sysconf (1 samples, 0.14%)</title><rect x="99.8621%" y="437" width="0.1379%" height="15" fill="rgb(239,43,17)" fg:x="724" fg:w="1"/><text x="100.1121%" y="447.50"></text></g><g><title>posix_sysconf (1 samples, 0.14%)</title><rect x="99.8621%" y="421" width="0.1379%" height="15" fill="rgb(231,177,25)" fg:x="724" fg:w="1"/><text x="100.1121%" y="431.50"></text></g></svg></svg>