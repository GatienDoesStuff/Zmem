<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="1018"><g><title>[unknown] (4 samples, 0.39%)</title><rect x="0.0000%" y="725" width="0.3929%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="735.50"></text></g><g><title>_int_realloc (1 samples, 0.10%)</title><rect x="0.2947%" y="709" width="0.0982%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.5447%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="0.2947%" y="693" width="0.0982%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.5447%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="0.2947%" y="677" width="0.0982%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.5447%" y="687.50"></text></g><g><title>__GI___call_tls_dtors (7 samples, 0.69%)</title><rect x="0.3929%" y="693" width="0.6876%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="7"/><text x="0.6429%" y="703.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="0.9823%" y="677" width="0.0982%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="1"/><text x="1.2323%" y="687.50"></text></g><g><title>__libc_thread_freeres (1 samples, 0.10%)</title><rect x="1.0806%" y="693" width="0.0982%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="1"/><text x="1.3306%" y="703.50"></text></g><g><title>__res_thread_freeres (1 samples, 0.10%)</title><rect x="1.0806%" y="677" width="0.0982%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="1"/><text x="1.3306%" y="687.50"></text></g><g><title>__malloc_arena_thread_freeres (5 samples, 0.49%)</title><rect x="1.1788%" y="693" width="0.4912%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="5"/><text x="1.4288%" y="703.50"></text></g><g><title>tcache_thread_shutdown (5 samples, 0.49%)</title><rect x="1.1788%" y="677" width="0.4912%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="5"/><text x="1.4288%" y="687.50"></text></g><g><title>__GI___libc_free (4 samples, 0.39%)</title><rect x="1.2770%" y="661" width="0.3929%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="4"/><text x="1.5270%" y="671.50"></text></g><g><title>_int_free (4 samples, 0.39%)</title><rect x="1.2770%" y="645" width="0.3929%" height="15" fill="rgb(240,193,28)" fg:x="13" fg:w="4"/><text x="1.5270%" y="655.50"></text></g><g><title>malloc_consolidate (1 samples, 0.10%)</title><rect x="1.5717%" y="629" width="0.0982%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="1"/><text x="1.8217%" y="639.50"></text></g><g><title>std::sys::unix::thread::guard::current (5 samples, 0.49%)</title><rect x="1.7682%" y="629" width="0.4912%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="5"/><text x="2.0182%" y="639.50"></text></g><g><title>__pthread_getattr_np (5 samples, 0.49%)</title><rect x="1.7682%" y="613" width="0.4912%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="5"/><text x="2.0182%" y="623.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.49%)</title><rect x="1.7682%" y="597" width="0.4912%" height="15" fill="rgb(231,73,38)" fg:x="18" fg:w="5"/><text x="2.0182%" y="607.50"></text></g><g><title>tcache_init (5 samples, 0.49%)</title><rect x="1.7682%" y="581" width="0.4912%" height="15" fill="rgb(225,20,46)" fg:x="18" fg:w="5"/><text x="2.0182%" y="591.50"></text></g><g><title>tcache_init (5 samples, 0.49%)</title><rect x="1.7682%" y="565" width="0.4912%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="5"/><text x="2.0182%" y="575.50"></text></g><g><title>arena_get2 (5 samples, 0.49%)</title><rect x="1.7682%" y="549" width="0.4912%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="5"/><text x="2.0182%" y="559.50"></text></g><g><title>arena_get2 (5 samples, 0.49%)</title><rect x="1.7682%" y="533" width="0.4912%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="5"/><text x="2.0182%" y="543.50"></text></g><g><title>_int_new_arena (3 samples, 0.29%)</title><rect x="1.9646%" y="517" width="0.2947%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="3"/><text x="2.2146%" y="527.50"></text></g><g><title>new_heap (2 samples, 0.20%)</title><rect x="2.0629%" y="501" width="0.1965%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="2"/><text x="2.3129%" y="511.50"></text></g><g><title>alloc_new_heap (2 samples, 0.20%)</title><rect x="2.0629%" y="485" width="0.1965%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="2"/><text x="2.3129%" y="495.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.20%)</title><rect x="2.0629%" y="469" width="0.1965%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="2"/><text x="2.3129%" y="479.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.10%)</title><rect x="2.1611%" y="453" width="0.0982%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="1"/><text x="2.4111%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.1611%" y="437" width="0.0982%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="1"/><text x="2.4111%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.1611%" y="421" width="0.0982%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="2.4111%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.1611%" y="405" width="0.0982%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="2.4111%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.1611%" y="389" width="0.0982%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="2.4111%" y="399.50"></text></g><g><title>__GI_sched_yield (2 samples, 0.20%)</title><rect x="2.5540%" y="581" width="0.1965%" height="15" fill="rgb(232,36,49)" fg:x="26" fg:w="2"/><text x="2.8040%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="2.5540%" y="565" width="0.1965%" height="15" fill="rgb(209,103,24)" fg:x="26" fg:w="2"/><text x="2.8040%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="2.5540%" y="549" width="0.1965%" height="15" fill="rgb(229,88,8)" fg:x="26" fg:w="2"/><text x="2.8040%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="2.5540%" y="533" width="0.1965%" height="15" fill="rgb(213,181,19)" fg:x="26" fg:w="2"/><text x="2.8040%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="2.5540%" y="517" width="0.1965%" height="15" fill="rgb(254,191,54)" fg:x="26" fg:w="2"/><text x="2.8040%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.6523%" y="501" width="0.0982%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="1"/><text x="2.9023%" y="511.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (1 samples, 0.10%)</title><rect x="2.7505%" y="581" width="0.0982%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="1"/><text x="3.0005%" y="591.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.69%)</title><rect x="2.2593%" y="597" width="0.6876%" height="15" fill="rgb(226,3,54)" fg:x="23" fg:w="7"/><text x="2.5093%" y="607.50"></text></g><g><title>std::thread::yield_now (1 samples, 0.10%)</title><rect x="2.8487%" y="581" width="0.0982%" height="15" fill="rgb(245,192,40)" fg:x="29" fg:w="1"/><text x="3.0987%" y="591.50"></text></g><g><title>std::sys::unix::thread::Thread::yield_now (1 samples, 0.10%)</title><rect x="2.8487%" y="565" width="0.0982%" height="15" fill="rgb(238,167,29)" fg:x="29" fg:w="1"/><text x="3.0987%" y="575.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (6 samples, 0.59%)</title><rect x="2.9470%" y="597" width="0.5894%" height="15" fill="rgb(232,182,51)" fg:x="30" fg:w="6"/><text x="3.1970%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.39%)</title><rect x="3.1434%" y="581" width="0.3929%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="4"/><text x="3.3934%" y="591.50"></text></g><g><title>__GI___clock_gettime (4 samples, 0.39%)</title><rect x="3.1434%" y="565" width="0.3929%" height="15" fill="rgb(208,69,12)" fg:x="32" fg:w="4"/><text x="3.3934%" y="575.50"></text></g><g><title>__vdso_clock_gettime (4 samples, 0.39%)</title><rect x="3.1434%" y="549" width="0.3929%" height="15" fill="rgb(235,93,37)" fg:x="32" fg:w="4"/><text x="3.3934%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="3.2417%" y="533" width="0.2947%" height="15" fill="rgb(213,116,39)" fg:x="33" fg:w="3"/><text x="3.4917%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="3.2417%" y="517" width="0.2947%" height="15" fill="rgb(222,207,29)" fg:x="33" fg:w="3"/><text x="3.4917%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="3.2417%" y="501" width="0.2947%" height="15" fill="rgb(206,96,30)" fg:x="33" fg:w="3"/><text x="3.4917%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="3.3399%" y="485" width="0.1965%" height="15" fill="rgb(218,138,4)" fg:x="34" fg:w="2"/><text x="3.5899%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="3.4381%" y="469" width="0.0982%" height="15" fill="rgb(250,191,14)" fg:x="35" fg:w="1"/><text x="3.6881%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="3.4381%" y="453" width="0.0982%" height="15" fill="rgb(239,60,40)" fg:x="35" fg:w="1"/><text x="3.6881%" y="463.50"></text></g><g><title>syscall (2 samples, 0.20%)</title><rect x="3.5363%" y="597" width="0.1965%" height="15" fill="rgb(206,27,48)" fg:x="36" fg:w="2"/><text x="3.7863%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="3.5363%" y="581" width="0.1965%" height="15" fill="rgb(225,35,8)" fg:x="36" fg:w="2"/><text x="3.7863%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="3.5363%" y="565" width="0.1965%" height="15" fill="rgb(250,213,24)" fg:x="36" fg:w="2"/><text x="3.7863%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="3.5363%" y="549" width="0.1965%" height="15" fill="rgb(247,123,22)" fg:x="36" fg:w="2"/><text x="3.7863%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="3.5363%" y="533" width="0.1965%" height="15" fill="rgb(231,138,38)" fg:x="36" fg:w="2"/><text x="3.7863%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="3.5363%" y="517" width="0.1965%" height="15" fill="rgb(231,145,46)" fg:x="36" fg:w="2"/><text x="3.7863%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Context&gt; (2 samples, 0.20%)</title><rect x="4.1257%" y="549" width="0.1965%" height="15" fill="rgb(251,118,11)" fg:x="42" fg:w="2"/><text x="4.3757%" y="559.50"></text></g><g><title>__GI___libc_free (2 samples, 0.20%)</title><rect x="4.1257%" y="533" width="0.1965%" height="15" fill="rgb(217,147,25)" fg:x="42" fg:w="2"/><text x="4.3757%" y="543.50"></text></g><g><title>_int_free (2 samples, 0.20%)</title><rect x="4.1257%" y="517" width="0.1965%" height="15" fill="rgb(247,81,37)" fg:x="42" fg:w="2"/><text x="4.3757%" y="527.50"></text></g><g><title>tcache_put (1 samples, 0.10%)</title><rect x="4.2240%" y="501" width="0.0982%" height="15" fill="rgb(209,12,38)" fg:x="43" fg:w="1"/><text x="4.4740%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.10%)</title><rect x="4.3222%" y="549" width="0.0982%" height="15" fill="rgb(227,1,9)" fg:x="44" fg:w="1"/><text x="4.5722%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="5.0098%" y="517" width="0.0982%" height="15" fill="rgb(248,47,43)" fg:x="51" fg:w="1"/><text x="5.2598%" y="527.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="5.5010%" y="485" width="0.0982%" height="15" fill="rgb(221,10,30)" fg:x="56" fg:w="1"/><text x="5.7510%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.29%)</title><rect x="5.4028%" y="501" width="0.2947%" height="15" fill="rgb(210,229,1)" fg:x="55" fg:w="3"/><text x="5.6528%" y="511.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (1 samples, 0.10%)</title><rect x="5.5992%" y="485" width="0.0982%" height="15" fill="rgb(222,148,37)" fg:x="57" fg:w="1"/><text x="5.8492%" y="495.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.39%)</title><rect x="5.7957%" y="485" width="0.3929%" height="15" fill="rgb(234,67,33)" fg:x="59" fg:w="4"/><text x="6.0457%" y="495.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.10%)</title><rect x="6.3851%" y="469" width="0.0982%" height="15" fill="rgb(247,98,35)" fg:x="65" fg:w="1"/><text x="6.6351%" y="479.50"></text></g><g><title>&lt;&amp;mio::event::events::Events as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.10%)</title><rect x="6.4833%" y="453" width="0.0982%" height="15" fill="rgb(247,138,52)" fg:x="66" fg:w="1"/><text x="6.7333%" y="463.50"></text></g><g><title>tokio::runtime::io::Driver::turn (3 samples, 0.29%)</title><rect x="6.4833%" y="469" width="0.2947%" height="15" fill="rgb(213,79,30)" fg:x="66" fg:w="3"/><text x="6.7333%" y="479.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 0.20%)</title><rect x="6.5815%" y="453" width="0.1965%" height="15" fill="rgb(246,177,23)" fg:x="67" fg:w="2"/><text x="6.8315%" y="463.50"></text></g><g><title>epoll_wait (2 samples, 0.20%)</title><rect x="6.5815%" y="437" width="0.1965%" height="15" fill="rgb(230,62,27)" fg:x="67" fg:w="2"/><text x="6.8315%" y="447.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="6.6798%" y="421" width="0.0982%" height="15" fill="rgb(216,154,8)" fg:x="68" fg:w="1"/><text x="6.9298%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (18 samples, 1.77%)</title><rect x="5.1081%" y="517" width="1.7682%" height="15" fill="rgb(244,35,45)" fg:x="52" fg:w="18"/><text x="5.3581%" y="527.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (12 samples, 1.18%)</title><rect x="5.6974%" y="501" width="1.1788%" height="15" fill="rgb(251,115,12)" fg:x="58" fg:w="12"/><text x="5.9474%" y="511.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (7 samples, 0.69%)</title><rect x="6.1886%" y="485" width="0.6876%" height="15" fill="rgb(240,54,50)" fg:x="63" fg:w="7"/><text x="6.4386%" y="495.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.10%)</title><rect x="6.7780%" y="469" width="0.0982%" height="15" fill="rgb(233,84,52)" fg:x="69" fg:w="1"/><text x="7.0280%" y="479.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.29%)</title><rect x="6.8762%" y="485" width="0.2947%" height="15" fill="rgb(207,117,47)" fg:x="70" fg:w="3"/><text x="7.1262%" y="495.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.49%)</title><rect x="6.8762%" y="501" width="0.4912%" height="15" fill="rgb(249,43,39)" fg:x="70" fg:w="5"/><text x="7.1262%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.20%)</title><rect x="7.1709%" y="485" width="0.1965%" height="15" fill="rgb(209,38,44)" fg:x="73" fg:w="2"/><text x="7.4209%" y="495.50"></text></g><g><title>__GI___clock_gettime (2 samples, 0.20%)</title><rect x="7.1709%" y="469" width="0.1965%" height="15" fill="rgb(236,212,23)" fg:x="73" fg:w="2"/><text x="7.4209%" y="479.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.20%)</title><rect x="7.1709%" y="453" width="0.1965%" height="15" fill="rgb(242,79,21)" fg:x="73" fg:w="2"/><text x="7.4209%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="7.1709%" y="437" width="0.1965%" height="15" fill="rgb(211,96,35)" fg:x="73" fg:w="2"/><text x="7.4209%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="7.1709%" y="421" width="0.1965%" height="15" fill="rgb(253,215,40)" fg:x="73" fg:w="2"/><text x="7.4209%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="7.1709%" y="405" width="0.1965%" height="15" fill="rgb(211,81,21)" fg:x="73" fg:w="2"/><text x="7.4209%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="7.2692%" y="389" width="0.0982%" height="15" fill="rgb(208,190,38)" fg:x="74" fg:w="1"/><text x="7.5192%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="7.2692%" y="373" width="0.0982%" height="15" fill="rgb(235,213,38)" fg:x="74" fg:w="1"/><text x="7.5192%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="7.2692%" y="357" width="0.0982%" height="15" fill="rgb(237,122,38)" fg:x="74" fg:w="1"/><text x="7.5192%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.10%)</title><rect x="7.3674%" y="501" width="0.0982%" height="15" fill="rgb(244,218,35)" fg:x="75" fg:w="1"/><text x="7.6174%" y="511.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (2 samples, 0.20%)</title><rect x="7.4656%" y="501" width="0.1965%" height="15" fill="rgb(240,68,47)" fg:x="76" fg:w="2"/><text x="7.7156%" y="511.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (3 samples, 0.29%)</title><rect x="8.0550%" y="453" width="0.2947%" height="15" fill="rgb(210,16,53)" fg:x="82" fg:w="3"/><text x="8.3050%" y="463.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.59%)</title><rect x="12.0825%" y="421" width="0.5894%" height="15" fill="rgb(235,124,12)" fg:x="123" fg:w="6"/><text x="12.3325%" y="431.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (3 samples, 0.29%)</title><rect x="13.4578%" y="405" width="0.2947%" height="15" fill="rgb(224,169,11)" fg:x="137" fg:w="3"/><text x="13.7078%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.10%)</title><rect x="13.6542%" y="389" width="0.0982%" height="15" fill="rgb(250,166,2)" fg:x="139" fg:w="1"/><text x="13.9042%" y="399.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (51 samples, 5.01%)</title><rect x="10.7073%" y="437" width="5.0098%" height="15" fill="rgb(242,216,29)" fg:x="109" fg:w="51"/><text x="10.9573%" y="447.50">&lt;core:..</text></g><g><title>core::slice::memchr::memchr_aligned (31 samples, 3.05%)</title><rect x="12.6719%" y="421" width="3.0452%" height="15" fill="rgb(230,116,27)" fg:x="129" fg:w="31"/><text x="12.9219%" y="431.50">cor..</text></g><g><title>core::slice::memchr::memchr_naive (20 samples, 1.96%)</title><rect x="13.7525%" y="405" width="1.9646%" height="15" fill="rgb(228,99,48)" fg:x="140" fg:w="20"/><text x="14.0025%" y="415.50">c..</text></g><g><title>core::str::converts::from_utf8 (107 samples, 10.51%)</title><rect x="15.7171%" y="389" width="10.5108%" height="15" fill="rgb(253,11,6)" fg:x="160" fg:w="107"/><text x="15.9671%" y="399.50">core::str::conv..</text></g><g><title>core::str::validations::run_utf8_validation (103 samples, 10.12%)</title><rect x="16.1100%" y="373" width="10.1179%" height="15" fill="rgb(247,143,39)" fg:x="164" fg:w="103"/><text x="16.3600%" y="383.50">core::str::vali..</text></g><g><title>[unknown] (269 samples, 26.42%)</title><rect x="27.7996%" y="277" width="26.4244%" height="15" fill="rgb(236,97,10)" fg:x="283" fg:w="269"/><text x="28.0496%" y="287.50">[unknown]</text></g><g><title>[unknown] (263 samples, 25.83%)</title><rect x="28.3890%" y="261" width="25.8350%" height="15" fill="rgb(233,208,19)" fg:x="289" fg:w="263"/><text x="28.6390%" y="271.50">[unknown]</text></g><g><title>[unknown] (252 samples, 24.75%)</title><rect x="29.4695%" y="245" width="24.7544%" height="15" fill="rgb(216,164,2)" fg:x="300" fg:w="252"/><text x="29.7195%" y="255.50">[unknown]</text></g><g><title>[unknown] (246 samples, 24.17%)</title><rect x="30.0589%" y="229" width="24.1650%" height="15" fill="rgb(220,129,5)" fg:x="306" fg:w="246"/><text x="30.3089%" y="239.50">[unknown]</text></g><g><title>[unknown] (225 samples, 22.10%)</title><rect x="32.1218%" y="213" width="22.1022%" height="15" fill="rgb(242,17,10)" fg:x="327" fg:w="225"/><text x="32.3718%" y="223.50">[unknown]</text></g><g><title>[unknown] (206 samples, 20.24%)</title><rect x="33.9882%" y="197" width="20.2358%" height="15" fill="rgb(242,107,0)" fg:x="346" fg:w="206"/><text x="34.2382%" y="207.50">[unknown]</text></g><g><title>[unknown] (190 samples, 18.66%)</title><rect x="35.5599%" y="181" width="18.6640%" height="15" fill="rgb(251,28,31)" fg:x="362" fg:w="190"/><text x="35.8099%" y="191.50">[unknown]</text></g><g><title>[unknown] (119 samples, 11.69%)</title><rect x="42.5344%" y="165" width="11.6896%" height="15" fill="rgb(233,223,10)" fg:x="433" fg:w="119"/><text x="42.7844%" y="175.50">[unknown]</text></g><g><title>[unknown] (55 samples, 5.40%)</title><rect x="48.8212%" y="149" width="5.4028%" height="15" fill="rgb(215,21,27)" fg:x="497" fg:w="55"/><text x="49.0712%" y="159.50">[unknow..</text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="53.9293%" y="133" width="0.2947%" height="15" fill="rgb(232,23,21)" fg:x="549" fg:w="3"/><text x="54.1793%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="54.1257%" y="117" width="0.0982%" height="15" fill="rgb(244,5,23)" fg:x="551" fg:w="1"/><text x="54.3757%" y="127.50"></text></g><g><title>__GI___pthread_disable_asynccancel (19 samples, 1.87%)</title><rect x="54.2240%" y="277" width="1.8664%" height="15" fill="rgb(226,81,46)" fg:x="552" fg:w="19"/><text x="54.4740%" y="287.50">_..</text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="55.8939%" y="261" width="0.1965%" height="15" fill="rgb(247,70,30)" fg:x="569" fg:w="2"/><text x="56.1439%" y="271.50"></text></g><g><title>__GI___libc_read (309 samples, 30.35%)</title><rect x="26.6208%" y="309" width="30.3536%" height="15" fill="rgb(212,68,19)" fg:x="271" fg:w="309"/><text x="26.8708%" y="319.50">__GI___libc_read</text></g><g><title>__GI___libc_read (304 samples, 29.86%)</title><rect x="27.1120%" y="293" width="29.8625%" height="15" fill="rgb(240,187,13)" fg:x="276" fg:w="304"/><text x="27.3620%" y="303.50">__GI___libc_read</text></g><g><title>__GI___pthread_enable_asynccancel (9 samples, 0.88%)</title><rect x="56.0904%" y="277" width="0.8841%" height="15" fill="rgb(223,113,26)" fg:x="571" fg:w="9"/><text x="56.3404%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="56.6798%" y="261" width="0.2947%" height="15" fill="rgb(206,192,2)" fg:x="577" fg:w="3"/><text x="56.9298%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="56.7780%" y="245" width="0.1965%" height="15" fill="rgb(241,108,4)" fg:x="578" fg:w="2"/><text x="57.0280%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="56.7780%" y="229" width="0.1965%" height="15" fill="rgb(247,173,49)" fg:x="578" fg:w="2"/><text x="57.0280%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="56.8762%" y="213" width="0.0982%" height="15" fill="rgb(224,114,35)" fg:x="579" fg:w="1"/><text x="57.1262%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="56.8762%" y="197" width="0.0982%" height="15" fill="rgb(245,159,27)" fg:x="579" fg:w="1"/><text x="57.1262%" y="207.50"></text></g><g><title>std::io::readbuf::BorrowedCursor::advance (3 samples, 0.29%)</title><rect x="56.9745%" y="309" width="0.2947%" height="15" fill="rgb(245,172,44)" fg:x="580" fg:w="3"/><text x="57.2245%" y="319.50"></text></g><g><title>core::cmp::max (3 samples, 0.29%)</title><rect x="56.9745%" y="293" width="0.2947%" height="15" fill="rgb(236,23,11)" fg:x="580" fg:w="3"/><text x="57.2245%" y="303.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.29%)</title><rect x="56.9745%" y="277" width="0.2947%" height="15" fill="rgb(205,117,38)" fg:x="580" fg:w="3"/><text x="57.2245%" y="287.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.29%)</title><rect x="56.9745%" y="261" width="0.2947%" height="15" fill="rgb(237,72,25)" fg:x="580" fg:w="3"/><text x="57.2245%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (315 samples, 30.94%)</title><rect x="26.6208%" y="357" width="30.9430%" height="15" fill="rgb(244,70,9)" fg:x="271" fg:w="315"/><text x="26.8708%" y="367.50">&lt;std::fs::File as std::io::Read&gt;::read_buf</text></g><g><title>std::sys::unix::fs::File::read_buf (315 samples, 30.94%)</title><rect x="26.6208%" y="341" width="30.9430%" height="15" fill="rgb(217,125,39)" fg:x="271" fg:w="315"/><text x="26.8708%" y="351.50">std::sys::unix::fs::File::read_buf</text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (315 samples, 30.94%)</title><rect x="26.6208%" y="325" width="30.9430%" height="15" fill="rgb(235,36,10)" fg:x="271" fg:w="315"/><text x="26.8708%" y="335.50">std::sys::unix::fd::FileDesc::read_buf</text></g><g><title>std::sys::unix::cvt (3 samples, 0.29%)</title><rect x="57.2692%" y="309" width="0.2947%" height="15" fill="rgb(251,123,47)" fg:x="583" fg:w="3"/><text x="57.5192%" y="319.50"></text></g><g><title>__GI___libc_read (2 samples, 0.20%)</title><rect x="57.5639%" y="325" width="0.1965%" height="15" fill="rgb(221,13,13)" fg:x="586" fg:w="2"/><text x="57.8139%" y="335.50"></text></g><g><title>__GI___libc_read (2 samples, 0.20%)</title><rect x="57.5639%" y="309" width="0.1965%" height="15" fill="rgb(238,131,9)" fg:x="586" fg:w="2"/><text x="57.8139%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="57.5639%" y="293" width="0.1965%" height="15" fill="rgb(211,50,8)" fg:x="586" fg:w="2"/><text x="57.8139%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.29%)</title><rect x="57.7603%" y="293" width="0.2947%" height="15" fill="rgb(245,182,24)" fg:x="588" fg:w="3"/><text x="58.0103%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="58.8409%" y="213" width="0.0982%" height="15" fill="rgb(242,14,37)" fg:x="599" fg:w="1"/><text x="59.0909%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.39%)</title><rect x="59.8232%" y="197" width="0.3929%" height="15" fill="rgb(246,228,12)" fg:x="609" fg:w="4"/><text x="60.0732%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.39%)</title><rect x="59.8232%" y="181" width="0.3929%" height="15" fill="rgb(213,55,15)" fg:x="609" fg:w="4"/><text x="60.0732%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.39%)</title><rect x="59.8232%" y="165" width="0.3929%" height="15" fill="rgb(209,9,3)" fg:x="609" fg:w="4"/><text x="60.0732%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.39%)</title><rect x="59.8232%" y="149" width="0.3929%" height="15" fill="rgb(230,59,30)" fg:x="609" fg:w="4"/><text x="60.0732%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="59.9214%" y="133" width="0.2947%" height="15" fill="rgb(209,121,21)" fg:x="610" fg:w="3"/><text x="60.1714%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="60.1179%" y="117" width="0.0982%" height="15" fill="rgb(220,109,13)" fg:x="612" fg:w="1"/><text x="60.3679%" y="127.50"></text></g><g><title>__memcpy_avx_unaligned (2 samples, 0.20%)</title><rect x="60.2161%" y="197" width="0.1965%" height="15" fill="rgb(232,18,1)" fg:x="613" fg:w="2"/><text x="60.4661%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (125 samples, 12.28%)</title><rect x="60.4126%" y="197" width="12.2790%" height="15" fill="rgb(215,41,42)" fg:x="615" fg:w="125"/><text x="60.6626%" y="207.50">__memcpy_avx_unali..</text></g><g><title>[unknown] (25 samples, 2.46%)</title><rect x="70.2358%" y="181" width="2.4558%" height="15" fill="rgb(224,123,36)" fg:x="715" fg:w="25"/><text x="70.4858%" y="191.50">[u..</text></g><g><title>[unknown] (16 samples, 1.57%)</title><rect x="71.1198%" y="165" width="1.5717%" height="15" fill="rgb(240,125,3)" fg:x="724" fg:w="16"/><text x="71.3698%" y="175.50"></text></g><g><title>[unknown] (11 samples, 1.08%)</title><rect x="71.6110%" y="149" width="1.0806%" height="15" fill="rgb(205,98,50)" fg:x="729" fg:w="11"/><text x="71.8610%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.88%)</title><rect x="71.8075%" y="133" width="0.8841%" height="15" fill="rgb(205,185,37)" fg:x="731" fg:w="9"/><text x="72.0575%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="72.3969%" y="117" width="0.2947%" height="15" fill="rgb(238,207,15)" fg:x="737" fg:w="3"/><text x="72.6469%" y="127.50"></text></g><g><title>_int_free (5 samples, 0.49%)</title><rect x="72.6916%" y="197" width="0.4912%" height="15" fill="rgb(213,199,42)" fg:x="740" fg:w="5"/><text x="72.9416%" y="207.50"></text></g><g><title>heap_trim (1 samples, 0.10%)</title><rect x="73.0845%" y="181" width="0.0982%" height="15" fill="rgb(235,201,11)" fg:x="744" fg:w="1"/><text x="73.3345%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="73.4774%" y="181" width="0.0982%" height="15" fill="rgb(207,46,11)" fg:x="748" fg:w="1"/><text x="73.7274%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="73.4774%" y="165" width="0.0982%" height="15" fill="rgb(241,35,35)" fg:x="748" fg:w="1"/><text x="73.7274%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.39%)</title><rect x="74.0668%" y="165" width="0.3929%" height="15" fill="rgb(243,32,47)" fg:x="754" fg:w="4"/><text x="74.3168%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="74.3615%" y="149" width="0.0982%" height="15" fill="rgb(247,202,23)" fg:x="757" fg:w="1"/><text x="74.6115%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="74.3615%" y="133" width="0.0982%" height="15" fill="rgb(219,102,11)" fg:x="757" fg:w="1"/><text x="74.6115%" y="143.50"></text></g><g><title>grow_heap (9 samples, 0.88%)</title><rect x="74.4597%" y="165" width="0.8841%" height="15" fill="rgb(243,110,44)" fg:x="758" fg:w="9"/><text x="74.7097%" y="175.50"></text></g><g><title>__GI_mprotect (8 samples, 0.79%)</title><rect x="74.5580%" y="149" width="0.7859%" height="15" fill="rgb(222,74,54)" fg:x="759" fg:w="8"/><text x="74.8080%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.79%)</title><rect x="74.5580%" y="133" width="0.7859%" height="15" fill="rgb(216,99,12)" fg:x="759" fg:w="8"/><text x="74.8080%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="75.1473%" y="117" width="0.1965%" height="15" fill="rgb(226,22,26)" fg:x="765" fg:w="2"/><text x="75.3973%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.2456%" y="101" width="0.0982%" height="15" fill="rgb(217,163,10)" fg:x="766" fg:w="1"/><text x="75.4956%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.2456%" y="85" width="0.0982%" height="15" fill="rgb(213,25,53)" fg:x="766" fg:w="1"/><text x="75.4956%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.2456%" y="69" width="0.0982%" height="15" fill="rgb(252,105,26)" fg:x="766" fg:w="1"/><text x="75.4956%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.2456%" y="53" width="0.0982%" height="15" fill="rgb(220,39,43)" fg:x="766" fg:w="1"/><text x="75.4956%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.2456%" y="37" width="0.0982%" height="15" fill="rgb(229,68,48)" fg:x="766" fg:w="1"/><text x="75.4956%" y="47.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.4420%" y="149" width="0.0982%" height="15" fill="rgb(252,8,32)" fg:x="768" fg:w="1"/><text x="75.6920%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.4420%" y="133" width="0.0982%" height="15" fill="rgb(223,20,43)" fg:x="768" fg:w="1"/><text x="75.6920%" y="143.50"></text></g><g><title>_int_realloc (174 samples, 17.09%)</title><rect x="58.9391%" y="213" width="17.0923%" height="15" fill="rgb(229,81,49)" fg:x="600" fg:w="174"/><text x="59.1891%" y="223.50">_int_realloc</text></g><g><title>_int_malloc (29 samples, 2.85%)</title><rect x="73.1827%" y="197" width="2.8487%" height="15" fill="rgb(236,28,36)" fg:x="745" fg:w="29"/><text x="73.4327%" y="207.50">_i..</text></g><g><title>sysmalloc (25 samples, 2.46%)</title><rect x="73.5756%" y="181" width="2.4558%" height="15" fill="rgb(249,185,26)" fg:x="749" fg:w="25"/><text x="73.8256%" y="191.50">sy..</text></g><g><title>sysmalloc_mmap (7 samples, 0.69%)</title><rect x="75.3438%" y="165" width="0.6876%" height="15" fill="rgb(249,174,33)" fg:x="767" fg:w="7"/><text x="75.5938%" y="175.50"></text></g><g><title>__GI___mmap64 (5 samples, 0.49%)</title><rect x="75.5403%" y="149" width="0.4912%" height="15" fill="rgb(233,201,37)" fg:x="769" fg:w="5"/><text x="75.7903%" y="159.50"></text></g><g><title>__GI___mmap64 (5 samples, 0.49%)</title><rect x="75.5403%" y="133" width="0.4912%" height="15" fill="rgb(221,78,26)" fg:x="769" fg:w="5"/><text x="75.7903%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.49%)</title><rect x="75.5403%" y="117" width="0.4912%" height="15" fill="rgb(250,127,30)" fg:x="769" fg:w="5"/><text x="75.7903%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.39%)</title><rect x="75.6385%" y="101" width="0.3929%" height="15" fill="rgb(230,49,44)" fg:x="770" fg:w="4"/><text x="75.8885%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.9332%" y="85" width="0.0982%" height="15" fill="rgb(229,67,23)" fg:x="773" fg:w="1"/><text x="76.1832%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.9332%" y="69" width="0.0982%" height="15" fill="rgb(249,83,47)" fg:x="773" fg:w="1"/><text x="76.1832%" y="79.50"></text></g><g><title>arena_for_chunk (5 samples, 0.49%)</title><rect x="76.0314%" y="213" width="0.4912%" height="15" fill="rgb(215,43,3)" fg:x="774" fg:w="5"/><text x="76.2814%" y="223.50"></text></g><g><title>arena_for_chunk (5 samples, 0.49%)</title><rect x="76.0314%" y="197" width="0.4912%" height="15" fill="rgb(238,154,13)" fg:x="774" fg:w="5"/><text x="76.2814%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="76.3261%" y="181" width="0.1965%" height="15" fill="rgb(219,56,2)" fg:x="777" fg:w="2"/><text x="76.5761%" y="191.50"></text></g><g><title>mremap_chunk (3 samples, 0.29%)</title><rect x="76.5226%" y="213" width="0.2947%" height="15" fill="rgb(233,0,4)" fg:x="779" fg:w="3"/><text x="76.7726%" y="223.50"></text></g><g><title>__GI___mremap (1 samples, 0.10%)</title><rect x="76.7191%" y="197" width="0.0982%" height="15" fill="rgb(235,30,7)" fg:x="781" fg:w="1"/><text x="76.9691%" y="207.50"></text></g><g><title>__GI___libc_realloc (199 samples, 19.55%)</title><rect x="58.1532%" y="229" width="19.5481%" height="15" fill="rgb(250,79,13)" fg:x="592" fg:w="199"/><text x="58.4032%" y="239.50">__GI___libc_realloc</text></g><g><title>musable (9 samples, 0.88%)</title><rect x="76.8173%" y="213" width="0.8841%" height="15" fill="rgb(211,146,34)" fg:x="782" fg:w="9"/><text x="77.0673%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="78.1925%" y="213" width="0.1965%" height="15" fill="rgb(228,22,38)" fg:x="796" fg:w="2"/><text x="78.4425%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (207 samples, 20.33%)</title><rect x="58.1532%" y="277" width="20.3340%" height="15" fill="rgb(235,168,5)" fg:x="592" fg:w="207"/><text x="58.4032%" y="287.50">&lt;alloc::alloc::Global as core::a..</text></g><g><title>alloc::alloc::Global::grow_impl (207 samples, 20.33%)</title><rect x="58.1532%" y="261" width="20.3340%" height="15" fill="rgb(221,155,16)" fg:x="592" fg:w="207"/><text x="58.4032%" y="271.50">alloc::alloc::Global::grow_impl</text></g><g><title>alloc::alloc::realloc (207 samples, 20.33%)</title><rect x="58.1532%" y="245" width="20.3340%" height="15" fill="rgb(215,215,53)" fg:x="592" fg:w="207"/><text x="58.4032%" y="255.50">alloc::alloc::realloc</text></g><g><title>__rdl_realloc (8 samples, 0.79%)</title><rect x="77.7014%" y="229" width="0.7859%" height="15" fill="rgb(223,4,10)" fg:x="791" fg:w="8"/><text x="77.9514%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.10%)</title><rect x="78.3890%" y="213" width="0.0982%" height="15" fill="rgb(234,103,6)" fg:x="798" fg:w="1"/><text x="78.6390%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (214 samples, 21.02%)</title><rect x="57.5639%" y="357" width="21.0216%" height="15" fill="rgb(227,97,0)" fg:x="586" fg:w="214"/><text x="57.8139%" y="367.50">alloc::vec::Vec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (214 samples, 21.02%)</title><rect x="57.5639%" y="341" width="21.0216%" height="15" fill="rgb(234,150,53)" fg:x="586" fg:w="214"/><text x="57.8139%" y="351.50">alloc::raw_vec::RawVec&lt;T,A&gt;::rese..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 samples, 20.83%)</title><rect x="57.7603%" y="325" width="20.8251%" height="15" fill="rgb(228,201,54)" fg:x="588" fg:w="212"/><text x="58.0103%" y="335.50">alloc::raw_vec::RawVec&lt;T,A&gt;::rese..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (212 samples, 20.83%)</title><rect x="57.7603%" y="309" width="20.8251%" height="15" fill="rgb(222,22,37)" fg:x="588" fg:w="212"/><text x="58.0103%" y="319.50">alloc::raw_vec::RawVec&lt;T,A&gt;::grow..</text></g><g><title>alloc::raw_vec::finish_grow (209 samples, 20.53%)</title><rect x="58.0550%" y="293" width="20.5305%" height="15" fill="rgb(237,53,32)" fg:x="591" fg:w="209"/><text x="58.3050%" y="303.50">alloc::raw_vec::finish_grow</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.10%)</title><rect x="78.4872%" y="277" width="0.0982%" height="15" fill="rgb(233,25,53)" fg:x="799" fg:w="1"/><text x="78.7372%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (641 samples, 62.97%)</title><rect x="15.7171%" y="437" width="62.9666%" height="15" fill="rgb(210,40,34)" fg:x="160" fg:w="641"/><text x="15.9671%" y="447.50">&lt;std::fs::File as std::io::Read&gt;::read_to_string</text></g><g><title>std::io::default_read_to_string (641 samples, 62.97%)</title><rect x="15.7171%" y="421" width="62.9666%" height="15" fill="rgb(241,220,44)" fg:x="160" fg:w="641"/><text x="15.9671%" y="431.50">std::io::default_read_to_string</text></g><g><title>std::io::append_to_string (641 samples, 62.97%)</title><rect x="15.7171%" y="405" width="62.9666%" height="15" fill="rgb(235,28,35)" fg:x="160" fg:w="641"/><text x="15.9671%" y="415.50">std::io::append_to_string</text></g><g><title>std::io::default_read_to_string::{{closure}} (534 samples, 52.46%)</title><rect x="26.2279%" y="389" width="52.4558%" height="15" fill="rgb(210,56,17)" fg:x="267" fg:w="534"/><text x="26.4779%" y="399.50">std::io::default_read_to_string::{{closure}}</text></g><g><title>std::io::default_read_to_end (534 samples, 52.46%)</title><rect x="26.2279%" y="373" width="52.4558%" height="15" fill="rgb(224,130,29)" fg:x="267" fg:w="534"/><text x="26.4779%" y="383.50">std::io::default_read_to_end</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.10%)</title><rect x="78.5855%" y="357" width="0.0982%" height="15" fill="rgb(235,212,8)" fg:x="800" fg:w="1"/><text x="78.8355%" y="367.50"></text></g><g><title>__GI___close (1 samples, 0.10%)</title><rect x="78.6837%" y="437" width="0.0982%" height="15" fill="rgb(223,33,50)" fg:x="801" fg:w="1"/><text x="78.9337%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="78.6837%" y="421" width="0.0982%" height="15" fill="rgb(219,149,13)" fg:x="801" fg:w="1"/><text x="78.9337%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="78.6837%" y="405" width="0.0982%" height="15" fill="rgb(250,156,29)" fg:x="801" fg:w="1"/><text x="78.9337%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="78.6837%" y="389" width="0.0982%" height="15" fill="rgb(216,193,19)" fg:x="801" fg:w="1"/><text x="78.9337%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="78.6837%" y="373" width="0.0982%" height="15" fill="rgb(216,135,14)" fg:x="801" fg:w="1"/><text x="78.9337%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="78.6837%" y="357" width="0.0982%" height="15" fill="rgb(241,47,5)" fg:x="801" fg:w="1"/><text x="78.9337%" y="367.50"></text></g><g><title>__GI___libc_free (2 samples, 0.20%)</title><rect x="78.7819%" y="437" width="0.1965%" height="15" fill="rgb(233,42,35)" fg:x="802" fg:w="2"/><text x="79.0319%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="78.8802%" y="421" width="0.0982%" height="15" fill="rgb(231,13,6)" fg:x="803" fg:w="1"/><text x="79.1302%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="78.8802%" y="405" width="0.0982%" height="15" fill="rgb(207,181,40)" fg:x="803" fg:w="1"/><text x="79.1302%" y="415.50"></text></g><g><title>__memcmp_avx2_movbe (41 samples, 4.03%)</title><rect x="78.9784%" y="437" width="4.0275%" height="15" fill="rgb(254,173,49)" fg:x="804" fg:w="41"/><text x="79.2284%" y="447.50">__me..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34 samples, 3.34%)</title><rect x="83.0059%" y="437" width="3.3399%" height="15" fill="rgb(221,1,38)" fg:x="845" fg:w="34"/><text x="83.2559%" y="447.50">cor..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (3 samples, 0.29%)</title><rect x="86.3458%" y="437" width="0.2947%" height="15" fill="rgb(206,124,46)" fg:x="879" fg:w="3"/><text x="86.5958%" y="447.50"></text></g><g><title>core::num::from_str_radix (3 samples, 0.29%)</title><rect x="86.3458%" y="421" width="0.2947%" height="15" fill="rgb(249,21,11)" fg:x="879" fg:w="3"/><text x="86.5958%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="86.5422%" y="405" width="0.0982%" height="15" fill="rgb(222,201,40)" fg:x="881" fg:w="1"/><text x="86.7922%" y="415.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.10%)</title><rect x="86.6405%" y="421" width="0.0982%" height="15" fill="rgb(235,61,29)" fg:x="882" fg:w="1"/><text x="86.8905%" y="431.50"></text></g><g><title>std::fs::buffer_capacity_required (1 samples, 0.10%)</title><rect x="86.6405%" y="405" width="0.0982%" height="15" fill="rgb(219,207,3)" fg:x="882" fg:w="1"/><text x="86.8905%" y="415.50"></text></g><g><title>std::fs::File::metadata (1 samples, 0.10%)</title><rect x="86.6405%" y="389" width="0.0982%" height="15" fill="rgb(222,56,46)" fg:x="882" fg:w="1"/><text x="86.8905%" y="399.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="86.7387%" y="421" width="0.0982%" height="15" fill="rgb(239,76,54)" fg:x="883" fg:w="1"/><text x="86.9887%" y="431.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.10%)</title><rect x="86.8369%" y="405" width="0.0982%" height="15" fill="rgb(231,124,27)" fg:x="884" fg:w="1"/><text x="87.0869%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.10%)</title><rect x="86.8369%" y="389" width="0.0982%" height="15" fill="rgb(249,195,6)" fg:x="884" fg:w="1"/><text x="87.0869%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="86.8369%" y="373" width="0.0982%" height="15" fill="rgb(237,174,47)" fg:x="884" fg:w="1"/><text x="87.0869%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="86.8369%" y="357" width="0.0982%" height="15" fill="rgb(206,201,31)" fg:x="884" fg:w="1"/><text x="87.0869%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="86.8369%" y="341" width="0.0982%" height="15" fill="rgb(231,57,52)" fg:x="884" fg:w="1"/><text x="87.0869%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="86.8369%" y="325" width="0.0982%" height="15" fill="rgb(248,177,22)" fg:x="884" fg:w="1"/><text x="87.0869%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="86.8369%" y="309" width="0.0982%" height="15" fill="rgb(215,211,37)" fg:x="884" fg:w="1"/><text x="87.0869%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="86.8369%" y="293" width="0.0982%" height="15" fill="rgb(241,128,51)" fg:x="884" fg:w="1"/><text x="87.0869%" y="303.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="86.8369%" y="277" width="0.0982%" height="15" fill="rgb(227,165,31)" fg:x="884" fg:w="1"/><text x="87.0869%" y="287.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.10%)</title><rect x="86.9352%" y="405" width="0.0982%" height="15" fill="rgb(228,167,24)" fg:x="885" fg:w="1"/><text x="87.1852%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.10%)</title><rect x="86.9352%" y="389" width="0.0982%" height="15" fill="rgb(228,143,12)" fg:x="885" fg:w="1"/><text x="87.1852%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.10%)</title><rect x="86.9352%" y="373" width="0.0982%" height="15" fill="rgb(249,149,8)" fg:x="885" fg:w="1"/><text x="87.1852%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.10%)</title><rect x="86.9352%" y="357" width="0.0982%" height="15" fill="rgb(243,35,44)" fg:x="885" fg:w="1"/><text x="87.1852%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.10%)</title><rect x="86.9352%" y="341" width="0.0982%" height="15" fill="rgb(246,89,9)" fg:x="885" fg:w="1"/><text x="87.1852%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="86.9352%" y="325" width="0.0982%" height="15" fill="rgb(233,213,13)" fg:x="885" fg:w="1"/><text x="87.1852%" y="335.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.10%)</title><rect x="86.9352%" y="309" width="0.0982%" height="15" fill="rgb(233,141,41)" fg:x="885" fg:w="1"/><text x="87.1852%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.10%)</title><rect x="86.9352%" y="293" width="0.0982%" height="15" fill="rgb(239,167,4)" fg:x="885" fg:w="1"/><text x="87.1852%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.10%)</title><rect x="86.9352%" y="277" width="0.0982%" height="15" fill="rgb(209,217,16)" fg:x="885" fg:w="1"/><text x="87.1852%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.29%)</title><rect x="86.8369%" y="421" width="0.2947%" height="15" fill="rgb(219,88,35)" fg:x="884" fg:w="3"/><text x="87.0869%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.10%)</title><rect x="87.0334%" y="405" width="0.0982%" height="15" fill="rgb(220,193,23)" fg:x="886" fg:w="1"/><text x="87.2834%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="87.0334%" y="389" width="0.0982%" height="15" fill="rgb(230,90,52)" fg:x="886" fg:w="1"/><text x="87.2834%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="87.0334%" y="373" width="0.0982%" height="15" fill="rgb(252,106,19)" fg:x="886" fg:w="1"/><text x="87.2834%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="87.0334%" y="357" width="0.0982%" height="15" fill="rgb(206,74,20)" fg:x="886" fg:w="1"/><text x="87.2834%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.10%)</title><rect x="87.0334%" y="341" width="0.0982%" height="15" fill="rgb(230,138,44)" fg:x="886" fg:w="1"/><text x="87.2834%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.10%)</title><rect x="87.0334%" y="325" width="0.0982%" height="15" fill="rgb(235,182,43)" fg:x="886" fg:w="1"/><text x="87.2834%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.10%)</title><rect x="87.0334%" y="309" width="0.0982%" height="15" fill="rgb(242,16,51)" fg:x="886" fg:w="1"/><text x="87.2834%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.10%)</title><rect x="87.0334%" y="293" width="0.0982%" height="15" fill="rgb(248,9,4)" fg:x="886" fg:w="1"/><text x="87.2834%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="87.1316%" y="421" width="0.0982%" height="15" fill="rgb(210,31,22)" fg:x="887" fg:w="1"/><text x="87.3816%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="87.1316%" y="405" width="0.0982%" height="15" fill="rgb(239,54,39)" fg:x="887" fg:w="1"/><text x="87.3816%" y="415.50"></text></g><g><title>__rdl_realloc (1 samples, 0.10%)</title><rect x="87.1316%" y="389" width="0.0982%" height="15" fill="rgb(230,99,41)" fg:x="887" fg:w="1"/><text x="87.3816%" y="399.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (810 samples, 79.57%)</title><rect x="7.7603%" y="485" width="79.5678%" height="15" fill="rgb(253,106,12)" fg:x="79" fg:w="810"/><text x="8.0103%" y="495.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (808 samples, 79.37%)</title><rect x="7.9568%" y="469" width="79.3713%" height="15" fill="rgb(213,46,41)" fg:x="81" fg:w="808"/><text x="8.2068%" y="479.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>zmem::memory::Process::new (804 samples, 78.98%)</title><rect x="8.3497%" y="453" width="78.9784%" height="15" fill="rgb(215,133,35)" fg:x="85" fg:w="804"/><text x="8.5997%" y="463.50">zmem::memory::Process::new</text></g><g><title>zmem::memory::Process::get_cmd (7 samples, 0.69%)</title><rect x="86.6405%" y="437" width="0.6876%" height="15" fill="rgb(213,28,5)" fg:x="882" fg:w="7"/><text x="86.8905%" y="447.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.10%)</title><rect x="87.2299%" y="421" width="0.0982%" height="15" fill="rgb(215,77,49)" fg:x="888" fg:w="1"/><text x="87.4799%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.10%)</title><rect x="87.2299%" y="405" width="0.0982%" height="15" fill="rgb(248,100,22)" fg:x="888" fg:w="1"/><text x="87.4799%" y="415.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.10%)</title><rect x="87.2299%" y="389" width="0.0982%" height="15" fill="rgb(208,67,9)" fg:x="888" fg:w="1"/><text x="87.4799%" y="399.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.10%)</title><rect x="87.2299%" y="373" width="0.0982%" height="15" fill="rgb(219,133,21)" fg:x="888" fg:w="1"/><text x="87.4799%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.10%)</title><rect x="87.2299%" y="357" width="0.0982%" height="15" fill="rgb(246,46,29)" fg:x="888" fg:w="1"/><text x="87.4799%" y="367.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.10%)</title><rect x="87.2299%" y="341" width="0.0982%" height="15" fill="rgb(246,185,52)" fg:x="888" fg:w="1"/><text x="87.4799%" y="351.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.10%)</title><rect x="87.2299%" y="325" width="0.0982%" height="15" fill="rgb(252,136,11)" fg:x="888" fg:w="1"/><text x="87.4799%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.10%)</title><rect x="87.2299%" y="309" width="0.0982%" height="15" fill="rgb(219,138,53)" fg:x="888" fg:w="1"/><text x="87.4799%" y="319.50"></text></g><g><title>__libc_open64 (1 samples, 0.10%)</title><rect x="87.2299%" y="293" width="0.0982%" height="15" fill="rgb(211,51,23)" fg:x="888" fg:w="1"/><text x="87.4799%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::gen_u32 (1 samples, 0.10%)</title><rect x="87.6228%" y="405" width="0.0982%" height="15" fill="rgb(247,221,28)" fg:x="892" fg:w="1"/><text x="87.8728%" y="415.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="87.7210%" y="405" width="0.0982%" height="15" fill="rgb(251,222,45)" fg:x="893" fg:w="1"/><text x="87.9710%" y="415.50"></text></g><g><title>futures_task::waker::wake_by_ref_arc_raw (6 samples, 0.59%)</title><rect x="87.4263%" y="469" width="0.5894%" height="15" fill="rgb(217,162,53)" fg:x="890" fg:w="6"/><text x="87.6763%" y="479.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (6 samples, 0.59%)</title><rect x="87.4263%" y="453" width="0.5894%" height="15" fill="rgb(229,93,14)" fg:x="890" fg:w="6"/><text x="87.6763%" y="463.50"></text></g><g><title>tokio::runtime::park::wake (5 samples, 0.49%)</title><rect x="87.5246%" y="437" width="0.4912%" height="15" fill="rgb(209,67,49)" fg:x="891" fg:w="5"/><text x="87.7746%" y="447.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.49%)</title><rect x="87.5246%" y="421" width="0.4912%" height="15" fill="rgb(213,87,29)" fg:x="891" fg:w="5"/><text x="87.7746%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.20%)</title><rect x="87.8193%" y="405" width="0.1965%" height="15" fill="rgb(205,151,52)" fg:x="894" fg:w="2"/><text x="88.0693%" y="415.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.10%)</title><rect x="87.9175%" y="389" width="0.0982%" height="15" fill="rgb(253,215,39)" fg:x="895" fg:w="1"/><text x="88.1675%" y="399.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (1 samples, 0.10%)</title><rect x="88.0157%" y="469" width="0.0982%" height="15" fill="rgb(221,220,41)" fg:x="896" fg:w="1"/><text x="88.2657%" y="479.50"></text></g><g><title>tokio-runtime-w (898 samples, 88.21%)</title><rect x="0.0000%" y="741" width="88.2122%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="898"/><text x="0.2500%" y="751.50">tokio-runtime-w</text></g><g><title>clone3 (894 samples, 87.82%)</title><rect x="0.3929%" y="725" width="87.8193%" height="15" fill="rgb(221,193,43)" fg:x="4" fg:w="894"/><text x="0.6429%" y="735.50">clone3</text></g><g><title>start_thread (894 samples, 87.82%)</title><rect x="0.3929%" y="709" width="87.8193%" height="15" fill="rgb(240,128,52)" fg:x="4" fg:w="894"/><text x="0.6429%" y="719.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (881 samples, 86.54%)</title><rect x="1.6699%" y="693" width="86.5422%" height="15" fill="rgb(253,114,12)" fg:x="17" fg:w="881"/><text x="1.9199%" y="703.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (881 samples, 86.54%)</title><rect x="1.6699%" y="677" width="86.5422%" height="15" fill="rgb(215,223,47)" fg:x="17" fg:w="881"/><text x="1.9199%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (881 samples, 86.54%)</title><rect x="1.6699%" y="661" width="86.5422%" height="15" fill="rgb(248,225,23)" fg:x="17" fg:w="881"/><text x="1.9199%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (881 samples, 86.54%)</title><rect x="1.6699%" y="645" width="86.5422%" height="15" fill="rgb(250,108,0)" fg:x="17" fg:w="881"/><text x="1.9199%" y="655.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (875 samples, 85.95%)</title><rect x="2.2593%" y="629" width="85.9528%" height="15" fill="rgb(228,208,7)" fg:x="23" fg:w="875"/><text x="2.5093%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (875 samples, 85.95%)</title><rect x="2.2593%" y="613" width="85.9528%" height="15" fill="rgb(244,45,10)" fg:x="23" fg:w="875"/><text x="2.5093%" y="623.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (860 samples, 84.48%)</title><rect x="3.7328%" y="597" width="84.4794%" height="15" fill="rgb(207,125,25)" fg:x="38" fg:w="860"/><text x="3.9828%" y="607.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (859 samples, 84.38%)</title><rect x="3.8310%" y="581" width="84.3811%" height="15" fill="rgb(210,195,18)" fg:x="39" fg:w="859"/><text x="4.0810%" y="591.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (858 samples, 84.28%)</title><rect x="3.9293%" y="565" width="84.2829%" height="15" fill="rgb(249,80,12)" fg:x="40" fg:w="858"/><text x="4.1793%" y="575.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (853 samples, 83.79%)</title><rect x="4.4204%" y="549" width="83.7917%" height="15" fill="rgb(221,65,9)" fg:x="45" fg:w="853"/><text x="4.6704%" y="559.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (852 samples, 83.69%)</title><rect x="4.5187%" y="533" width="83.6935%" height="15" fill="rgb(235,49,36)" fg:x="46" fg:w="852"/><text x="4.7687%" y="543.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (828 samples, 81.34%)</title><rect x="6.8762%" y="517" width="81.3360%" height="15" fill="rgb(225,32,20)" fg:x="70" fg:w="828"/><text x="7.1262%" y="527.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (820 samples, 80.55%)</title><rect x="7.6621%" y="501" width="80.5501%" height="15" fill="rgb(215,141,46)" fg:x="78" fg:w="820"/><text x="7.9121%" y="511.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (9 samples, 0.88%)</title><rect x="87.3281%" y="485" width="0.8841%" height="15" fill="rgb(250,160,47)" fg:x="889" fg:w="9"/><text x="87.5781%" y="495.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (1 samples, 0.10%)</title><rect x="88.1139%" y="469" width="0.0982%" height="15" fill="rgb(216,222,40)" fg:x="897" fg:w="1"/><text x="88.3639%" y="479.50"></text></g><g><title>[[heap]] (1 samples, 0.10%)</title><rect x="88.2122%" y="725" width="0.0982%" height="15" fill="rgb(234,217,39)" fg:x="898" fg:w="1"/><text x="88.4622%" y="735.50"></text></g><g><title>clone3 (1 samples, 0.10%)</title><rect x="88.2122%" y="709" width="0.0982%" height="15" fill="rgb(207,178,40)" fg:x="898" fg:w="1"/><text x="88.4622%" y="719.50"></text></g><g><title>[unknown] (10 samples, 0.98%)</title><rect x="88.3104%" y="725" width="0.9823%" height="15" fill="rgb(221,136,13)" fg:x="899" fg:w="10"/><text x="88.5604%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="89.1945%" y="709" width="0.0982%" height="15" fill="rgb(249,199,10)" fg:x="908" fg:w="1"/><text x="89.4445%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="89.2927%" y="709" width="0.0982%" height="15" fill="rgb(249,222,13)" fg:x="909" fg:w="1"/><text x="89.5427%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="89.2927%" y="693" width="0.0982%" height="15" fill="rgb(244,185,38)" fg:x="909" fg:w="1"/><text x="89.5427%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="89.2927%" y="677" width="0.0982%" height="15" fill="rgb(236,202,9)" fg:x="909" fg:w="1"/><text x="89.5427%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="89.2927%" y="661" width="0.0982%" height="15" fill="rgb(250,229,37)" fg:x="909" fg:w="1"/><text x="89.5427%" y="671.50"></text></g><g><title>__GI_exit (1 samples, 0.10%)</title><rect x="89.3910%" y="677" width="0.0982%" height="15" fill="rgb(206,174,23)" fg:x="910" fg:w="1"/><text x="89.6410%" y="687.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.10%)</title><rect x="89.3910%" y="661" width="0.0982%" height="15" fill="rgb(211,33,43)" fg:x="910" fg:w="1"/><text x="89.6410%" y="671.50"></text></g><g><title>_dl_fini (1 samples, 0.10%)</title><rect x="89.3910%" y="645" width="0.0982%" height="15" fill="rgb(245,58,50)" fg:x="910" fg:w="1"/><text x="89.6410%" y="655.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (2 samples, 0.20%)</title><rect x="89.4892%" y="453" width="0.1965%" height="15" fill="rgb(244,68,36)" fg:x="911" fg:w="2"/><text x="89.7392%" y="463.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (2 samples, 0.20%)</title><rect x="89.4892%" y="437" width="0.1965%" height="15" fill="rgb(232,229,15)" fg:x="911" fg:w="2"/><text x="89.7392%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (3 samples, 0.29%)</title><rect x="89.4892%" y="469" width="0.2947%" height="15" fill="rgb(254,30,23)" fg:x="911" fg:w="3"/><text x="89.7392%" y="479.50"></text></g><g><title>tokio::sync::oneshot::State::set_closed (1 samples, 0.10%)</title><rect x="89.6857%" y="453" width="0.0982%" height="15" fill="rgb(235,160,14)" fg:x="913" fg:w="1"/><text x="89.9357%" y="463.50"></text></g><g><title>alloc::collections::binary_heap::PeekMut&lt;T&gt;::pop (1 samples, 0.10%)</title><rect x="90.6680%" y="373" width="0.0982%" height="15" fill="rgb(212,155,44)" fg:x="923" fg:w="1"/><text x="90.9180%" y="383.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.39%)</title><rect x="90.8644%" y="357" width="0.3929%" height="15" fill="rgb(226,2,50)" fg:x="925" fg:w="4"/><text x="91.1144%" y="367.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (1 samples, 0.10%)</title><rect x="91.1591%" y="341" width="0.0982%" height="15" fill="rgb(234,177,6)" fg:x="928" fg:w="1"/><text x="91.4091%" y="351.50"></text></g><g><title>&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (9 samples, 0.88%)</title><rect x="90.4715%" y="421" width="0.8841%" height="15" fill="rgb(217,24,9)" fg:x="921" fg:w="9"/><text x="90.7215%" y="431.50"></text></g><g><title>&lt;futures_util::stream::stream::collect::Collect&lt;St,C&gt; as core::future::future::Future&gt;::poll (9 samples, 0.88%)</title><rect x="90.4715%" y="405" width="0.8841%" height="15" fill="rgb(220,13,46)" fg:x="921" fg:w="9"/><text x="90.7215%" y="415.50"></text></g><g><title>&lt;futures_util::stream::futures_ordered::FuturesOrdered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (8 samples, 0.79%)</title><rect x="90.5697%" y="389" width="0.7859%" height="15" fill="rgb(239,221,27)" fg:x="922" fg:w="8"/><text x="90.8197%" y="399.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (6 samples, 0.59%)</title><rect x="90.7662%" y="373" width="0.5894%" height="15" fill="rgb(222,198,25)" fg:x="924" fg:w="6"/><text x="91.0162%" y="383.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 0.10%)</title><rect x="91.2574%" y="357" width="0.0982%" height="15" fill="rgb(211,99,13)" fg:x="929" fg:w="1"/><text x="91.5074%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="91.3556%" y="421" width="0.0982%" height="15" fill="rgb(232,111,31)" fg:x="930" fg:w="1"/><text x="91.6056%" y="431.50"></text></g><g><title>tokio::runtime::context::with_defer (1 samples, 0.10%)</title><rect x="91.4538%" y="421" width="0.0982%" height="15" fill="rgb(245,82,37)" fg:x="931" fg:w="1"/><text x="91.7038%" y="431.50"></text></g><g><title>tokio::runtime::defer::Defer::wake (1 samples, 0.10%)</title><rect x="91.4538%" y="405" width="0.0982%" height="15" fill="rgb(227,149,46)" fg:x="931" fg:w="1"/><text x="91.7038%" y="415.50"></text></g><g><title>tokio::runtime::coop::Budget::initial (3 samples, 0.29%)</title><rect x="91.5521%" y="421" width="0.2947%" height="15" fill="rgb(218,36,50)" fg:x="932" fg:w="3"/><text x="91.8021%" y="431.50"></text></g><g><title>tokio::runtime::park::Inner::park (16 samples, 1.57%)</title><rect x="91.8468%" y="421" width="1.5717%" height="15" fill="rgb(226,80,48)" fg:x="935" fg:w="16"/><text x="92.0968%" y="431.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (15 samples, 1.47%)</title><rect x="91.9450%" y="405" width="1.4735%" height="15" fill="rgb(238,224,15)" fg:x="936" fg:w="15"/><text x="92.1950%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="93.1238%" y="389" width="0.2947%" height="15" fill="rgb(241,136,10)" fg:x="948" fg:w="3"/><text x="93.3738%" y="399.50"></text></g><g><title>__libc_start_main_impl (42 samples, 4.13%)</title><rect x="89.3910%" y="709" width="4.1257%" height="15" fill="rgb(208,32,45)" fg:x="910" fg:w="42"/><text x="89.6410%" y="719.50">__li..</text></g><g><title>__libc_start_call_main (42 samples, 4.13%)</title><rect x="89.3910%" y="693" width="4.1257%" height="15" fill="rgb(207,135,9)" fg:x="910" fg:w="42"/><text x="89.6410%" y="703.50">__li..</text></g><g><title>main (41 samples, 4.03%)</title><rect x="89.4892%" y="677" width="4.0275%" height="15" fill="rgb(206,86,44)" fg:x="911" fg:w="41"/><text x="89.7392%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (41 samples, 4.03%)</title><rect x="89.4892%" y="661" width="4.0275%" height="15" fill="rgb(245,177,15)" fg:x="911" fg:w="41"/><text x="89.7392%" y="671.50">std:..</text></g><g><title>std::panic::catch_unwind (41 samples, 4.03%)</title><rect x="89.4892%" y="645" width="4.0275%" height="15" fill="rgb(206,64,50)" fg:x="911" fg:w="41"/><text x="89.7392%" y="655.50">std:..</text></g><g><title>std::panicking::try (41 samples, 4.03%)</title><rect x="89.4892%" y="629" width="4.0275%" height="15" fill="rgb(234,36,40)" fg:x="911" fg:w="41"/><text x="89.7392%" y="639.50">std:..</text></g><g><title>std::panicking::try::do_call (41 samples, 4.03%)</title><rect x="89.4892%" y="613" width="4.0275%" height="15" fill="rgb(213,64,8)" fg:x="911" fg:w="41"/><text x="89.7392%" y="623.50">std:..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (41 samples, 4.03%)</title><rect x="89.4892%" y="597" width="4.0275%" height="15" fill="rgb(210,75,36)" fg:x="911" fg:w="41"/><text x="89.7392%" y="607.50">std:..</text></g><g><title>std::panic::catch_unwind (41 samples, 4.03%)</title><rect x="89.4892%" y="581" width="4.0275%" height="15" fill="rgb(229,88,21)" fg:x="911" fg:w="41"/><text x="89.7392%" y="591.50">std:..</text></g><g><title>std::panicking::try (41 samples, 4.03%)</title><rect x="89.4892%" y="565" width="4.0275%" height="15" fill="rgb(252,204,47)" fg:x="911" fg:w="41"/><text x="89.7392%" y="575.50">std:..</text></g><g><title>std::panicking::try::do_call (41 samples, 4.03%)</title><rect x="89.4892%" y="549" width="4.0275%" height="15" fill="rgb(208,77,27)" fg:x="911" fg:w="41"/><text x="89.7392%" y="559.50">std:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (41 samples, 4.03%)</title><rect x="89.4892%" y="533" width="4.0275%" height="15" fill="rgb(221,76,26)" fg:x="911" fg:w="41"/><text x="89.7392%" y="543.50">core..</text></g><g><title>std::rt::lang_start::{{closure}} (41 samples, 4.03%)</title><rect x="89.4892%" y="517" width="4.0275%" height="15" fill="rgb(225,139,18)" fg:x="911" fg:w="41"/><text x="89.7392%" y="527.50">std:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (41 samples, 4.03%)</title><rect x="89.4892%" y="501" width="4.0275%" height="15" fill="rgb(230,137,11)" fg:x="911" fg:w="41"/><text x="89.7392%" y="511.50">std:..</text></g><g><title>zmem::main (41 samples, 4.03%)</title><rect x="89.4892%" y="485" width="4.0275%" height="15" fill="rgb(212,28,1)" fg:x="911" fg:w="41"/><text x="89.7392%" y="495.50">zmem..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (38 samples, 3.73%)</title><rect x="89.7839%" y="469" width="3.7328%" height="15" fill="rgb(248,164,17)" fg:x="914" fg:w="38"/><text x="90.0339%" y="479.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (38 samples, 3.73%)</title><rect x="89.7839%" y="453" width="3.7328%" height="15" fill="rgb(222,171,42)" fg:x="914" fg:w="38"/><text x="90.0339%" y="463.50">toki..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (38 samples, 3.73%)</title><rect x="89.7839%" y="437" width="3.7328%" height="15" fill="rgb(243,84,45)" fg:x="914" fg:w="38"/><text x="90.0339%" y="447.50">toki..</text></g><g><title>zmem::memory::Process::get_cmd (1 samples, 0.10%)</title><rect x="93.4185%" y="421" width="0.0982%" height="15" fill="rgb(252,49,23)" fg:x="951" fg:w="1"/><text x="93.6685%" y="431.50"></text></g><g><title>__GI___close (1 samples, 0.10%)</title><rect x="93.4185%" y="405" width="0.0982%" height="15" fill="rgb(215,19,7)" fg:x="951" fg:w="1"/><text x="93.6685%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.4185%" y="389" width="0.0982%" height="15" fill="rgb(238,81,41)" fg:x="951" fg:w="1"/><text x="93.6685%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.4185%" y="373" width="0.0982%" height="15" fill="rgb(210,199,37)" fg:x="951" fg:w="1"/><text x="93.6685%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.4185%" y="357" width="0.0982%" height="15" fill="rgb(244,192,49)" fg:x="951" fg:w="1"/><text x="93.6685%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.4185%" y="341" width="0.0982%" height="15" fill="rgb(226,211,11)" fg:x="951" fg:w="1"/><text x="93.6685%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.4185%" y="325" width="0.0982%" height="15" fill="rgb(236,162,54)" fg:x="951" fg:w="1"/><text x="93.6685%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.4185%" y="309" width="0.0982%" height="15" fill="rgb(220,229,9)" fg:x="951" fg:w="1"/><text x="93.6685%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.4185%" y="293" width="0.0982%" height="15" fill="rgb(250,87,22)" fg:x="951" fg:w="1"/><text x="93.6685%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.6149%" y="693" width="0.0982%" height="15" fill="rgb(239,43,17)" fg:x="953" fg:w="1"/><text x="93.8649%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.6149%" y="677" width="0.0982%" height="15" fill="rgb(231,177,25)" fg:x="953" fg:w="1"/><text x="93.8649%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.6149%" y="661" width="0.0982%" height="15" fill="rgb(219,179,1)" fg:x="953" fg:w="1"/><text x="93.8649%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.6149%" y="645" width="0.0982%" height="15" fill="rgb(238,219,53)" fg:x="953" fg:w="1"/><text x="93.8649%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.6149%" y="629" width="0.0982%" height="15" fill="rgb(232,167,36)" fg:x="953" fg:w="1"/><text x="93.8649%" y="639.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.10%)</title><rect x="93.7132%" y="661" width="0.0982%" height="15" fill="rgb(244,19,51)" fg:x="954" fg:w="1"/><text x="93.9632%" y="671.50"></text></g><g><title>_dl_start_final (2 samples, 0.20%)</title><rect x="93.7132%" y="693" width="0.1965%" height="15" fill="rgb(224,6,22)" fg:x="954" fg:w="2"/><text x="93.9632%" y="703.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.20%)</title><rect x="93.7132%" y="677" width="0.1965%" height="15" fill="rgb(224,145,5)" fg:x="954" fg:w="2"/><text x="93.9632%" y="687.50"></text></g><g><title>dl_main (1 samples, 0.10%)</title><rect x="93.8114%" y="661" width="0.0982%" height="15" fill="rgb(234,130,49)" fg:x="955" fg:w="1"/><text x="94.0614%" y="671.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.10%)</title><rect x="93.8114%" y="645" width="0.0982%" height="15" fill="rgb(254,6,2)" fg:x="955" fg:w="1"/><text x="94.0614%" y="655.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.10%)</title><rect x="93.8114%" y="629" width="0.0982%" height="15" fill="rgb(208,96,46)" fg:x="955" fg:w="1"/><text x="94.0614%" y="639.50"></text></g><g><title>openaux (1 samples, 0.10%)</title><rect x="93.8114%" y="613" width="0.0982%" height="15" fill="rgb(239,3,39)" fg:x="955" fg:w="1"/><text x="94.0614%" y="623.50"></text></g><g><title>_dl_map_object (1 samples, 0.10%)</title><rect x="93.8114%" y="597" width="0.0982%" height="15" fill="rgb(233,210,1)" fg:x="955" fg:w="1"/><text x="94.0614%" y="607.50"></text></g><g><title>_dl_load_cache_lookup (1 samples, 0.10%)</title><rect x="93.8114%" y="581" width="0.0982%" height="15" fill="rgb(244,137,37)" fg:x="955" fg:w="1"/><text x="94.0614%" y="591.50"></text></g><g><title>search_cache (1 samples, 0.10%)</title><rect x="93.8114%" y="565" width="0.0982%" height="15" fill="rgb(240,136,2)" fg:x="955" fg:w="1"/><text x="94.0614%" y="575.50"></text></g><g><title>_dl_cache_libcmp (1 samples, 0.10%)</title><rect x="93.8114%" y="549" width="0.0982%" height="15" fill="rgb(239,18,37)" fg:x="955" fg:w="1"/><text x="94.0614%" y="559.50"></text></g><g><title>_start (49 samples, 4.81%)</title><rect x="89.2927%" y="725" width="4.8134%" height="15" fill="rgb(218,185,22)" fg:x="909" fg:w="49"/><text x="89.5427%" y="735.50">_start</text></g><g><title>_dl_start (6 samples, 0.59%)</title><rect x="93.5167%" y="709" width="0.5894%" height="15" fill="rgb(225,218,4)" fg:x="952" fg:w="6"/><text x="93.7667%" y="719.50"></text></g><g><title>rtld_timer_start (2 samples, 0.20%)</title><rect x="93.9096%" y="693" width="0.1965%" height="15" fill="rgb(230,182,32)" fg:x="956" fg:w="2"/><text x="94.1596%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="93.9096%" y="677" width="0.1965%" height="15" fill="rgb(242,56,43)" fg:x="956" fg:w="2"/><text x="94.1596%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.0079%" y="661" width="0.0982%" height="15" fill="rgb(233,99,24)" fg:x="957" fg:w="1"/><text x="94.2579%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.0079%" y="645" width="0.0982%" height="15" fill="rgb(234,209,42)" fg:x="957" fg:w="1"/><text x="94.2579%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.0079%" y="629" width="0.0982%" height="15" fill="rgb(227,7,12)" fg:x="957" fg:w="1"/><text x="94.2579%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.0079%" y="613" width="0.0982%" height="15" fill="rgb(245,203,43)" fg:x="957" fg:w="1"/><text x="94.2579%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.0079%" y="597" width="0.0982%" height="15" fill="rgb(238,205,33)" fg:x="957" fg:w="1"/><text x="94.2579%" y="607.50"></text></g><g><title>[unknown] (11 samples, 1.08%)</title><rect x="94.4990%" y="693" width="1.0806%" height="15" fill="rgb(231,56,7)" fg:x="962" fg:w="11"/><text x="94.7490%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.69%)</title><rect x="94.8919%" y="677" width="0.6876%" height="15" fill="rgb(244,186,29)" fg:x="966" fg:w="7"/><text x="95.1419%" y="687.50"></text></g><g><title>[unknown] (6 samples, 0.59%)</title><rect x="94.9902%" y="661" width="0.5894%" height="15" fill="rgb(234,111,31)" fg:x="967" fg:w="6"/><text x="95.2402%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.59%)</title><rect x="94.9902%" y="645" width="0.5894%" height="15" fill="rgb(241,149,10)" fg:x="967" fg:w="6"/><text x="95.2402%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="95.2849%" y="629" width="0.2947%" height="15" fill="rgb(249,206,44)" fg:x="970" fg:w="3"/><text x="95.5349%" y="639.50"></text></g><g><title>__GI___ctype_init (3 samples, 0.29%)</title><rect x="95.5796%" y="693" width="0.2947%" height="15" fill="rgb(251,153,30)" fg:x="973" fg:w="3"/><text x="95.8296%" y="703.50"></text></g><g><title>__GI___sigsetjmp (4 samples, 0.39%)</title><rect x="95.8743%" y="693" width="0.3929%" height="15" fill="rgb(239,152,38)" fg:x="976" fg:w="4"/><text x="96.1243%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="96.1690%" y="677" width="0.0982%" height="15" fill="rgb(249,139,47)" fg:x="979" fg:w="1"/><text x="96.4190%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="96.1690%" y="661" width="0.0982%" height="15" fill="rgb(244,64,35)" fg:x="979" fg:w="1"/><text x="96.4190%" y="671.50"></text></g><g><title>__GI__setjmp (1 samples, 0.10%)</title><rect x="96.2672%" y="693" width="0.0982%" height="15" fill="rgb(216,46,15)" fg:x="980" fg:w="1"/><text x="96.5172%" y="703.50"></text></g><g><title>__sigjmp_save (2 samples, 0.20%)</title><rect x="96.3654%" y="693" width="0.1965%" height="15" fill="rgb(250,74,19)" fg:x="981" fg:w="2"/><text x="96.6154%" y="703.50"></text></g><g><title>rseq_register_current_thread (13 samples, 1.28%)</title><rect x="96.5619%" y="693" width="1.2770%" height="15" fill="rgb(249,42,33)" fg:x="983" fg:w="13"/><text x="96.8119%" y="703.50"></text></g><g><title>[unknown] (12 samples, 1.18%)</title><rect x="96.6601%" y="677" width="1.1788%" height="15" fill="rgb(242,149,17)" fg:x="984" fg:w="12"/><text x="96.9101%" y="687.50"></text></g><g><title>[unknown] (12 samples, 1.18%)</title><rect x="96.6601%" y="661" width="1.1788%" height="15" fill="rgb(244,29,21)" fg:x="984" fg:w="12"/><text x="96.9101%" y="671.50"></text></g><g><title>[unknown] (10 samples, 0.98%)</title><rect x="96.8566%" y="645" width="0.9823%" height="15" fill="rgb(220,130,37)" fg:x="986" fg:w="10"/><text x="97.1066%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.39%)</title><rect x="97.4460%" y="629" width="0.3929%" height="15" fill="rgb(211,67,2)" fg:x="992" fg:w="4"/><text x="97.6960%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="97.7407%" y="613" width="0.0982%" height="15" fill="rgb(235,68,52)" fg:x="995" fg:w="1"/><text x="97.9907%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="97.7407%" y="597" width="0.0982%" height="15" fill="rgb(246,142,3)" fg:x="995" fg:w="1"/><text x="97.9907%" y="607.50"></text></g><g><title>__pthread_setname_np (2 samples, 0.20%)</title><rect x="97.9371%" y="613" width="0.1965%" height="15" fill="rgb(241,25,7)" fg:x="997" fg:w="2"/><text x="98.1871%" y="623.50"></text></g><g><title>__GI___prctl (2 samples, 0.20%)</title><rect x="97.9371%" y="597" width="0.1965%" height="15" fill="rgb(242,119,39)" fg:x="997" fg:w="2"/><text x="98.1871%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="97.9371%" y="581" width="0.1965%" height="15" fill="rgb(241,98,45)" fg:x="997" fg:w="2"/><text x="98.1871%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="97.9371%" y="565" width="0.1965%" height="15" fill="rgb(254,28,30)" fg:x="997" fg:w="2"/><text x="98.1871%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="97.9371%" y="549" width="0.1965%" height="15" fill="rgb(241,142,54)" fg:x="997" fg:w="2"/><text x="98.1871%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.0354%" y="533" width="0.0982%" height="15" fill="rgb(222,85,15)" fg:x="998" fg:w="1"/><text x="98.2854%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.29%)</title><rect x="97.9371%" y="677" width="0.2947%" height="15" fill="rgb(210,85,47)" fg:x="997" fg:w="3"/><text x="98.1871%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.29%)</title><rect x="97.9371%" y="661" width="0.2947%" height="15" fill="rgb(224,206,25)" fg:x="997" fg:w="3"/><text x="98.1871%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.29%)</title><rect x="97.9371%" y="645" width="0.2947%" height="15" fill="rgb(243,201,19)" fg:x="997" fg:w="3"/><text x="98.1871%" y="655.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (3 samples, 0.29%)</title><rect x="97.9371%" y="629" width="0.2947%" height="15" fill="rgb(236,59,4)" fg:x="997" fg:w="3"/><text x="98.1871%" y="639.50"></text></g><g><title>std::sys::unix::thread::truncate_cstr (1 samples, 0.10%)</title><rect x="98.1336%" y="613" width="0.0982%" height="15" fill="rgb(254,179,45)" fg:x="999" fg:w="1"/><text x="98.3836%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.2318%" y="677" width="0.0982%" height="15" fill="rgb(226,14,10)" fg:x="1000" fg:w="1"/><text x="98.4818%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.2318%" y="661" width="0.0982%" height="15" fill="rgb(244,27,41)" fg:x="1000" fg:w="1"/><text x="98.4818%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.2318%" y="645" width="0.0982%" height="15" fill="rgb(235,35,32)" fg:x="1000" fg:w="1"/><text x="98.4818%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.2318%" y="629" width="0.0982%" height="15" fill="rgb(218,68,31)" fg:x="1000" fg:w="1"/><text x="98.4818%" y="639.50"></text></g><g><title>__GI_sigaltstack (6 samples, 0.59%)</title><rect x="98.3301%" y="645" width="0.5894%" height="15" fill="rgb(207,120,37)" fg:x="1001" fg:w="6"/><text x="98.5801%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.59%)</title><rect x="98.3301%" y="629" width="0.5894%" height="15" fill="rgb(227,98,0)" fg:x="1001" fg:w="6"/><text x="98.5801%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.59%)</title><rect x="98.3301%" y="613" width="0.5894%" height="15" fill="rgb(207,7,3)" fg:x="1001" fg:w="6"/><text x="98.5801%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.39%)</title><rect x="98.5265%" y="597" width="0.3929%" height="15" fill="rgb(206,98,19)" fg:x="1003" fg:w="4"/><text x="98.7765%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.8212%" y="581" width="0.0982%" height="15" fill="rgb(217,5,26)" fg:x="1006" fg:w="1"/><text x="99.0712%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (3 samples, 0.29%)</title><rect x="98.9194%" y="645" width="0.2947%" height="15" fill="rgb(235,190,38)" fg:x="1007" fg:w="3"/><text x="99.1694%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.10%)</title><rect x="99.1159%" y="629" width="0.0982%" height="15" fill="rgb(247,86,24)" fg:x="1009" fg:w="1"/><text x="99.3659%" y="639.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.29%)</title><rect x="99.2141%" y="613" width="0.2947%" height="15" fill="rgb(205,101,16)" fg:x="1010" fg:w="3"/><text x="99.4641%" y="623.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.29%)</title><rect x="99.2141%" y="597" width="0.2947%" height="15" fill="rgb(246,168,33)" fg:x="1010" fg:w="3"/><text x="99.4641%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="99.2141%" y="581" width="0.2947%" height="15" fill="rgb(231,114,1)" fg:x="1010" fg:w="3"/><text x="99.4641%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.29%)</title><rect x="99.2141%" y="565" width="0.2947%" height="15" fill="rgb(207,184,53)" fg:x="1010" fg:w="3"/><text x="99.4641%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="99.3124%" y="549" width="0.1965%" height="15" fill="rgb(224,95,51)" fg:x="1011" fg:w="2"/><text x="99.5624%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="99.3124%" y="533" width="0.1965%" height="15" fill="rgb(212,188,45)" fg:x="1011" fg:w="2"/><text x="99.5624%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.4106%" y="517" width="0.0982%" height="15" fill="rgb(223,154,38)" fg:x="1012" fg:w="1"/><text x="99.6606%" y="527.50"></text></g><g><title>__GI_mprotect (2 samples, 0.20%)</title><rect x="99.5088%" y="613" width="0.1965%" height="15" fill="rgb(251,22,52)" fg:x="1013" fg:w="2"/><text x="99.7588%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="99.5088%" y="597" width="0.1965%" height="15" fill="rgb(229,209,22)" fg:x="1013" fg:w="2"/><text x="99.7588%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="99.5088%" y="581" width="0.1965%" height="15" fill="rgb(234,138,34)" fg:x="1013" fg:w="2"/><text x="99.7588%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="99.5088%" y="565" width="0.1965%" height="15" fill="rgb(212,95,11)" fg:x="1013" fg:w="2"/><text x="99.7588%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.20%)</title><rect x="99.5088%" y="549" width="0.1965%" height="15" fill="rgb(240,179,47)" fg:x="1013" fg:w="2"/><text x="99.7588%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.6071%" y="533" width="0.0982%" height="15" fill="rgb(240,163,11)" fg:x="1014" fg:w="1"/><text x="99.8571%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.6071%" y="517" width="0.0982%" height="15" fill="rgb(236,37,12)" fg:x="1014" fg:w="1"/><text x="99.8571%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.6071%" y="501" width="0.0982%" height="15" fill="rgb(232,164,16)" fg:x="1014" fg:w="1"/><text x="99.8571%" y="511.50"></text></g><g><title>all (1,018 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(244,205,15)" fg:x="0" fg:w="1018"/><text x="0.2500%" y="767.50"></text></g><g><title>zmem (120 samples, 11.79%)</title><rect x="88.2122%" y="741" width="11.7878%" height="15" fill="rgb(223,117,47)" fg:x="898" fg:w="120"/><text x="88.4622%" y="751.50">zmem</text></g><g><title>clone3 (60 samples, 5.89%)</title><rect x="94.1061%" y="725" width="5.8939%" height="15" fill="rgb(244,107,35)" fg:x="958" fg:w="60"/><text x="94.3561%" y="735.50">clone3</text></g><g><title>start_thread (59 samples, 5.80%)</title><rect x="94.2043%" y="709" width="5.7957%" height="15" fill="rgb(205,140,8)" fg:x="959" fg:w="59"/><text x="94.4543%" y="719.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22 samples, 2.16%)</title><rect x="97.8389%" y="693" width="2.1611%" height="15" fill="rgb(228,84,46)" fg:x="996" fg:w="22"/><text x="98.0889%" y="703.50">s..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (17 samples, 1.67%)</title><rect x="98.3301%" y="677" width="1.6699%" height="15" fill="rgb(254,188,9)" fg:x="1001" fg:w="17"/><text x="98.5801%" y="687.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (17 samples, 1.67%)</title><rect x="98.3301%" y="661" width="1.6699%" height="15" fill="rgb(206,112,54)" fg:x="1001" fg:w="17"/><text x="98.5801%" y="671.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (8 samples, 0.79%)</title><rect x="99.2141%" y="645" width="0.7859%" height="15" fill="rgb(216,84,49)" fg:x="1010" fg:w="8"/><text x="99.4641%" y="655.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (8 samples, 0.79%)</title><rect x="99.2141%" y="629" width="0.7859%" height="15" fill="rgb(214,194,35)" fg:x="1010" fg:w="8"/><text x="99.4641%" y="639.50"></text></g><g><title>std::sys::unix::os::page_size (3 samples, 0.29%)</title><rect x="99.7053%" y="613" width="0.2947%" height="15" fill="rgb(249,28,3)" fg:x="1015" fg:w="3"/><text x="99.9553%" y="623.50"></text></g><g><title>__GI___sysconf (3 samples, 0.29%)</title><rect x="99.7053%" y="597" width="0.2947%" height="15" fill="rgb(222,56,52)" fg:x="1015" fg:w="3"/><text x="99.9553%" y="607.50"></text></g><g><title>linux_sysconf (2 samples, 0.20%)</title><rect x="99.8035%" y="581" width="0.1965%" height="15" fill="rgb(245,217,50)" fg:x="1016" fg:w="2"/><text x="100.0535%" y="591.50"></text></g><g><title>posix_sysconf (2 samples, 0.20%)</title><rect x="99.8035%" y="565" width="0.1965%" height="15" fill="rgb(213,201,24)" fg:x="1016" fg:w="2"/><text x="100.0535%" y="575.50"></text></g><g><title>__GI___getpagesize (2 samples, 0.20%)</title><rect x="99.8035%" y="549" width="0.1965%" height="15" fill="rgb(248,116,28)" fg:x="1016" fg:w="2"/><text x="100.0535%" y="559.50"></text></g></svg></svg>