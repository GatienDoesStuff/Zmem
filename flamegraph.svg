<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1350" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1333.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1333.00"> </text><svg id="frames" x="10" width="1180" total_samples="808"><g><title>__GI___call_tls_dtors (1 samples, 0.12%)</title><rect x="0.0000%" y="1237" width="0.1238%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1247.50"></text></g><g><title>__glibc_tls_internal_free (1 samples, 0.12%)</title><rect x="0.1238%" y="1221" width="0.1238%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3738%" y="1231.50"></text></g><g><title>__GI___libc_free (1 samples, 0.12%)</title><rect x="0.1238%" y="1205" width="0.1238%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3738%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.3713%" y="1205" width="0.1238%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.6213%" y="1215.50"></text></g><g><title>__res_thread_freeres (3 samples, 0.37%)</title><rect x="0.2475%" y="1221" width="0.3713%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="3"/><text x="0.4975%" y="1231.50"></text></g><g><title>__resolv_context_freeres (1 samples, 0.12%)</title><rect x="0.4950%" y="1205" width="0.1238%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.7450%" y="1215.50"></text></g><g><title>__libc_thread_freeres (7 samples, 0.87%)</title><rect x="0.1238%" y="1237" width="0.8663%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="7"/><text x="0.3738%" y="1247.50"></text></g><g><title>__rpc_thread_destroy (3 samples, 0.37%)</title><rect x="0.6188%" y="1221" width="0.3713%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="3"/><text x="0.8688%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.8663%" y="1205" width="0.1238%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="1.1163%" y="1215.50"></text></g><g><title>_int_free (4 samples, 0.50%)</title><rect x="1.8564%" y="1189" width="0.4950%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="4"/><text x="2.1064%" y="1199.50"></text></g><g><title>malloc_consolidate (1 samples, 0.12%)</title><rect x="2.2277%" y="1173" width="0.1238%" height="15" fill="rgb(250,228,42)" fg:x="18" fg:w="1"/><text x="2.4777%" y="1183.50"></text></g><g><title>__malloc_arena_thread_freeres (12 samples, 1.49%)</title><rect x="0.9901%" y="1237" width="1.4851%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="12"/><text x="1.2401%" y="1247.50"></text></g><g><title>tcache_thread_shutdown (12 samples, 1.49%)</title><rect x="0.9901%" y="1221" width="1.4851%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="12"/><text x="1.2401%" y="1231.50"></text></g><g><title>__GI___libc_free (5 samples, 0.62%)</title><rect x="1.8564%" y="1205" width="0.6188%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="5"/><text x="2.1064%" y="1215.50"></text></g><g><title>tcache_init (1 samples, 0.12%)</title><rect x="2.3515%" y="1189" width="0.1238%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="1"/><text x="2.6015%" y="1199.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.37%)</title><rect x="2.4752%" y="901" width="0.3713%" height="15" fill="rgb(231,73,38)" fg:x="20" fg:w="3"/><text x="2.7252%" y="911.50"></text></g><g><title>__GI___clock_gettime (3 samples, 0.37%)</title><rect x="2.4752%" y="885" width="0.3713%" height="15" fill="rgb(225,20,46)" fg:x="20" fg:w="3"/><text x="2.7252%" y="895.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.25%)</title><rect x="2.5990%" y="869" width="0.2475%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="2"/><text x="2.8490%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="2.5990%" y="853" width="0.2475%" height="15" fill="rgb(221,200,47)" fg:x="21" fg:w="2"/><text x="2.8490%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="2.5990%" y="837" width="0.2475%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="2"/><text x="2.8490%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="2.5990%" y="821" width="0.2475%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="2"/><text x="2.8490%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="2.7228%" y="805" width="0.1238%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="1"/><text x="2.9728%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="2.7228%" y="789" width="0.1238%" height="15" fill="rgb(221,5,38)" fg:x="22" fg:w="1"/><text x="2.9728%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="2.7228%" y="773" width="0.1238%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="1"/><text x="2.9728%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (4 samples, 0.50%)</title><rect x="2.4752%" y="917" width="0.4950%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="4"/><text x="2.7252%" y="927.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.12%)</title><rect x="2.8465%" y="901" width="0.1238%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="1"/><text x="3.0965%" y="911.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.12%)</title><rect x="2.8465%" y="885" width="0.1238%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="1"/><text x="3.0965%" y="895.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (5 samples, 0.62%)</title><rect x="2.4752%" y="949" width="0.6188%" height="15" fill="rgb(238,160,17)" fg:x="20" fg:w="5"/><text x="2.7252%" y="959.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (5 samples, 0.62%)</title><rect x="2.4752%" y="933" width="0.6188%" height="15" fill="rgb(214,148,48)" fg:x="20" fg:w="5"/><text x="2.7252%" y="943.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (1 samples, 0.12%)</title><rect x="2.9703%" y="917" width="0.1238%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="1"/><text x="3.2203%" y="927.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock_slow (1 samples, 0.12%)</title><rect x="2.9703%" y="901" width="0.1238%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="1"/><text x="3.2203%" y="911.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.12%)</title><rect x="2.9703%" y="885" width="0.1238%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="1"/><text x="3.2203%" y="895.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime_impl (1 samples, 0.12%)</title><rect x="2.9703%" y="869" width="0.1238%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="1"/><text x="3.2203%" y="879.50"></text></g><g><title>core::mem::drop (7 samples, 0.87%)</title><rect x="2.4752%" y="1029" width="0.8663%" height="15" fill="rgb(254,191,54)" fg:x="20" fg:w="7"/><text x="2.7252%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (7 samples, 0.87%)</title><rect x="2.4752%" y="1013" width="0.8663%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="7"/><text x="2.7252%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (7 samples, 0.87%)</title><rect x="2.4752%" y="997" width="0.8663%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="7"/><text x="2.7252%" y="1007.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.87%)</title><rect x="2.4752%" y="981" width="0.8663%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="7"/><text x="2.7252%" y="991.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (7 samples, 0.87%)</title><rect x="2.4752%" y="965" width="0.8663%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="7"/><text x="2.7252%" y="975.50"></text></g><g><title>syscall (2 samples, 0.25%)</title><rect x="3.0941%" y="949" width="0.2475%" height="15" fill="rgb(238,167,29)" fg:x="25" fg:w="2"/><text x="3.3441%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="3.0941%" y="933" width="0.2475%" height="15" fill="rgb(232,182,51)" fg:x="25" fg:w="2"/><text x="3.3441%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="3.0941%" y="917" width="0.2475%" height="15" fill="rgb(231,60,39)" fg:x="25" fg:w="2"/><text x="3.3441%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="3.0941%" y="901" width="0.2475%" height="15" fill="rgb(208,69,12)" fg:x="25" fg:w="2"/><text x="3.3441%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="3.0941%" y="885" width="0.2475%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="2"/><text x="3.3441%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.2178%" y="869" width="0.1238%" height="15" fill="rgb(213,116,39)" fg:x="26" fg:w="1"/><text x="3.4678%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.2178%" y="853" width="0.1238%" height="15" fill="rgb(222,207,29)" fg:x="26" fg:w="1"/><text x="3.4678%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.2178%" y="837" width="0.1238%" height="15" fill="rgb(206,96,30)" fg:x="26" fg:w="1"/><text x="3.4678%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.2178%" y="821" width="0.1238%" height="15" fill="rgb(218,138,4)" fg:x="26" fg:w="1"/><text x="3.4678%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;parking_lot_core::parking_lot::ThreadData&gt;&gt; (1 samples, 0.12%)</title><rect x="3.5891%" y="933" width="0.1238%" height="15" fill="rgb(250,191,14)" fg:x="29" fg:w="1"/><text x="3.8391%" y="943.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.12%)</title><rect x="3.7129%" y="917" width="0.1238%" height="15" fill="rgb(239,60,40)" fg:x="30" fg:w="1"/><text x="3.9629%" y="927.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.12%)</title><rect x="3.7129%" y="901" width="0.1238%" height="15" fill="rgb(206,27,48)" fg:x="30" fg:w="1"/><text x="3.9629%" y="911.50"></text></g><g><title>syscall (1 samples, 0.12%)</title><rect x="3.7129%" y="885" width="0.1238%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="1"/><text x="3.9629%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.7129%" y="869" width="0.1238%" height="15" fill="rgb(250,213,24)" fg:x="30" fg:w="1"/><text x="3.9629%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.7129%" y="853" width="0.1238%" height="15" fill="rgb(247,123,22)" fg:x="30" fg:w="1"/><text x="3.9629%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.7129%" y="837" width="0.1238%" height="15" fill="rgb(231,138,38)" fg:x="30" fg:w="1"/><text x="3.9629%" y="847.50"></text></g><g><title>parking_lot_core::parking_lot::park (3 samples, 0.37%)</title><rect x="3.5891%" y="965" width="0.3713%" height="15" fill="rgb(231,145,46)" fg:x="29" fg:w="3"/><text x="3.8391%" y="975.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (3 samples, 0.37%)</title><rect x="3.5891%" y="949" width="0.3713%" height="15" fill="rgb(251,118,11)" fg:x="29" fg:w="3"/><text x="3.8391%" y="959.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (2 samples, 0.25%)</title><rect x="3.7129%" y="933" width="0.2475%" height="15" fill="rgb(217,147,25)" fg:x="30" fg:w="2"/><text x="3.9629%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.12%)</title><rect x="3.8366%" y="917" width="0.1238%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="1"/><text x="4.0866%" y="927.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.12%)</title><rect x="3.8366%" y="901" width="0.1238%" height="15" fill="rgb(209,12,38)" fg:x="31" fg:w="1"/><text x="4.0866%" y="911.50"></text></g><g><title>core::mem::replace (1 samples, 0.12%)</title><rect x="3.8366%" y="885" width="0.1238%" height="15" fill="rgb(227,1,9)" fg:x="31" fg:w="1"/><text x="4.0866%" y="895.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="3.8366%" y="869" width="0.1238%" height="15" fill="rgb(248,47,43)" fg:x="31" fg:w="1"/><text x="4.0866%" y="879.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.12%)</title><rect x="4.0842%" y="949" width="0.1238%" height="15" fill="rgb(221,10,30)" fg:x="33" fg:w="1"/><text x="4.3342%" y="959.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.12%)</title><rect x="4.0842%" y="933" width="0.1238%" height="15" fill="rgb(210,229,1)" fg:x="33" fg:w="1"/><text x="4.3342%" y="943.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.12%)</title><rect x="4.0842%" y="917" width="0.1238%" height="15" fill="rgb(222,148,37)" fg:x="33" fg:w="1"/><text x="4.3342%" y="927.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (9 samples, 1.11%)</title><rect x="3.3416%" y="1029" width="1.1139%" height="15" fill="rgb(234,67,33)" fg:x="27" fg:w="9"/><text x="3.5916%" y="1039.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (9 samples, 1.11%)</title><rect x="3.3416%" y="1013" width="1.1139%" height="15" fill="rgb(247,98,35)" fg:x="27" fg:w="9"/><text x="3.5916%" y="1023.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (9 samples, 1.11%)</title><rect x="3.3416%" y="997" width="1.1139%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="9"/><text x="3.5916%" y="1007.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (9 samples, 1.11%)</title><rect x="3.3416%" y="981" width="1.1139%" height="15" fill="rgb(213,79,30)" fg:x="27" fg:w="9"/><text x="3.5916%" y="991.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (4 samples, 0.50%)</title><rect x="3.9604%" y="965" width="0.4950%" height="15" fill="rgb(246,177,23)" fg:x="32" fg:w="4"/><text x="4.2104%" y="975.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (2 samples, 0.25%)</title><rect x="4.2079%" y="949" width="0.2475%" height="15" fill="rgb(230,62,27)" fg:x="34" fg:w="2"/><text x="4.4579%" y="959.50"></text></g><g><title>__GI_sched_yield (2 samples, 0.25%)</title><rect x="4.2079%" y="933" width="0.2475%" height="15" fill="rgb(216,154,8)" fg:x="34" fg:w="2"/><text x="4.4579%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.3317%" y="917" width="0.1238%" height="15" fill="rgb(244,35,45)" fg:x="35" fg:w="1"/><text x="4.5817%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.3317%" y="901" width="0.1238%" height="15" fill="rgb(251,115,12)" fg:x="35" fg:w="1"/><text x="4.5817%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.3317%" y="885" width="0.1238%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="1"/><text x="4.5817%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.3317%" y="869" width="0.1238%" height="15" fill="rgb(233,84,52)" fg:x="35" fg:w="1"/><text x="4.5817%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.3317%" y="853" width="0.1238%" height="15" fill="rgb(207,117,47)" fg:x="35" fg:w="1"/><text x="4.5817%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.3317%" y="837" width="0.1238%" height="15" fill="rgb(249,43,39)" fg:x="35" fg:w="1"/><text x="4.5817%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.3317%" y="821" width="0.1238%" height="15" fill="rgb(209,38,44)" fg:x="35" fg:w="1"/><text x="4.5817%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Context&gt; (1 samples, 0.12%)</title><rect x="4.9505%" y="757" width="0.1238%" height="15" fill="rgb(236,212,23)" fg:x="40" fg:w="1"/><text x="5.2005%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::worker::Worker&gt;&gt; (1 samples, 0.12%)</title><rect x="4.9505%" y="741" width="0.1238%" height="15" fill="rgb(242,79,21)" fg:x="40" fg:w="1"/><text x="5.2005%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="4.9505%" y="725" width="0.1238%" height="15" fill="rgb(211,96,35)" fg:x="40" fg:w="1"/><text x="5.2005%" y="735.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.12%)</title><rect x="5.1980%" y="741" width="0.1238%" height="15" fill="rgb(253,215,40)" fg:x="42" fg:w="1"/><text x="5.4480%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.12%)</title><rect x="5.1980%" y="725" width="0.1238%" height="15" fill="rgb(211,81,21)" fg:x="42" fg:w="1"/><text x="5.4480%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (1 samples, 0.12%)</title><rect x="5.1980%" y="709" width="0.1238%" height="15" fill="rgb(208,190,38)" fg:x="42" fg:w="1"/><text x="5.4480%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="5.3218%" y="693" width="0.1238%" height="15" fill="rgb(235,213,38)" fg:x="43" fg:w="1"/><text x="5.5718%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.12%)</title><rect x="5.3218%" y="677" width="0.1238%" height="15" fill="rgb(237,122,38)" fg:x="43" fg:w="1"/><text x="5.5718%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="5.3218%" y="661" width="0.1238%" height="15" fill="rgb(244,218,35)" fg:x="43" fg:w="1"/><text x="5.5718%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="5.3218%" y="645" width="0.1238%" height="15" fill="rgb(240,68,47)" fg:x="43" fg:w="1"/><text x="5.5718%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.12%)</title><rect x="5.3218%" y="629" width="0.1238%" height="15" fill="rgb(210,16,53)" fg:x="43" fg:w="1"/><text x="5.5718%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.12%)</title><rect x="5.3218%" y="613" width="0.1238%" height="15" fill="rgb(235,124,12)" fg:x="43" fg:w="1"/><text x="5.5718%" y="623.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.12%)</title><rect x="5.3218%" y="597" width="0.1238%" height="15" fill="rgb(224,169,11)" fg:x="43" fg:w="1"/><text x="5.5718%" y="607.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.12%)</title><rect x="5.3218%" y="581" width="0.1238%" height="15" fill="rgb(250,166,2)" fg:x="43" fg:w="1"/><text x="5.5718%" y="591.50"></text></g><g><title>_int_realloc (1 samples, 0.12%)</title><rect x="5.3218%" y="565" width="0.1238%" height="15" fill="rgb(242,216,29)" fg:x="43" fg:w="1"/><text x="5.5718%" y="575.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="5.3218%" y="549" width="0.1238%" height="15" fill="rgb(230,116,27)" fg:x="43" fg:w="1"/><text x="5.5718%" y="559.50"></text></g><g><title>tcache_put (1 samples, 0.12%)</title><rect x="5.3218%" y="533" width="0.1238%" height="15" fill="rgb(228,99,48)" fg:x="43" fg:w="1"/><text x="5.5718%" y="543.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.12%)</title><rect x="5.5693%" y="581" width="0.1238%" height="15" fill="rgb(253,11,6)" fg:x="45" fg:w="1"/><text x="5.8193%" y="591.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.12%)</title><rect x="5.5693%" y="565" width="0.1238%" height="15" fill="rgb(247,143,39)" fg:x="45" fg:w="1"/><text x="5.8193%" y="575.50"></text></g><g><title>syscall (1 samples, 0.12%)</title><rect x="5.5693%" y="549" width="0.1238%" height="15" fill="rgb(236,97,10)" fg:x="45" fg:w="1"/><text x="5.8193%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="5.5693%" y="533" width="0.1238%" height="15" fill="rgb(233,208,19)" fg:x="45" fg:w="1"/><text x="5.8193%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="5.5693%" y="517" width="0.1238%" height="15" fill="rgb(216,164,2)" fg:x="45" fg:w="1"/><text x="5.8193%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="5.5693%" y="501" width="0.1238%" height="15" fill="rgb(220,129,5)" fg:x="45" fg:w="1"/><text x="5.8193%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="5.5693%" y="485" width="0.1238%" height="15" fill="rgb(242,17,10)" fg:x="45" fg:w="1"/><text x="5.8193%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="5.5693%" y="469" width="0.1238%" height="15" fill="rgb(242,107,0)" fg:x="45" fg:w="1"/><text x="5.8193%" y="479.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (3 samples, 0.37%)</title><rect x="5.4455%" y="693" width="0.3713%" height="15" fill="rgb(251,28,31)" fg:x="44" fg:w="3"/><text x="5.6955%" y="703.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (3 samples, 0.37%)</title><rect x="5.4455%" y="677" width="0.3713%" height="15" fill="rgb(233,223,10)" fg:x="44" fg:w="3"/><text x="5.6955%" y="687.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (3 samples, 0.37%)</title><rect x="5.4455%" y="661" width="0.3713%" height="15" fill="rgb(215,21,27)" fg:x="44" fg:w="3"/><text x="5.6955%" y="671.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.37%)</title><rect x="5.4455%" y="645" width="0.3713%" height="15" fill="rgb(232,23,21)" fg:x="44" fg:w="3"/><text x="5.6955%" y="655.50"></text></g><g><title>parking_lot_core::parking_lot::park (2 samples, 0.25%)</title><rect x="5.5693%" y="629" width="0.2475%" height="15" fill="rgb(244,5,23)" fg:x="45" fg:w="2"/><text x="5.8193%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (2 samples, 0.25%)</title><rect x="5.5693%" y="613" width="0.2475%" height="15" fill="rgb(226,81,46)" fg:x="45" fg:w="2"/><text x="5.8193%" y="623.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (2 samples, 0.25%)</title><rect x="5.5693%" y="597" width="0.2475%" height="15" fill="rgb(247,70,30)" fg:x="45" fg:w="2"/><text x="5.8193%" y="607.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.12%)</title><rect x="5.6931%" y="581" width="0.1238%" height="15" fill="rgb(212,68,19)" fg:x="46" fg:w="1"/><text x="5.9431%" y="591.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.12%)</title><rect x="5.6931%" y="565" width="0.1238%" height="15" fill="rgb(240,187,13)" fg:x="46" fg:w="1"/><text x="5.9431%" y="575.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (1 samples, 0.12%)</title><rect x="5.6931%" y="549" width="0.1238%" height="15" fill="rgb(223,113,26)" fg:x="46" fg:w="1"/><text x="5.9431%" y="559.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1 samples, 0.12%)</title><rect x="5.6931%" y="533" width="0.1238%" height="15" fill="rgb(206,192,2)" fg:x="46" fg:w="1"/><text x="5.9431%" y="543.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.12%)</title><rect x="5.6931%" y="517" width="0.1238%" height="15" fill="rgb(241,108,4)" fg:x="46" fg:w="1"/><text x="5.9431%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.12%)</title><rect x="5.6931%" y="501" width="0.1238%" height="15" fill="rgb(247,173,49)" fg:x="46" fg:w="1"/><text x="5.9431%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.12%)</title><rect x="5.6931%" y="485" width="0.1238%" height="15" fill="rgb(224,114,35)" fg:x="46" fg:w="1"/><text x="5.9431%" y="495.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (1 samples, 0.12%)</title><rect x="5.8168%" y="581" width="0.1238%" height="15" fill="rgb(245,159,27)" fg:x="47" fg:w="1"/><text x="6.0668%" y="591.50"></text></g><g><title>tokio::runtime::driver::Driver::shutdown (2 samples, 0.25%)</title><rect x="5.8168%" y="645" width="0.2475%" height="15" fill="rgb(245,172,44)" fg:x="47" fg:w="2"/><text x="6.0668%" y="655.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::shutdown (2 samples, 0.25%)</title><rect x="5.8168%" y="629" width="0.2475%" height="15" fill="rgb(236,23,11)" fg:x="47" fg:w="2"/><text x="6.0668%" y="639.50"></text></g><g><title>tokio::runtime::time::Driver::shutdown (2 samples, 0.25%)</title><rect x="5.8168%" y="613" width="0.2475%" height="15" fill="rgb(205,117,38)" fg:x="47" fg:w="2"/><text x="6.0668%" y="623.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.25%)</title><rect x="5.8168%" y="597" width="0.2475%" height="15" fill="rgb(237,72,25)" fg:x="47" fg:w="2"/><text x="6.0668%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (1 samples, 0.12%)</title><rect x="5.9406%" y="581" width="0.1238%" height="15" fill="rgb(244,70,9)" fg:x="48" fg:w="1"/><text x="6.1906%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::shutdown (3 samples, 0.37%)</title><rect x="5.8168%" y="677" width="0.3713%" height="15" fill="rgb(217,125,39)" fg:x="47" fg:w="3"/><text x="6.0668%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::shutdown (3 samples, 0.37%)</title><rect x="5.8168%" y="661" width="0.3713%" height="15" fill="rgb(235,36,10)" fg:x="47" fg:w="3"/><text x="6.0668%" y="671.50"></text></g><g><title>tokio::runtime::io::Driver::shutdown (1 samples, 0.12%)</title><rect x="6.0644%" y="645" width="0.1238%" height="15" fill="rgb(251,123,47)" fg:x="49" fg:w="1"/><text x="6.3144%" y="655.50"></text></g><g><title>tokio::util::slab::Slab&lt;T&gt;::for_each (1 samples, 0.12%)</title><rect x="6.0644%" y="629" width="0.1238%" height="15" fill="rgb(221,13,13)" fg:x="49" fg:w="1"/><text x="6.3144%" y="639.50"></text></g><g><title>tokio::util::slab::CachedPage&lt;T&gt;::refresh (1 samples, 0.12%)</title><rect x="6.0644%" y="613" width="0.1238%" height="15" fill="rgb(238,131,9)" fg:x="49" fg:w="1"/><text x="6.3144%" y="623.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.12%)</title><rect x="6.0644%" y="597" width="0.1238%" height="15" fill="rgb(211,50,8)" fg:x="49" fg:w="1"/><text x="6.3144%" y="607.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.12%)</title><rect x="6.0644%" y="581" width="0.1238%" height="15" fill="rgb(245,182,24)" fg:x="49" fg:w="1"/><text x="6.3144%" y="591.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.12%)</title><rect x="6.0644%" y="565" width="0.1238%" height="15" fill="rgb(242,14,37)" fg:x="49" fg:w="1"/><text x="6.3144%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (8 samples, 0.99%)</title><rect x="5.3218%" y="709" width="0.9901%" height="15" fill="rgb(246,228,12)" fg:x="43" fg:w="8"/><text x="5.5718%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::shutdown (4 samples, 0.50%)</title><rect x="5.8168%" y="693" width="0.4950%" height="15" fill="rgb(213,55,15)" fg:x="47" fg:w="4"/><text x="6.0668%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (1 samples, 0.12%)</title><rect x="6.1881%" y="677" width="0.1238%" height="15" fill="rgb(209,9,3)" fg:x="50" fg:w="1"/><text x="6.4381%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1 samples, 0.12%)</title><rect x="6.1881%" y="661" width="0.1238%" height="15" fill="rgb(230,59,30)" fg:x="50" fg:w="1"/><text x="6.4381%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task::{{closure}} (1 samples, 0.12%)</title><rect x="6.1881%" y="645" width="0.1238%" height="15" fill="rgb(209,121,21)" fg:x="50" fg:w="1"/><text x="6.4381%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop (1 samples, 0.12%)</title><rect x="6.1881%" y="629" width="0.1238%" height="15" fill="rgb(220,109,13)" fg:x="50" fg:w="1"/><text x="6.4381%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (1 samples, 0.12%)</title><rect x="6.1881%" y="613" width="0.1238%" height="15" fill="rgb(232,18,1)" fg:x="50" fg:w="1"/><text x="6.4381%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.12%)</title><rect x="6.1881%" y="597" width="0.1238%" height="15" fill="rgb(215,41,42)" fg:x="50" fg:w="1"/><text x="6.4381%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.25%)</title><rect x="6.3119%" y="693" width="0.2475%" height="15" fill="rgb(224,123,36)" fg:x="51" fg:w="2"/><text x="6.5619%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.25%)</title><rect x="6.3119%" y="677" width="0.2475%" height="15" fill="rgb(240,125,3)" fg:x="51" fg:w="2"/><text x="6.5619%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.25%)</title><rect x="6.3119%" y="661" width="0.2475%" height="15" fill="rgb(205,98,50)" fg:x="51" fg:w="2"/><text x="6.5619%" y="671.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.12%)</title><rect x="6.6832%" y="677" width="0.1238%" height="15" fill="rgb(205,185,37)" fg:x="54" fg:w="1"/><text x="6.9332%" y="687.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.12%)</title><rect x="6.6832%" y="661" width="0.1238%" height="15" fill="rgb(238,207,15)" fg:x="54" fg:w="1"/><text x="6.9332%" y="671.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.12%)</title><rect x="6.6832%" y="645" width="0.1238%" height="15" fill="rgb(213,199,42)" fg:x="54" fg:w="1"/><text x="6.9332%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.12%)</title><rect x="6.9307%" y="645" width="0.1238%" height="15" fill="rgb(235,201,11)" fg:x="56" fg:w="1"/><text x="7.1807%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;parking_lot_core::parking_lot::ThreadData&gt;&gt; (3 samples, 0.37%)</title><rect x="7.0545%" y="549" width="0.3713%" height="15" fill="rgb(207,46,11)" fg:x="57" fg:w="3"/><text x="7.3045%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (4 samples, 0.50%)</title><rect x="7.0545%" y="645" width="0.4950%" height="15" fill="rgb(241,35,35)" fg:x="57" fg:w="4"/><text x="7.3045%" y="655.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (4 samples, 0.50%)</title><rect x="7.0545%" y="629" width="0.4950%" height="15" fill="rgb(243,32,47)" fg:x="57" fg:w="4"/><text x="7.3045%" y="639.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (4 samples, 0.50%)</title><rect x="7.0545%" y="613" width="0.4950%" height="15" fill="rgb(247,202,23)" fg:x="57" fg:w="4"/><text x="7.3045%" y="623.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.50%)</title><rect x="7.0545%" y="597" width="0.4950%" height="15" fill="rgb(219,102,11)" fg:x="57" fg:w="4"/><text x="7.3045%" y="607.50"></text></g><g><title>parking_lot_core::parking_lot::park (4 samples, 0.50%)</title><rect x="7.0545%" y="581" width="0.4950%" height="15" fill="rgb(243,110,44)" fg:x="57" fg:w="4"/><text x="7.3045%" y="591.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (4 samples, 0.50%)</title><rect x="7.0545%" y="565" width="0.4950%" height="15" fill="rgb(222,74,54)" fg:x="57" fg:w="4"/><text x="7.3045%" y="575.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.12%)</title><rect x="7.4257%" y="549" width="0.1238%" height="15" fill="rgb(216,99,12)" fg:x="60" fg:w="1"/><text x="7.6757%" y="559.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.12%)</title><rect x="7.4257%" y="533" width="0.1238%" height="15" fill="rgb(226,22,26)" fg:x="60" fg:w="1"/><text x="7.6757%" y="543.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.12%)</title><rect x="7.4257%" y="517" width="0.1238%" height="15" fill="rgb(217,163,10)" fg:x="60" fg:w="1"/><text x="7.6757%" y="527.50"></text></g><g><title>syscall (1 samples, 0.12%)</title><rect x="7.4257%" y="501" width="0.1238%" height="15" fill="rgb(213,25,53)" fg:x="60" fg:w="1"/><text x="7.6757%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="7.4257%" y="485" width="0.1238%" height="15" fill="rgb(252,105,26)" fg:x="60" fg:w="1"/><text x="7.6757%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="7.4257%" y="469" width="0.1238%" height="15" fill="rgb(220,39,43)" fg:x="60" fg:w="1"/><text x="7.6757%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="7.4257%" y="453" width="0.1238%" height="15" fill="rgb(229,68,48)" fg:x="60" fg:w="1"/><text x="7.6757%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="7.4257%" y="437" width="0.1238%" height="15" fill="rgb(252,8,32)" fg:x="60" fg:w="1"/><text x="7.6757%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="7.4257%" y="421" width="0.1238%" height="15" fill="rgb(223,20,43)" fg:x="60" fg:w="1"/><text x="7.6757%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="7.4257%" y="405" width="0.1238%" height="15" fill="rgb(229,81,49)" fg:x="60" fg:w="1"/><text x="7.6757%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (7 samples, 0.87%)</title><rect x="6.8069%" y="677" width="0.8663%" height="15" fill="rgb(236,28,36)" fg:x="55" fg:w="7"/><text x="7.0569%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (6 samples, 0.74%)</title><rect x="6.9307%" y="661" width="0.7426%" height="15" fill="rgb(249,185,26)" fg:x="56" fg:w="6"/><text x="7.1807%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (1 samples, 0.12%)</title><rect x="7.5495%" y="645" width="0.1238%" height="15" fill="rgb(249,174,33)" fg:x="61" fg:w="1"/><text x="7.7995%" y="655.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 0.12%)</title><rect x="7.5495%" y="629" width="0.1238%" height="15" fill="rgb(233,201,37)" fg:x="61" fg:w="1"/><text x="7.7995%" y="639.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.12%)</title><rect x="7.5495%" y="613" width="0.1238%" height="15" fill="rgb(221,78,26)" fg:x="61" fg:w="1"/><text x="7.7995%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (1 samples, 0.12%)</title><rect x="7.5495%" y="597" width="0.1238%" height="15" fill="rgb(250,127,30)" fg:x="61" fg:w="1"/><text x="7.7995%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (1 samples, 0.12%)</title><rect x="7.5495%" y="581" width="0.1238%" height="15" fill="rgb(230,49,44)" fg:x="61" fg:w="1"/><text x="7.7995%" y="591.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="7.5495%" y="565" width="0.1238%" height="15" fill="rgb(229,67,23)" fg:x="61" fg:w="1"/><text x="7.7995%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.12%)</title><rect x="7.5495%" y="549" width="0.1238%" height="15" fill="rgb(249,83,47)" fg:x="61" fg:w="1"/><text x="7.7995%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.12%)</title><rect x="7.5495%" y="533" width="0.1238%" height="15" fill="rgb(215,43,3)" fg:x="61" fg:w="1"/><text x="7.7995%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.12%)</title><rect x="7.5495%" y="517" width="0.1238%" height="15" fill="rgb(238,154,13)" fg:x="61" fg:w="1"/><text x="7.7995%" y="527.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::is_stealable (1 samples, 0.12%)</title><rect x="7.6733%" y="677" width="0.1238%" height="15" fill="rgb(219,56,2)" fg:x="62" fg:w="1"/><text x="7.9233%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::is_empty (1 samples, 0.12%)</title><rect x="7.6733%" y="661" width="0.1238%" height="15" fill="rgb(233,0,4)" fg:x="62" fg:w="1"/><text x="7.9233%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (1 samples, 0.12%)</title><rect x="7.6733%" y="645" width="0.1238%" height="15" fill="rgb(235,30,7)" fg:x="62" fg:w="1"/><text x="7.9233%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.12%)</title><rect x="7.6733%" y="629" width="0.1238%" height="15" fill="rgb(250,79,13)" fg:x="62" fg:w="1"/><text x="7.9233%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.12%)</title><rect x="7.6733%" y="613" width="0.1238%" height="15" fill="rgb(211,146,34)" fg:x="62" fg:w="1"/><text x="7.9233%" y="623.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.25%)</title><rect x="7.7970%" y="613" width="0.2475%" height="15" fill="rgb(228,22,38)" fg:x="63" fg:w="2"/><text x="8.0470%" y="623.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::get (2 samples, 0.25%)</title><rect x="7.7970%" y="597" width="0.2475%" height="15" fill="rgb(235,168,5)" fg:x="63" fg:w="2"/><text x="8.0470%" y="607.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (2 samples, 0.25%)</title><rect x="7.7970%" y="581" width="0.2475%" height="15" fill="rgb(221,155,16)" fg:x="63" fg:w="2"/><text x="8.0470%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.25%)</title><rect x="7.7970%" y="565" width="0.2475%" height="15" fill="rgb(215,215,53)" fg:x="63" fg:w="2"/><text x="8.0470%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="7.9208%" y="549" width="0.1238%" height="15" fill="rgb(223,4,10)" fg:x="64" fg:w="1"/><text x="8.1708%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (13 samples, 1.61%)</title><rect x="6.5594%" y="693" width="1.6089%" height="15" fill="rgb(234,103,6)" fg:x="53" fg:w="13"/><text x="6.8094%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::wake_deferred_tasks (3 samples, 0.37%)</title><rect x="7.7970%" y="677" width="0.3713%" height="15" fill="rgb(227,97,0)" fg:x="63" fg:w="3"/><text x="8.0470%" y="687.50"></text></g><g><title>tokio::runtime::context::with_defer (3 samples, 0.37%)</title><rect x="7.7970%" y="661" width="0.3713%" height="15" fill="rgb(234,150,53)" fg:x="63" fg:w="3"/><text x="8.0470%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.37%)</title><rect x="7.7970%" y="645" width="0.3713%" height="15" fill="rgb(228,201,54)" fg:x="63" fg:w="3"/><text x="8.0470%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.37%)</title><rect x="7.7970%" y="629" width="0.3713%" height="15" fill="rgb(222,22,37)" fg:x="63" fg:w="3"/><text x="8.0470%" y="639.50"></text></g><g><title>tokio::runtime::context::with_defer::{{closure}} (1 samples, 0.12%)</title><rect x="8.0446%" y="613" width="0.1238%" height="15" fill="rgb(237,53,32)" fg:x="65" fg:w="1"/><text x="8.2946%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.12%)</title><rect x="8.0446%" y="597" width="0.1238%" height="15" fill="rgb(233,25,53)" fg:x="65" fg:w="1"/><text x="8.2946%" y="607.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (1 samples, 0.12%)</title><rect x="8.0446%" y="581" width="0.1238%" height="15" fill="rgb(210,40,34)" fg:x="65" fg:w="1"/><text x="8.2946%" y="591.50"></text></g><g><title>tokio::runtime::defer::Defer::wake (1 samples, 0.12%)</title><rect x="8.0446%" y="565" width="0.1238%" height="15" fill="rgb(241,220,44)" fg:x="65" fg:w="1"/><text x="8.2946%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;core::task::wake::Waker&gt;&gt; (1 samples, 0.12%)</title><rect x="8.0446%" y="549" width="0.1238%" height="15" fill="rgb(235,28,35)" fg:x="65" fg:w="1"/><text x="8.2946%" y="559.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="8.0446%" y="533" width="0.1238%" height="15" fill="rgb(210,56,17)" fg:x="65" fg:w="1"/><text x="8.2946%" y="543.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (2 samples, 0.25%)</title><rect x="8.1683%" y="693" width="0.2475%" height="15" fill="rgb(224,130,29)" fg:x="66" fg:w="2"/><text x="8.4183%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.12%)</title><rect x="8.2921%" y="677" width="0.1238%" height="15" fill="rgb(235,212,8)" fg:x="67" fg:w="1"/><text x="8.5421%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.12%)</title><rect x="8.2921%" y="661" width="0.1238%" height="15" fill="rgb(223,33,50)" fg:x="67" fg:w="1"/><text x="8.5421%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.12%)</title><rect x="8.2921%" y="645" width="0.1238%" height="15" fill="rgb(219,149,13)" fg:x="67" fg:w="1"/><text x="8.5421%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (1 samples, 0.12%)</title><rect x="8.4158%" y="693" width="0.1238%" height="15" fill="rgb(250,156,29)" fg:x="68" fg:w="1"/><text x="8.6658%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (19 samples, 2.35%)</title><rect x="6.3119%" y="709" width="2.3515%" height="15" fill="rgb(216,193,19)" fg:x="51" fg:w="19"/><text x="6.5619%" y="719.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (1 samples, 0.12%)</title><rect x="8.5396%" y="693" width="0.1238%" height="15" fill="rgb(216,135,14)" fg:x="69" fg:w="1"/><text x="8.7896%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (1 samples, 0.12%)</title><rect x="8.5396%" y="677" width="0.1238%" height="15" fill="rgb(241,47,5)" fg:x="69" fg:w="1"/><text x="8.7896%" y="687.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::is_empty (1 samples, 0.12%)</title><rect x="8.5396%" y="661" width="0.1238%" height="15" fill="rgb(233,42,35)" fg:x="69" fg:w="1"/><text x="8.7896%" y="671.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.25%)</title><rect x="12.0050%" y="373" width="0.2475%" height="15" fill="rgb(231,13,6)" fg:x="97" fg:w="2"/><text x="12.2550%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.12%)</title><rect x="14.3564%" y="357" width="0.1238%" height="15" fill="rgb(207,181,40)" fg:x="116" fg:w="1"/><text x="14.6064%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.12%)</title><rect x="14.3564%" y="341" width="0.1238%" height="15" fill="rgb(254,173,49)" fg:x="116" fg:w="1"/><text x="14.6064%" y="351.50"></text></g><g><title>alloc::string::String::new (6 samples, 0.74%)</title><rect x="14.4802%" y="357" width="0.7426%" height="15" fill="rgb(221,1,38)" fg:x="117" fg:w="6"/><text x="14.7302%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (7 samples, 0.87%)</title><rect x="15.2228%" y="357" width="0.8663%" height="15" fill="rgb(206,124,46)" fg:x="123" fg:w="7"/><text x="15.4728%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (7 samples, 0.87%)</title><rect x="15.2228%" y="341" width="0.8663%" height="15" fill="rgb(249,21,11)" fg:x="123" fg:w="7"/><text x="15.4728%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (7 samples, 0.87%)</title><rect x="15.2228%" y="325" width="0.8663%" height="15" fill="rgb(222,201,40)" fg:x="123" fg:w="7"/><text x="15.4728%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (7 samples, 0.87%)</title><rect x="15.2228%" y="309" width="0.8663%" height="15" fill="rgb(235,61,29)" fg:x="123" fg:w="7"/><text x="15.4728%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.74%)</title><rect x="20.1733%" y="325" width="0.7426%" height="15" fill="rgb(219,207,3)" fg:x="163" fg:w="6"/><text x="20.4233%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.74%)</title><rect x="20.1733%" y="309" width="0.7426%" height="15" fill="rgb(222,56,46)" fg:x="163" fg:w="6"/><text x="20.4233%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.74%)</title><rect x="20.1733%" y="293" width="0.7426%" height="15" fill="rgb(239,76,54)" fg:x="163" fg:w="6"/><text x="20.4233%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.12%)</title><rect x="20.7921%" y="277" width="0.1238%" height="15" fill="rgb(231,124,27)" fg:x="168" fg:w="1"/><text x="21.0421%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.12%)</title><rect x="20.7921%" y="261" width="0.1238%" height="15" fill="rgb(249,195,6)" fg:x="168" fg:w="1"/><text x="21.0421%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.12%)</title><rect x="20.7921%" y="245" width="0.1238%" height="15" fill="rgb(237,174,47)" fg:x="168" fg:w="1"/><text x="21.0421%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.12%)</title><rect x="20.7921%" y="229" width="0.1238%" height="15" fill="rgb(206,201,31)" fg:x="168" fg:w="1"/><text x="21.0421%" y="239.50"></text></g><g><title>alloc::string::String::len (6 samples, 0.74%)</title><rect x="20.9158%" y="325" width="0.7426%" height="15" fill="rgb(231,57,52)" fg:x="169" fg:w="6"/><text x="21.1658%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.74%)</title><rect x="20.9158%" y="309" width="0.7426%" height="15" fill="rgb(248,177,22)" fg:x="169" fg:w="6"/><text x="21.1658%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.62%)</title><rect x="21.6584%" y="325" width="0.6188%" height="15" fill="rgb(215,211,37)" fg:x="175" fg:w="5"/><text x="21.9084%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::Guard&gt; (11 samples, 1.36%)</title><rect x="22.2772%" y="325" width="1.3614%" height="15" fill="rgb(241,128,51)" fg:x="180" fg:w="11"/><text x="22.5272%" y="335.50"></text></g><g><title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (10 samples, 1.24%)</title><rect x="22.4010%" y="309" width="1.2376%" height="15" fill="rgb(227,165,31)" fg:x="181" fg:w="10"/><text x="22.6510%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (18 samples, 2.23%)</title><rect x="23.6386%" y="325" width="2.2277%" height="15" fill="rgb(228,167,24)" fg:x="191" fg:w="18"/><text x="23.8886%" y="335.50">c..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (18 samples, 2.23%)</title><rect x="23.6386%" y="309" width="2.2277%" height="15" fill="rgb(228,143,12)" fg:x="191" fg:w="18"/><text x="23.8886%" y="319.50">c..</text></g><g><title>core::str::converts::from_utf8 (96 samples, 11.88%)</title><rect x="25.8663%" y="325" width="11.8812%" height="15" fill="rgb(249,149,8)" fg:x="209" fg:w="96"/><text x="26.1163%" y="335.50">core::str::convert..</text></g><g><title>core::str::validations::run_utf8_validation (73 samples, 9.03%)</title><rect x="28.7129%" y="309" width="9.0347%" height="15" fill="rgb(243,35,44)" fg:x="232" fg:w="73"/><text x="28.9629%" y="319.50">core::str::va..</text></g><g><title>core::str::validations::contains_nonascii (1 samples, 0.12%)</title><rect x="37.6238%" y="293" width="0.1238%" height="15" fill="rgb(246,89,9)" fg:x="304" fg:w="1"/><text x="37.8738%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1 samples, 0.12%)</title><rect x="38.8614%" y="293" width="0.1238%" height="15" fill="rgb(233,213,13)" fg:x="314" fg:w="1"/><text x="39.1114%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1 samples, 0.12%)</title><rect x="38.8614%" y="277" width="0.1238%" height="15" fill="rgb(233,141,41)" fg:x="314" fg:w="1"/><text x="39.1114%" y="287.50"></text></g><g><title>core::cmp::min (1 samples, 0.12%)</title><rect x="38.8614%" y="261" width="0.1238%" height="15" fill="rgb(239,167,4)" fg:x="314" fg:w="1"/><text x="39.1114%" y="271.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.12%)</title><rect x="38.8614%" y="245" width="0.1238%" height="15" fill="rgb(209,217,16)" fg:x="314" fg:w="1"/><text x="39.1114%" y="255.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.12%)</title><rect x="38.8614%" y="229" width="0.1238%" height="15" fill="rgb(219,88,35)" fg:x="314" fg:w="1"/><text x="39.1114%" y="239.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (2 samples, 0.25%)</title><rect x="39.1089%" y="261" width="0.2475%" height="15" fill="rgb(220,193,23)" fg:x="316" fg:w="2"/><text x="39.3589%" y="271.50"></text></g><g><title>[unknown] (16 samples, 1.98%)</title><rect x="39.4802%" y="165" width="1.9802%" height="15" fill="rgb(230,90,52)" fg:x="319" fg:w="16"/><text x="39.7302%" y="175.50">[..</text></g><g><title>[unknown] (16 samples, 1.98%)</title><rect x="39.4802%" y="149" width="1.9802%" height="15" fill="rgb(252,106,19)" fg:x="319" fg:w="16"/><text x="39.7302%" y="159.50">[..</text></g><g><title>[unknown] (16 samples, 1.98%)</title><rect x="39.4802%" y="133" width="1.9802%" height="15" fill="rgb(206,74,20)" fg:x="319" fg:w="16"/><text x="39.7302%" y="143.50">[..</text></g><g><title>[unknown] (15 samples, 1.86%)</title><rect x="39.6040%" y="117" width="1.8564%" height="15" fill="rgb(230,138,44)" fg:x="320" fg:w="15"/><text x="39.8540%" y="127.50">[..</text></g><g><title>[unknown] (15 samples, 1.86%)</title><rect x="39.6040%" y="101" width="1.8564%" height="15" fill="rgb(235,182,43)" fg:x="320" fg:w="15"/><text x="39.8540%" y="111.50">[..</text></g><g><title>[unknown] (10 samples, 1.24%)</title><rect x="40.2228%" y="85" width="1.2376%" height="15" fill="rgb(242,16,51)" fg:x="325" fg:w="10"/><text x="40.4728%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.74%)</title><rect x="40.7178%" y="69" width="0.7426%" height="15" fill="rgb(248,9,4)" fg:x="329" fg:w="6"/><text x="40.9678%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.37%)</title><rect x="41.0891%" y="53" width="0.3713%" height="15" fill="rgb(210,31,22)" fg:x="332" fg:w="3"/><text x="41.3391%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="41.2129%" y="37" width="0.2475%" height="15" fill="rgb(239,54,39)" fg:x="333" fg:w="2"/><text x="41.4629%" y="47.50"></text></g><g><title>__GI___libc_read (19 samples, 2.35%)</title><rect x="39.3564%" y="197" width="2.3515%" height="15" fill="rgb(230,99,41)" fg:x="318" fg:w="19"/><text x="39.6064%" y="207.50">_..</text></g><g><title>__GI___libc_read (18 samples, 2.23%)</title><rect x="39.4802%" y="181" width="2.2277%" height="15" fill="rgb(253,106,12)" fg:x="319" fg:w="18"/><text x="39.7302%" y="191.50">_..</text></g><g><title>__GI___pthread_disable_asynccancel (2 samples, 0.25%)</title><rect x="41.4604%" y="165" width="0.2475%" height="15" fill="rgb(213,46,41)" fg:x="335" fg:w="2"/><text x="41.7104%" y="175.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (23 samples, 2.85%)</title><rect x="38.9851%" y="293" width="2.8465%" height="15" fill="rgb(215,133,35)" fg:x="315" fg:w="23"/><text x="39.2351%" y="303.50">&lt;s..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (23 samples, 2.85%)</title><rect x="38.9851%" y="277" width="2.8465%" height="15" fill="rgb(213,28,5)" fg:x="315" fg:w="23"/><text x="39.2351%" y="287.50">st..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (20 samples, 2.48%)</title><rect x="39.3564%" y="261" width="2.4752%" height="15" fill="rgb(215,77,49)" fg:x="318" fg:w="20"/><text x="39.6064%" y="271.50">st..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (20 samples, 2.48%)</title><rect x="39.3564%" y="245" width="2.4752%" height="15" fill="rgb(248,100,22)" fg:x="318" fg:w="20"/><text x="39.6064%" y="255.50">&lt;s..</text></g><g><title>std::sys::unix::fs::File::read_buf (20 samples, 2.48%)</title><rect x="39.3564%" y="229" width="2.4752%" height="15" fill="rgb(208,67,9)" fg:x="318" fg:w="20"/><text x="39.6064%" y="239.50">st..</text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (20 samples, 2.48%)</title><rect x="39.3564%" y="213" width="2.4752%" height="15" fill="rgb(219,133,21)" fg:x="318" fg:w="20"/><text x="39.6064%" y="223.50">st..</text></g><g><title>std::sys::unix::cvt (1 samples, 0.12%)</title><rect x="41.7079%" y="197" width="0.1238%" height="15" fill="rgb(246,46,29)" fg:x="337" fg:w="1"/><text x="41.9579%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (6 samples, 0.74%)</title><rect x="42.4505%" y="213" width="0.7426%" height="15" fill="rgb(246,185,52)" fg:x="343" fg:w="6"/><text x="42.7005%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.25%)</title><rect x="42.9455%" y="197" width="0.2475%" height="15" fill="rgb(252,136,11)" fg:x="347" fg:w="2"/><text x="43.1955%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.87%)</title><rect x="43.6881%" y="181" width="0.8663%" height="15" fill="rgb(219,138,53)" fg:x="353" fg:w="7"/><text x="43.9381%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.25%)</title><rect x="44.5545%" y="181" width="0.2475%" height="15" fill="rgb(211,51,23)" fg:x="360" fg:w="2"/><text x="44.8045%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (3 samples, 0.37%)</title><rect x="44.8020%" y="181" width="0.3713%" height="15" fill="rgb(247,221,28)" fg:x="362" fg:w="3"/><text x="45.0520%" y="191.50"></text></g><g><title>__GI___libc_malloc (35 samples, 4.33%)</title><rect x="46.0396%" y="165" width="4.3317%" height="15" fill="rgb(251,222,45)" fg:x="372" fg:w="35"/><text x="46.2896%" y="175.50">__GI_..</text></g><g><title>tcache_get (12 samples, 1.49%)</title><rect x="48.8861%" y="149" width="1.4851%" height="15" fill="rgb(217,162,53)" fg:x="395" fg:w="12"/><text x="49.1361%" y="159.50"></text></g><g><title>__rdl_alloc (13 samples, 1.61%)</title><rect x="50.3713%" y="165" width="1.6089%" height="15" fill="rgb(229,93,14)" fg:x="407" fg:w="13"/><text x="50.6213%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.99%)</title><rect x="50.9901%" y="149" width="0.9901%" height="15" fill="rgb(209,67,49)" fg:x="412" fg:w="8"/><text x="51.2401%" y="159.50"></text></g><g><title>__rust_alloc (10 samples, 1.24%)</title><rect x="51.9802%" y="165" width="1.2376%" height="15" fill="rgb(213,87,29)" fg:x="420" fg:w="10"/><text x="52.2302%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (72 samples, 8.91%)</title><rect x="45.1733%" y="181" width="8.9109%" height="15" fill="rgb(205,151,52)" fg:x="365" fg:w="72"/><text x="45.4233%" y="191.50">alloc::raw_ve..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (7 samples, 0.87%)</title><rect x="53.2178%" y="165" width="0.8663%" height="15" fill="rgb(253,215,39)" fg:x="430" fg:w="7"/><text x="53.4678%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.12%)</title><rect x="54.0842%" y="181" width="0.1238%" height="15" fill="rgb(221,220,41)" fg:x="437" fg:w="1"/><text x="54.3342%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.12%)</title><rect x="54.0842%" y="165" width="0.1238%" height="15" fill="rgb(218,133,21)" fg:x="437" fg:w="1"/><text x="54.3342%" y="175.50"></text></g><g><title>core::cmp::max (7 samples, 0.87%)</title><rect x="54.2079%" y="181" width="0.8663%" height="15" fill="rgb(221,193,43)" fg:x="438" fg:w="7"/><text x="54.4579%" y="191.50"></text></g><g><title>core::cmp::Ord::max (7 samples, 0.87%)</title><rect x="54.2079%" y="165" width="0.8663%" height="15" fill="rgb(240,128,52)" fg:x="438" fg:w="7"/><text x="54.4579%" y="175.50"></text></g><g><title>core::cmp::max_by (7 samples, 0.87%)</title><rect x="54.2079%" y="149" width="0.8663%" height="15" fill="rgb(253,114,12)" fg:x="438" fg:w="7"/><text x="54.4579%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (108 samples, 13.37%)</title><rect x="41.9554%" y="245" width="13.3663%" height="15" fill="rgb(215,223,47)" fg:x="339" fg:w="108"/><text x="42.2054%" y="255.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (104 samples, 12.87%)</title><rect x="42.4505%" y="229" width="12.8713%" height="15" fill="rgb(248,225,23)" fg:x="343" fg:w="104"/><text x="42.7005%" y="239.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (98 samples, 12.13%)</title><rect x="43.1931%" y="213" width="12.1287%" height="15" fill="rgb(250,108,0)" fg:x="349" fg:w="98"/><text x="43.4431%" y="223.50">alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (95 samples, 11.76%)</title><rect x="43.5644%" y="197" width="11.7574%" height="15" fill="rgb(228,208,7)" fg:x="352" fg:w="95"/><text x="43.8144%" y="207.50">alloc::raw_vec::R..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.25%)</title><rect x="55.0743%" y="181" width="0.2475%" height="15" fill="rgb(244,45,10)" fg:x="445" fg:w="2"/><text x="55.3243%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.25%)</title><rect x="55.0743%" y="165" width="0.2475%" height="15" fill="rgb(207,125,25)" fg:x="445" fg:w="2"/><text x="55.3243%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned (3 samples, 0.37%)</title><rect x="55.3218%" y="229" width="0.3713%" height="15" fill="rgb(210,195,18)" fg:x="447" fg:w="3"/><text x="55.5718%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.87%)</title><rect x="55.3218%" y="245" width="0.8663%" height="15" fill="rgb(249,80,12)" fg:x="447" fg:w="7"/><text x="55.5718%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.50%)</title><rect x="55.6931%" y="229" width="0.4950%" height="15" fill="rgb(221,65,9)" fg:x="450" fg:w="4"/><text x="55.9431%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (118 samples, 14.60%)</title><rect x="41.8317%" y="293" width="14.6040%" height="15" fill="rgb(235,49,36)" fg:x="338" fg:w="118"/><text x="42.0817%" y="303.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (118 samples, 14.60%)</title><rect x="41.8317%" y="277" width="14.6040%" height="15" fill="rgb(225,32,20)" fg:x="338" fg:w="118"/><text x="42.0817%" y="287.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (118 samples, 14.60%)</title><rect x="41.8317%" y="261" width="14.6040%" height="15" fill="rgb(215,141,46)" fg:x="338" fg:w="118"/><text x="42.0817%" y="271.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.25%)</title><rect x="56.1881%" y="245" width="0.2475%" height="15" fill="rgb(250,160,47)" fg:x="454" fg:w="2"/><text x="56.4381%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.25%)</title><rect x="56.1881%" y="229" width="0.2475%" height="15" fill="rgb(216,222,40)" fg:x="454" fg:w="2"/><text x="56.4381%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.37%)</title><rect x="56.4356%" y="293" width="0.3713%" height="15" fill="rgb(234,217,39)" fg:x="456" fg:w="3"/><text x="56.6856%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.37%)</title><rect x="56.4356%" y="277" width="0.3713%" height="15" fill="rgb(207,178,40)" fg:x="456" fg:w="3"/><text x="56.6856%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.37%)</title><rect x="56.4356%" y="261" width="0.3713%" height="15" fill="rgb(221,136,13)" fg:x="456" fg:w="3"/><text x="56.6856%" y="271.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (405 samples, 50.12%)</title><rect x="12.2525%" y="373" width="50.1238%" height="15" fill="rgb(249,199,10)" fg:x="99" fg:w="405"/><text x="12.5025%" y="383.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>std::io::BufRead::read_line (374 samples, 46.29%)</title><rect x="16.0891%" y="357" width="46.2871%" height="15" fill="rgb(249,222,13)" fg:x="130" fg:w="374"/><text x="16.3391%" y="367.50">std::io::BufRead::read_line</text></g><g><title>std::io::append_to_string (374 samples, 46.29%)</title><rect x="16.0891%" y="341" width="46.2871%" height="15" fill="rgb(244,185,38)" fg:x="130" fg:w="374"/><text x="16.3391%" y="351.50">std::io::append_to_string</text></g><g><title>std::io::BufRead::read_line::{{closure}} (199 samples, 24.63%)</title><rect x="37.7475%" y="325" width="24.6287%" height="15" fill="rgb(236,202,9)" fg:x="305" fg:w="199"/><text x="37.9975%" y="335.50">std::io::BufRead::read_line::{{closure}}</text></g><g><title>std::io::read_until (199 samples, 24.63%)</title><rect x="37.7475%" y="309" width="24.6287%" height="15" fill="rgb(250,229,37)" fg:x="305" fg:w="199"/><text x="37.9975%" y="319.50">std::io::read_until</text></g><g><title>std::sys_common::memchr::memchr (45 samples, 5.57%)</title><rect x="56.8069%" y="293" width="5.5693%" height="15" fill="rgb(206,174,23)" fg:x="459" fg:w="45"/><text x="57.0569%" y="303.50">std::sy..</text></g><g><title>std::sys::unix::memchr::memchr (45 samples, 5.57%)</title><rect x="56.8069%" y="277" width="5.5693%" height="15" fill="rgb(211,33,43)" fg:x="459" fg:w="45"/><text x="57.0569%" y="287.50">std::sy..</text></g><g><title>__memchr_avx2 (29 samples, 3.59%)</title><rect x="58.7871%" y="261" width="3.5891%" height="15" fill="rgb(245,58,50)" fg:x="475" fg:w="29"/><text x="59.0371%" y="271.50">__me..</text></g><g><title>_int_free (46 samples, 5.69%)</title><rect x="66.2129%" y="261" width="5.6931%" height="15" fill="rgb(244,68,36)" fg:x="535" fg:w="46"/><text x="66.4629%" y="271.50">_int_fr..</text></g><g><title>tcache_put (3 samples, 0.37%)</title><rect x="71.5347%" y="245" width="0.3713%" height="15" fill="rgb(232,229,15)" fg:x="578" fg:w="3"/><text x="71.7847%" y="255.50"></text></g><g><title>__GI___libc_free (84 samples, 10.40%)</title><rect x="62.3762%" y="277" width="10.3960%" height="15" fill="rgb(254,30,23)" fg:x="504" fg:w="84"/><text x="62.6262%" y="287.50">__GI___libc_free</text></g><g><title>arena_for_chunk (7 samples, 0.87%)</title><rect x="71.9059%" y="261" width="0.8663%" height="15" fill="rgb(235,160,14)" fg:x="581" fg:w="7"/><text x="72.1559%" y="271.50"></text></g><g><title>arena_for_chunk (7 samples, 0.87%)</title><rect x="71.9059%" y="245" width="0.8663%" height="15" fill="rgb(212,155,44)" fg:x="581" fg:w="7"/><text x="72.1559%" y="255.50"></text></g><g><title>heap_for_ptr (1 samples, 0.12%)</title><rect x="72.6485%" y="229" width="0.1238%" height="15" fill="rgb(226,2,50)" fg:x="587" fg:w="1"/><text x="72.8985%" y="239.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.37%)</title><rect x="72.7723%" y="277" width="0.3713%" height="15" fill="rgb(234,177,6)" fg:x="588" fg:w="3"/><text x="73.0223%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.37%)</title><rect x="72.7723%" y="261" width="0.3713%" height="15" fill="rgb(217,24,9)" fg:x="588" fg:w="3"/><text x="73.0223%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (93 samples, 11.51%)</title><rect x="62.3762%" y="309" width="11.5099%" height="15" fill="rgb(220,13,46)" fg:x="504" fg:w="93"/><text x="62.6262%" y="319.50">&lt;alloc::alloc::Gl..</text></g><g><title>alloc::alloc::dealloc (93 samples, 11.51%)</title><rect x="62.3762%" y="293" width="11.5099%" height="15" fill="rgb(239,221,27)" fg:x="504" fg:w="93"/><text x="62.6262%" y="303.50">alloc::alloc::dea..</text></g><g><title>__rust_dealloc (6 samples, 0.74%)</title><rect x="73.1436%" y="277" width="0.7426%" height="15" fill="rgb(222,198,25)" fg:x="591" fg:w="6"/><text x="73.3936%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (95 samples, 11.76%)</title><rect x="62.3762%" y="373" width="11.7574%" height="15" fill="rgb(211,99,13)" fg:x="504" fg:w="95"/><text x="62.6262%" y="383.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (95 samples, 11.76%)</title><rect x="62.3762%" y="357" width="11.7574%" height="15" fill="rgb(232,111,31)" fg:x="504" fg:w="95"/><text x="62.6262%" y="367.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (95 samples, 11.76%)</title><rect x="62.3762%" y="341" width="11.7574%" height="15" fill="rgb(245,82,37)" fg:x="504" fg:w="95"/><text x="62.6262%" y="351.50">core::ptr::drop_i..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 11.76%)</title><rect x="62.3762%" y="325" width="11.7574%" height="15" fill="rgb(227,149,46)" fg:x="504" fg:w="95"/><text x="62.6262%" y="335.50">&lt;alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.25%)</title><rect x="73.8861%" y="309" width="0.2475%" height="15" fill="rgb(218,36,50)" fg:x="597" fg:w="2"/><text x="74.1361%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (4 samples, 0.50%)</title><rect x="74.1337%" y="373" width="0.4950%" height="15" fill="rgb(226,80,48)" fg:x="599" fg:w="4"/><text x="74.3837%" y="383.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (4 samples, 0.50%)</title><rect x="74.1337%" y="357" width="0.4950%" height="15" fill="rgb(238,224,15)" fg:x="599" fg:w="4"/><text x="74.3837%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (4 samples, 0.50%)</title><rect x="74.1337%" y="341" width="0.4950%" height="15" fill="rgb(241,136,10)" fg:x="599" fg:w="4"/><text x="74.3837%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.50%)</title><rect x="74.1337%" y="325" width="0.4950%" height="15" fill="rgb(208,32,45)" fg:x="599" fg:w="4"/><text x="74.3837%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.50%)</title><rect x="74.1337%" y="309" width="0.4950%" height="15" fill="rgb(207,135,9)" fg:x="599" fg:w="4"/><text x="74.3837%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.50%)</title><rect x="74.1337%" y="293" width="0.4950%" height="15" fill="rgb(206,86,44)" fg:x="599" fg:w="4"/><text x="74.3837%" y="303.50"></text></g><g><title>zmem::memory::get_cmd (1 samples, 0.12%)</title><rect x="74.6287%" y="373" width="0.1238%" height="15" fill="rgb(245,177,15)" fg:x="603" fg:w="1"/><text x="74.8787%" y="383.50"></text></g><g><title>std::fs::File::open (1 samples, 0.12%)</title><rect x="74.6287%" y="357" width="0.1238%" height="15" fill="rgb(206,64,50)" fg:x="603" fg:w="1"/><text x="74.8787%" y="367.50"></text></g><g><title>std::fs::OpenOptions::open (1 samples, 0.12%)</title><rect x="74.6287%" y="341" width="0.1238%" height="15" fill="rgb(234,36,40)" fg:x="603" fg:w="1"/><text x="74.8787%" y="351.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.12%)</title><rect x="74.6287%" y="325" width="0.1238%" height="15" fill="rgb(213,64,8)" fg:x="603" fg:w="1"/><text x="74.8787%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.12%)</title><rect x="74.6287%" y="309" width="0.1238%" height="15" fill="rgb(210,75,36)" fg:x="603" fg:w="1"/><text x="74.8787%" y="319.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.12%)</title><rect x="74.6287%" y="293" width="0.1238%" height="15" fill="rgb(229,88,21)" fg:x="603" fg:w="1"/><text x="74.8787%" y="303.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.12%)</title><rect x="74.6287%" y="277" width="0.1238%" height="15" fill="rgb(252,204,47)" fg:x="603" fg:w="1"/><text x="74.8787%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.12%)</title><rect x="74.6287%" y="261" width="0.1238%" height="15" fill="rgb(208,77,27)" fg:x="603" fg:w="1"/><text x="74.8787%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.12%)</title><rect x="74.6287%" y="245" width="0.1238%" height="15" fill="rgb(221,76,26)" fg:x="603" fg:w="1"/><text x="74.8787%" y="255.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.12%)</title><rect x="74.6287%" y="229" width="0.1238%" height="15" fill="rgb(225,139,18)" fg:x="603" fg:w="1"/><text x="74.8787%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.12%)</title><rect x="74.6287%" y="213" width="0.1238%" height="15" fill="rgb(230,137,11)" fg:x="603" fg:w="1"/><text x="74.8787%" y="223.50"></text></g><g><title>__libc_open64 (1 samples, 0.12%)</title><rect x="74.6287%" y="197" width="0.1238%" height="15" fill="rgb(212,28,1)" fg:x="603" fg:w="1"/><text x="74.8787%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="74.6287%" y="181" width="0.1238%" height="15" fill="rgb(248,164,17)" fg:x="603" fg:w="1"/><text x="74.8787%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="74.6287%" y="165" width="0.1238%" height="15" fill="rgb(222,171,42)" fg:x="603" fg:w="1"/><text x="74.8787%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="74.6287%" y="149" width="0.1238%" height="15" fill="rgb(243,84,45)" fg:x="603" fg:w="1"/><text x="74.8787%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="74.6287%" y="133" width="0.1238%" height="15" fill="rgb(252,49,23)" fg:x="603" fg:w="1"/><text x="74.8787%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="74.6287%" y="117" width="0.1238%" height="15" fill="rgb(215,19,7)" fg:x="603" fg:w="1"/><text x="74.8787%" y="127.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.50%)</title><rect x="74.8762%" y="357" width="0.4950%" height="15" fill="rgb(238,81,41)" fg:x="605" fg:w="4"/><text x="75.1262%" y="367.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (15 samples, 1.86%)</title><rect x="78.3416%" y="213" width="1.8564%" height="15" fill="rgb(210,199,37)" fg:x="633" fg:w="15"/><text x="78.5916%" y="223.50">&lt;..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (15 samples, 1.86%)</title><rect x="78.3416%" y="197" width="1.8564%" height="15" fill="rgb(244,192,49)" fg:x="633" fg:w="15"/><text x="78.5916%" y="207.50">&lt;..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (15 samples, 1.86%)</title><rect x="78.3416%" y="181" width="1.8564%" height="15" fill="rgb(226,211,11)" fg:x="633" fg:w="15"/><text x="78.5916%" y="191.50">&lt;..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (15 samples, 1.86%)</title><rect x="78.3416%" y="165" width="1.8564%" height="15" fill="rgb(236,162,54)" fg:x="633" fg:w="15"/><text x="78.5916%" y="175.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (76 samples, 9.41%)</title><rect x="75.3713%" y="309" width="9.4059%" height="15" fill="rgb(220,229,9)" fg:x="609" fg:w="76"/><text x="75.6213%" y="319.50">core::iter::t..</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 8.66%)</title><rect x="76.1139%" y="293" width="8.6634%" height="15" fill="rgb(250,87,22)" fg:x="615" fg:w="70"/><text x="76.3639%" y="303.50">&lt;core::str::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (70 samples, 8.66%)</title><rect x="76.1139%" y="277" width="8.6634%" height="15" fill="rgb(239,43,17)" fg:x="615" fg:w="70"/><text x="76.3639%" y="287.50">core::str::i..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (54 samples, 6.68%)</title><rect x="78.0941%" y="261" width="6.6832%" height="15" fill="rgb(231,177,25)" fg:x="631" fg:w="54"/><text x="78.3441%" y="271.50">&lt;core::st..</text></g><g><title>core::str::pattern::Searcher::next_match (54 samples, 6.68%)</title><rect x="78.0941%" y="245" width="6.6832%" height="15" fill="rgb(219,179,1)" fg:x="631" fg:w="54"/><text x="78.3441%" y="255.50">core::str..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (54 samples, 6.68%)</title><rect x="78.0941%" y="229" width="6.6832%" height="15" fill="rgb(238,219,53)" fg:x="631" fg:w="54"/><text x="78.3441%" y="239.50">&lt;core::st..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 4.58%)</title><rect x="80.1980%" y="213" width="4.5792%" height="15" fill="rgb(232,167,36)" fg:x="648" fg:w="37"/><text x="80.4480%" y="223.50">&lt;core..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 4.46%)</title><rect x="80.3218%" y="197" width="4.4554%" height="15" fill="rgb(244,19,51)" fg:x="649" fg:w="36"/><text x="80.5718%" y="207.50">&lt;core..</text></g><g><title>core::str::validations::next_code_point (36 samples, 4.46%)</title><rect x="80.3218%" y="181" width="4.4554%" height="15" fill="rgb(224,6,22)" fg:x="649" fg:w="36"/><text x="80.5718%" y="191.50">core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 2.10%)</title><rect x="82.6733%" y="165" width="2.1040%" height="15" fill="rgb(224,145,5)" fg:x="668" fg:w="17"/><text x="82.9233%" y="175.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.12%)</title><rect x="84.6535%" y="149" width="0.1238%" height="15" fill="rgb(234,130,49)" fg:x="684" fg:w="1"/><text x="84.9035%" y="159.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 9.65%)</title><rect x="75.3713%" y="357" width="9.6535%" height="15" fill="rgb(254,6,2)" fg:x="609" fg:w="78"/><text x="75.6213%" y="367.50">&lt;core::str::it..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 9.65%)</title><rect x="75.3713%" y="341" width="9.6535%" height="15" fill="rgb(208,96,46)" fg:x="609" fg:w="78"/><text x="75.6213%" y="351.50">&lt;core::iter::a..</text></g><g><title>core::iter::traits::iterator::Iterator::find (78 samples, 9.65%)</title><rect x="75.3713%" y="325" width="9.6535%" height="15" fill="rgb(239,3,39)" fg:x="609" fg:w="78"/><text x="75.6213%" y="335.50">core::iter::tr..</text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (2 samples, 0.25%)</title><rect x="84.7772%" y="309" width="0.2475%" height="15" fill="rgb(233,210,1)" fg:x="685" fg:w="2"/><text x="85.0272%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (2 samples, 0.25%)</title><rect x="85.0248%" y="357" width="0.2475%" height="15" fill="rgb(244,137,37)" fg:x="687" fg:w="2"/><text x="85.2748%" y="367.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (2 samples, 0.25%)</title><rect x="85.0248%" y="341" width="0.2475%" height="15" fill="rgb(240,136,2)" fg:x="687" fg:w="2"/><text x="85.2748%" y="351.50"></text></g><g><title>core::num::from_str_radix (2 samples, 0.25%)</title><rect x="85.0248%" y="325" width="0.2475%" height="15" fill="rgb(239,18,37)" fg:x="687" fg:w="2"/><text x="85.2748%" y="335.50"></text></g><g><title>&lt;u64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.12%)</title><rect x="85.1485%" y="309" width="0.1238%" height="15" fill="rgb(218,185,22)" fg:x="688" fg:w="1"/><text x="85.3985%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter (2 samples, 0.25%)</title><rect x="85.2723%" y="341" width="0.2475%" height="15" fill="rgb(225,218,4)" fg:x="689" fg:w="2"/><text x="85.5223%" y="351.50"></text></g><g><title>core::iter::adapters::filter::Filter&lt;I,P&gt;::new (2 samples, 0.25%)</title><rect x="85.2723%" y="325" width="0.2475%" height="15" fill="rgb(230,182,32)" fg:x="689" fg:w="2"/><text x="85.5223%" y="335.50"></text></g><g><title>zmem::memory::ProcessMemoryStats::update (621 samples, 76.86%)</title><rect x="8.7871%" y="389" width="76.8564%" height="15" fill="rgb(242,56,43)" fg:x="71" fg:w="621"/><text x="9.0371%" y="399.50">zmem::memory::ProcessMemoryStats::update</text></g><g><title>zmem::memory::parse_value (88 samples, 10.89%)</title><rect x="74.7525%" y="373" width="10.8911%" height="15" fill="rgb(233,99,24)" fg:x="604" fg:w="88"/><text x="75.0025%" y="383.50">zmem::memory::pa..</text></g><g><title>core::str::&lt;impl str&gt;::split_whitespace (3 samples, 0.37%)</title><rect x="85.2723%" y="357" width="0.3713%" height="15" fill="rgb(234,209,42)" fg:x="689" fg:w="3"/><text x="85.5223%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (1 samples, 0.12%)</title><rect x="85.5198%" y="341" width="0.1238%" height="15" fill="rgb(227,7,12)" fg:x="691" fg:w="1"/><text x="85.7698%" y="351.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (1 samples, 0.12%)</title><rect x="85.5198%" y="325" width="0.1238%" height="15" fill="rgb(245,203,43)" fg:x="691" fg:w="1"/><text x="85.7698%" y="335.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (1 samples, 0.12%)</title><rect x="85.5198%" y="309" width="0.1238%" height="15" fill="rgb(238,205,33)" fg:x="691" fg:w="1"/><text x="85.7698%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (1 samples, 0.12%)</title><rect x="85.5198%" y="293" width="0.1238%" height="15" fill="rgb(231,56,7)" fg:x="691" fg:w="1"/><text x="85.7698%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (1 samples, 0.12%)</title><rect x="85.5198%" y="277" width="0.1238%" height="15" fill="rgb(244,186,29)" fg:x="691" fg:w="1"/><text x="85.7698%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.12%)</title><rect x="85.5198%" y="261" width="0.1238%" height="15" fill="rgb(234,111,31)" fg:x="691" fg:w="1"/><text x="85.7698%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.12%)</title><rect x="85.5198%" y="245" width="0.1238%" height="15" fill="rgb(241,149,10)" fg:x="691" fg:w="1"/><text x="85.7698%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.12%)</title><rect x="85.5198%" y="229" width="0.1238%" height="15" fill="rgb(249,206,44)" fg:x="691" fg:w="1"/><text x="85.7698%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.12%)</title><rect x="85.5198%" y="213" width="0.1238%" height="15" fill="rgb(251,153,30)" fg:x="691" fg:w="1"/><text x="85.7698%" y="223.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.12%)</title><rect x="85.6436%" y="373" width="0.1238%" height="15" fill="rgb(239,152,38)" fg:x="692" fg:w="1"/><text x="85.8936%" y="383.50"></text></g><g><title>std::fs::buffer_capacity_required (1 samples, 0.12%)</title><rect x="85.6436%" y="357" width="0.1238%" height="15" fill="rgb(249,139,47)" fg:x="692" fg:w="1"/><text x="85.8936%" y="367.50"></text></g><g><title>std::fs::File::metadata (1 samples, 0.12%)</title><rect x="85.6436%" y="341" width="0.1238%" height="15" fill="rgb(244,64,35)" fg:x="692" fg:w="1"/><text x="85.8936%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (1 samples, 0.12%)</title><rect x="85.6436%" y="325" width="0.1238%" height="15" fill="rgb(216,46,15)" fg:x="692" fg:w="1"/><text x="85.8936%" y="335.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.12%)</title><rect x="85.6436%" y="309" width="0.1238%" height="15" fill="rgb(250,74,19)" fg:x="692" fg:w="1"/><text x="85.8936%" y="319.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.12%)</title><rect x="85.6436%" y="293" width="0.1238%" height="15" fill="rgb(249,42,33)" fg:x="692" fg:w="1"/><text x="85.8936%" y="303.50"></text></g><g><title>statx (1 samples, 0.12%)</title><rect x="85.6436%" y="277" width="0.1238%" height="15" fill="rgb(242,149,17)" fg:x="692" fg:w="1"/><text x="85.8936%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="85.6436%" y="261" width="0.1238%" height="15" fill="rgb(244,29,21)" fg:x="692" fg:w="1"/><text x="85.8936%" y="271.50"></text></g><g><title>__GI___close (1 samples, 0.12%)</title><rect x="85.7673%" y="373" width="0.1238%" height="15" fill="rgb(220,130,37)" fg:x="693" fg:w="1"/><text x="86.0173%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="85.7673%" y="357" width="0.1238%" height="15" fill="rgb(211,67,2)" fg:x="693" fg:w="1"/><text x="86.0173%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="85.7673%" y="341" width="0.1238%" height="15" fill="rgb(235,68,52)" fg:x="693" fg:w="1"/><text x="86.0173%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="85.7673%" y="325" width="0.1238%" height="15" fill="rgb(246,142,3)" fg:x="693" fg:w="1"/><text x="86.0173%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="85.7673%" y="309" width="0.1238%" height="15" fill="rgb(241,25,7)" fg:x="693" fg:w="1"/><text x="86.0173%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="85.7673%" y="293" width="0.1238%" height="15" fill="rgb(242,119,39)" fg:x="693" fg:w="1"/><text x="86.0173%" y="303.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.12%)</title><rect x="85.8911%" y="309" width="0.1238%" height="15" fill="rgb(241,98,45)" fg:x="694" fg:w="1"/><text x="86.1411%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.12%)</title><rect x="85.8911%" y="293" width="0.1238%" height="15" fill="rgb(254,28,30)" fg:x="694" fg:w="1"/><text x="86.1411%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="85.8911%" y="277" width="0.1238%" height="15" fill="rgb(241,142,54)" fg:x="694" fg:w="1"/><text x="86.1411%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="85.8911%" y="261" width="0.1238%" height="15" fill="rgb(222,85,15)" fg:x="694" fg:w="1"/><text x="86.1411%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.12%)</title><rect x="85.8911%" y="245" width="0.1238%" height="15" fill="rgb(210,85,47)" fg:x="694" fg:w="1"/><text x="86.1411%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="85.8911%" y="229" width="0.1238%" height="15" fill="rgb(224,206,25)" fg:x="694" fg:w="1"/><text x="86.1411%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="85.8911%" y="213" width="0.1238%" height="15" fill="rgb(243,201,19)" fg:x="694" fg:w="1"/><text x="86.1411%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="85.8911%" y="197" width="0.1238%" height="15" fill="rgb(236,59,4)" fg:x="694" fg:w="1"/><text x="86.1411%" y="207.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="85.8911%" y="181" width="0.1238%" height="15" fill="rgb(254,179,45)" fg:x="694" fg:w="1"/><text x="86.1411%" y="191.50"></text></g><g><title>tcache_get (1 samples, 0.12%)</title><rect x="85.8911%" y="165" width="0.1238%" height="15" fill="rgb(226,14,10)" fg:x="694" fg:w="1"/><text x="86.1411%" y="175.50"></text></g><g><title>tokio::runtime::coop::budget (626 samples, 77.48%)</title><rect x="8.6634%" y="693" width="77.4752%" height="15" fill="rgb(244,27,41)" fg:x="70" fg:w="626"/><text x="8.9134%" y="703.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (626 samples, 77.48%)</title><rect x="8.6634%" y="677" width="77.4752%" height="15" fill="rgb(235,35,32)" fg:x="70" fg:w="626"/><text x="8.9134%" y="687.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (626 samples, 77.48%)</title><rect x="8.6634%" y="661" width="77.4752%" height="15" fill="rgb(218,68,31)" fg:x="70" fg:w="626"/><text x="8.9134%" y="671.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (626 samples, 77.48%)</title><rect x="8.6634%" y="645" width="77.4752%" height="15" fill="rgb(207,120,37)" fg:x="70" fg:w="626"/><text x="8.9134%" y="655.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (626 samples, 77.48%)</title><rect x="8.6634%" y="629" width="77.4752%" height="15" fill="rgb(227,98,0)" fg:x="70" fg:w="626"/><text x="8.9134%" y="639.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (626 samples, 77.48%)</title><rect x="8.6634%" y="613" width="77.4752%" height="15" fill="rgb(207,7,3)" fg:x="70" fg:w="626"/><text x="8.9134%" y="623.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (625 samples, 77.35%)</title><rect x="8.7871%" y="597" width="77.3515%" height="15" fill="rgb(206,98,19)" fg:x="71" fg:w="625"/><text x="9.0371%" y="607.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (625 samples, 77.35%)</title><rect x="8.7871%" y="581" width="77.3515%" height="15" fill="rgb(217,5,26)" fg:x="71" fg:w="625"/><text x="9.0371%" y="591.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (625 samples, 77.35%)</title><rect x="8.7871%" y="565" width="77.3515%" height="15" fill="rgb(235,190,38)" fg:x="71" fg:w="625"/><text x="9.0371%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (625 samples, 77.35%)</title><rect x="8.7871%" y="549" width="77.3515%" height="15" fill="rgb(247,86,24)" fg:x="71" fg:w="625"/><text x="9.0371%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (625 samples, 77.35%)</title><rect x="8.7871%" y="533" width="77.3515%" height="15" fill="rgb(205,101,16)" fg:x="71" fg:w="625"/><text x="9.0371%" y="543.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (625 samples, 77.35%)</title><rect x="8.7871%" y="517" width="77.3515%" height="15" fill="rgb(246,168,33)" fg:x="71" fg:w="625"/><text x="9.0371%" y="527.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (625 samples, 77.35%)</title><rect x="8.7871%" y="501" width="77.3515%" height="15" fill="rgb(231,114,1)" fg:x="71" fg:w="625"/><text x="9.0371%" y="511.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (625 samples, 77.35%)</title><rect x="8.7871%" y="485" width="77.3515%" height="15" fill="rgb(207,184,53)" fg:x="71" fg:w="625"/><text x="9.0371%" y="495.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (625 samples, 77.35%)</title><rect x="8.7871%" y="469" width="77.3515%" height="15" fill="rgb(224,95,51)" fg:x="71" fg:w="625"/><text x="9.0371%" y="479.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (625 samples, 77.35%)</title><rect x="8.7871%" y="453" width="77.3515%" height="15" fill="rgb(212,188,45)" fg:x="71" fg:w="625"/><text x="9.0371%" y="463.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>zmem::memory::Processes::update::{{closure}}::{{closure}} (625 samples, 77.35%)</title><rect x="8.7871%" y="437" width="77.3515%" height="15" fill="rgb(223,154,38)" fg:x="71" fg:w="625"/><text x="9.0371%" y="447.50">zmem::memory::Processes::update::{{closure}}::{{closure}}</text></g><g><title>zmem::memory::Process::new (625 samples, 77.35%)</title><rect x="8.7871%" y="421" width="77.3515%" height="15" fill="rgb(251,22,52)" fg:x="71" fg:w="625"/><text x="9.0371%" y="431.50">zmem::memory::Process::new</text></g><g><title>zmem::memory::Process::update (625 samples, 77.35%)</title><rect x="8.7871%" y="405" width="77.3515%" height="15" fill="rgb(229,209,22)" fg:x="71" fg:w="625"/><text x="9.0371%" y="415.50">zmem::memory::Process::update</text></g><g><title>zmem::memory::get_cmd (4 samples, 0.50%)</title><rect x="85.6436%" y="389" width="0.4950%" height="15" fill="rgb(234,138,34)" fg:x="692" fg:w="4"/><text x="85.8936%" y="399.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.25%)</title><rect x="85.8911%" y="373" width="0.2475%" height="15" fill="rgb(212,95,11)" fg:x="694" fg:w="2"/><text x="86.1411%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (2 samples, 0.25%)</title><rect x="85.8911%" y="357" width="0.2475%" height="15" fill="rgb(240,179,47)" fg:x="694" fg:w="2"/><text x="86.1411%" y="367.50"></text></g><g><title>alloc::fmt::format::{{closure}} (2 samples, 0.25%)</title><rect x="85.8911%" y="341" width="0.2475%" height="15" fill="rgb(240,163,11)" fg:x="694" fg:w="2"/><text x="86.1411%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.25%)</title><rect x="85.8911%" y="325" width="0.2475%" height="15" fill="rgb(236,37,12)" fg:x="694" fg:w="2"/><text x="86.1411%" y="335.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.12%)</title><rect x="86.0149%" y="309" width="0.1238%" height="15" fill="rgb(232,164,16)" fg:x="695" fg:w="1"/><text x="86.2649%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.12%)</title><rect x="86.0149%" y="293" width="0.1238%" height="15" fill="rgb(244,205,15)" fg:x="695" fg:w="1"/><text x="86.2649%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.12%)</title><rect x="86.0149%" y="277" width="0.1238%" height="15" fill="rgb(223,117,47)" fg:x="695" fg:w="1"/><text x="86.2649%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.12%)</title><rect x="86.0149%" y="261" width="0.1238%" height="15" fill="rgb(244,107,35)" fg:x="695" fg:w="1"/><text x="86.2649%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.12%)</title><rect x="86.0149%" y="245" width="0.1238%" height="15" fill="rgb(205,140,8)" fg:x="695" fg:w="1"/><text x="86.2649%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="86.0149%" y="229" width="0.1238%" height="15" fill="rgb(228,84,46)" fg:x="695" fg:w="1"/><text x="86.2649%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.12%)</title><rect x="86.0149%" y="213" width="0.1238%" height="15" fill="rgb(254,188,9)" fg:x="695" fg:w="1"/><text x="86.2649%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.12%)</title><rect x="86.0149%" y="197" width="0.1238%" height="15" fill="rgb(206,112,54)" fg:x="695" fg:w="1"/><text x="86.2649%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.12%)</title><rect x="86.0149%" y="181" width="0.1238%" height="15" fill="rgb(216,84,49)" fg:x="695" fg:w="1"/><text x="86.2649%" y="191.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (2 samples, 0.25%)</title><rect x="86.1386%" y="645" width="0.2475%" height="15" fill="rgb(214,194,35)" fg:x="696" fg:w="2"/><text x="86.3886%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.25%)</title><rect x="86.1386%" y="629" width="0.2475%" height="15" fill="rgb(249,28,3)" fg:x="696" fg:w="2"/><text x="86.3886%" y="639.50"></text></g><g><title>__GI___clock_gettime (2 samples, 0.25%)</title><rect x="86.1386%" y="613" width="0.2475%" height="15" fill="rgb(222,56,52)" fg:x="696" fg:w="2"/><text x="86.3886%" y="623.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.25%)</title><rect x="86.1386%" y="597" width="0.2475%" height="15" fill="rgb(245,217,50)" fg:x="696" fg:w="2"/><text x="86.3886%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="86.1386%" y="581" width="0.2475%" height="15" fill="rgb(213,201,24)" fg:x="696" fg:w="2"/><text x="86.3886%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="86.1386%" y="565" width="0.2475%" height="15" fill="rgb(248,116,28)" fg:x="696" fg:w="2"/><text x="86.3886%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="86.2624%" y="549" width="0.1238%" height="15" fill="rgb(219,72,43)" fg:x="697" fg:w="1"/><text x="86.5124%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="86.2624%" y="533" width="0.1238%" height="15" fill="rgb(209,138,14)" fg:x="697" fg:w="1"/><text x="86.5124%" y="543.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.37%)</title><rect x="86.1386%" y="677" width="0.3713%" height="15" fill="rgb(222,18,33)" fg:x="696" fg:w="3"/><text x="86.3886%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (3 samples, 0.37%)</title><rect x="86.1386%" y="661" width="0.3713%" height="15" fill="rgb(213,199,7)" fg:x="696" fg:w="3"/><text x="86.3886%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.12%)</title><rect x="86.3861%" y="645" width="0.1238%" height="15" fill="rgb(250,110,10)" fg:x="698" fg:w="1"/><text x="86.6361%" y="655.50"></text></g><g><title>parking_lot_core::parking_lot::hash (1 samples, 0.12%)</title><rect x="86.3861%" y="629" width="0.1238%" height="15" fill="rgb(248,123,6)" fg:x="698" fg:w="1"/><text x="86.6361%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.12%)</title><rect x="86.5099%" y="677" width="0.1238%" height="15" fill="rgb(206,91,31)" fg:x="699" fg:w="1"/><text x="86.7599%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (1 samples, 0.12%)</title><rect x="86.5099%" y="661" width="0.1238%" height="15" fill="rgb(211,154,13)" fg:x="699" fg:w="1"/><text x="86.7599%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_from_searching (2 samples, 0.25%)</title><rect x="86.6337%" y="661" width="0.2475%" height="15" fill="rgb(225,148,7)" fg:x="700" fg:w="2"/><text x="86.8837%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::dec_num_searching (2 samples, 0.25%)</title><rect x="86.6337%" y="645" width="0.2475%" height="15" fill="rgb(220,160,43)" fg:x="700" fg:w="2"/><text x="86.8837%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (633 samples, 78.34%)</title><rect x="8.6634%" y="709" width="78.3416%" height="15" fill="rgb(213,52,39)" fg:x="70" fg:w="633"/><text x="8.9134%" y="719.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (7 samples, 0.87%)</title><rect x="86.1386%" y="693" width="0.8663%" height="15" fill="rgb(243,137,7)" fg:x="696" fg:w="7"/><text x="86.3886%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (3 samples, 0.37%)</title><rect x="86.6337%" y="677" width="0.3713%" height="15" fill="rgb(230,79,13)" fg:x="700" fg:w="3"/><text x="86.8837%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (1 samples, 0.12%)</title><rect x="86.8812%" y="661" width="0.1238%" height="15" fill="rgb(247,105,23)" fg:x="702" fg:w="1"/><text x="87.1312%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (1 samples, 0.12%)</title><rect x="86.8812%" y="645" width="0.1238%" height="15" fill="rgb(223,179,41)" fg:x="702" fg:w="1"/><text x="87.1312%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (1 samples, 0.12%)</title><rect x="86.8812%" y="629" width="0.1238%" height="15" fill="rgb(218,9,34)" fg:x="702" fg:w="1"/><text x="87.1312%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.12%)</title><rect x="86.8812%" y="613" width="0.1238%" height="15" fill="rgb(222,106,8)" fg:x="702" fg:w="1"/><text x="87.1312%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.12%)</title><rect x="86.8812%" y="597" width="0.1238%" height="15" fill="rgb(211,220,0)" fg:x="702" fg:w="1"/><text x="87.1312%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (2 samples, 0.25%)</title><rect x="87.0050%" y="709" width="0.2475%" height="15" fill="rgb(229,52,16)" fg:x="703" fg:w="2"/><text x="87.2550%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (2 samples, 0.25%)</title><rect x="87.0050%" y="693" width="0.2475%" height="15" fill="rgb(212,155,18)" fg:x="703" fg:w="2"/><text x="87.2550%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task::{{closure}} (2 samples, 0.25%)</title><rect x="87.0050%" y="677" width="0.2475%" height="15" fill="rgb(242,21,14)" fg:x="703" fg:w="2"/><text x="87.2550%" y="687.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::pop (2 samples, 0.25%)</title><rect x="87.0050%" y="661" width="0.2475%" height="15" fill="rgb(222,19,48)" fg:x="703" fg:w="2"/><text x="87.2550%" y="671.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::is_empty (1 samples, 0.12%)</title><rect x="87.1287%" y="645" width="0.1238%" height="15" fill="rgb(232,45,27)" fg:x="704" fg:w="1"/><text x="87.3787%" y="655.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::len (1 samples, 0.12%)</title><rect x="87.1287%" y="629" width="0.1238%" height="15" fill="rgb(249,103,42)" fg:x="704" fg:w="1"/><text x="87.3787%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.12%)</title><rect x="87.1287%" y="613" width="0.1238%" height="15" fill="rgb(246,81,33)" fg:x="704" fg:w="1"/><text x="87.3787%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.12%)</title><rect x="87.1287%" y="597" width="0.1238%" height="15" fill="rgb(252,33,42)" fg:x="704" fg:w="1"/><text x="87.3787%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.12%)</title><rect x="87.3762%" y="677" width="0.1238%" height="15" fill="rgb(209,212,41)" fg:x="706" fg:w="1"/><text x="87.6262%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.12%)</title><rect x="87.3762%" y="661" width="0.1238%" height="15" fill="rgb(207,154,6)" fg:x="706" fg:w="1"/><text x="87.6262%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.12%)</title><rect x="87.3762%" y="645" width="0.1238%" height="15" fill="rgb(223,64,47)" fg:x="706" fg:w="1"/><text x="87.6262%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (672 samples, 83.17%)</title><rect x="4.4554%" y="981" width="83.1683%" height="15" fill="rgb(211,161,38)" fg:x="36" fg:w="672"/><text x="4.7054%" y="991.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (672 samples, 83.17%)</title><rect x="4.4554%" y="965" width="83.1683%" height="15" fill="rgb(219,138,40)" fg:x="36" fg:w="672"/><text x="4.7054%" y="975.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (671 samples, 83.04%)</title><rect x="4.5792%" y="949" width="83.0446%" height="15" fill="rgb(241,228,46)" fg:x="37" fg:w="671"/><text x="4.8292%" y="959.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (671 samples, 83.04%)</title><rect x="4.5792%" y="933" width="83.0446%" height="15" fill="rgb(223,209,38)" fg:x="37" fg:w="671"/><text x="4.8292%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (671 samples, 83.04%)</title><rect x="4.5792%" y="917" width="83.0446%" height="15" fill="rgb(236,164,45)" fg:x="37" fg:w="671"/><text x="4.8292%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (671 samples, 83.04%)</title><rect x="4.5792%" y="901" width="83.0446%" height="15" fill="rgb(231,15,5)" fg:x="37" fg:w="671"/><text x="4.8292%" y="911.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (671 samples, 83.04%)</title><rect x="4.5792%" y="885" width="83.0446%" height="15" fill="rgb(252,35,15)" fg:x="37" fg:w="671"/><text x="4.8292%" y="895.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (671 samples, 83.04%)</title><rect x="4.5792%" y="869" width="83.0446%" height="15" fill="rgb(248,181,18)" fg:x="37" fg:w="671"/><text x="4.8292%" y="879.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (671 samples, 83.04%)</title><rect x="4.5792%" y="853" width="83.0446%" height="15" fill="rgb(233,39,42)" fg:x="37" fg:w="671"/><text x="4.8292%" y="863.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (671 samples, 83.04%)</title><rect x="4.5792%" y="837" width="83.0446%" height="15" fill="rgb(238,110,33)" fg:x="37" fg:w="671"/><text x="4.8292%" y="847.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (671 samples, 83.04%)</title><rect x="4.5792%" y="821" width="83.0446%" height="15" fill="rgb(233,195,10)" fg:x="37" fg:w="671"/><text x="4.8292%" y="831.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (671 samples, 83.04%)</title><rect x="4.5792%" y="805" width="83.0446%" height="15" fill="rgb(254,105,3)" fg:x="37" fg:w="671"/><text x="4.8292%" y="815.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (671 samples, 83.04%)</title><rect x="4.5792%" y="789" width="83.0446%" height="15" fill="rgb(221,225,9)" fg:x="37" fg:w="671"/><text x="4.8292%" y="799.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (671 samples, 83.04%)</title><rect x="4.5792%" y="773" width="83.0446%" height="15" fill="rgb(224,227,45)" fg:x="37" fg:w="671"/><text x="4.8292%" y="783.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (667 samples, 82.55%)</title><rect x="5.0743%" y="757" width="82.5495%" height="15" fill="rgb(229,198,43)" fg:x="41" fg:w="667"/><text x="5.3243%" y="767.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (665 samples, 82.30%)</title><rect x="5.3218%" y="741" width="82.3020%" height="15" fill="rgb(206,209,35)" fg:x="43" fg:w="665"/><text x="5.5718%" y="751.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (665 samples, 82.30%)</title><rect x="5.3218%" y="725" width="82.3020%" height="15" fill="rgb(245,195,53)" fg:x="43" fg:w="665"/><text x="5.5718%" y="735.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (3 samples, 0.37%)</title><rect x="87.2525%" y="709" width="0.3713%" height="15" fill="rgb(240,92,26)" fg:x="705" fg:w="3"/><text x="87.5025%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (3 samples, 0.37%)</title><rect x="87.2525%" y="693" width="0.3713%" height="15" fill="rgb(207,40,23)" fg:x="705" fg:w="3"/><text x="87.5025%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (1 samples, 0.12%)</title><rect x="87.5000%" y="677" width="0.1238%" height="15" fill="rgb(223,111,35)" fg:x="707" fg:w="1"/><text x="87.7500%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (1 samples, 0.12%)</title><rect x="87.5000%" y="661" width="0.1238%" height="15" fill="rgb(229,147,28)" fg:x="707" fg:w="1"/><text x="87.7500%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.12%)</title><rect x="87.5000%" y="645" width="0.1238%" height="15" fill="rgb(211,29,28)" fg:x="707" fg:w="1"/><text x="87.7500%" y="655.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (689 samples, 85.27%)</title><rect x="2.4752%" y="1045" width="85.2723%" height="15" fill="rgb(228,72,33)" fg:x="20" fg:w="689"/><text x="2.7252%" y="1055.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (673 samples, 83.29%)</title><rect x="4.4554%" y="1029" width="83.2921%" height="15" fill="rgb(205,214,31)" fg:x="36" fg:w="673"/><text x="4.7054%" y="1039.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (673 samples, 83.29%)</title><rect x="4.4554%" y="1013" width="83.2921%" height="15" fill="rgb(224,111,15)" fg:x="36" fg:w="673"/><text x="4.7054%" y="1023.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (673 samples, 83.29%)</title><rect x="4.4554%" y="997" width="83.2921%" height="15" fill="rgb(253,21,26)" fg:x="36" fg:w="673"/><text x="4.7054%" y="1007.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.12%)</title><rect x="87.6238%" y="981" width="0.1238%" height="15" fill="rgb(245,139,43)" fg:x="708" fg:w="1"/><text x="87.8738%" y="991.50"></text></g><g><title>std::panic::catch_unwind (690 samples, 85.40%)</title><rect x="2.4752%" y="1157" width="85.3960%" height="15" fill="rgb(252,170,7)" fg:x="20" fg:w="690"/><text x="2.7252%" y="1167.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (690 samples, 85.40%)</title><rect x="2.4752%" y="1141" width="85.3960%" height="15" fill="rgb(231,118,14)" fg:x="20" fg:w="690"/><text x="2.7252%" y="1151.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (690 samples, 85.40%)</title><rect x="2.4752%" y="1125" width="85.3960%" height="15" fill="rgb(238,83,0)" fg:x="20" fg:w="690"/><text x="2.7252%" y="1135.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (690 samples, 85.40%)</title><rect x="2.4752%" y="1109" width="85.3960%" height="15" fill="rgb(221,39,39)" fg:x="20" fg:w="690"/><text x="2.7252%" y="1119.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (690 samples, 85.40%)</title><rect x="2.4752%" y="1093" width="85.3960%" height="15" fill="rgb(222,119,46)" fg:x="20" fg:w="690"/><text x="2.7252%" y="1103.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (690 samples, 85.40%)</title><rect x="2.4752%" y="1077" width="85.3960%" height="15" fill="rgb(222,165,49)" fg:x="20" fg:w="690"/><text x="2.7252%" y="1087.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (690 samples, 85.40%)</title><rect x="2.4752%" y="1061" width="85.3960%" height="15" fill="rgb(219,113,52)" fg:x="20" fg:w="690"/><text x="2.7252%" y="1071.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>tokio::runtime::handle::Handle::enter (1 samples, 0.12%)</title><rect x="87.7475%" y="1045" width="0.1238%" height="15" fill="rgb(214,7,15)" fg:x="709" fg:w="1"/><text x="87.9975%" y="1055.50"></text></g><g><title>tokio::runtime::context::try_set_current (1 samples, 0.12%)</title><rect x="87.7475%" y="1029" width="0.1238%" height="15" fill="rgb(235,32,4)" fg:x="709" fg:w="1"/><text x="87.9975%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.12%)</title><rect x="87.7475%" y="1013" width="0.1238%" height="15" fill="rgb(238,90,54)" fg:x="709" fg:w="1"/><text x="87.9975%" y="1023.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (1 samples, 0.12%)</title><rect x="87.7475%" y="997" width="0.1238%" height="15" fill="rgb(213,208,19)" fg:x="709" fg:w="1"/><text x="87.9975%" y="1007.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::get (1 samples, 0.12%)</title><rect x="87.7475%" y="981" width="0.1238%" height="15" fill="rgb(233,156,4)" fg:x="709" fg:w="1"/><text x="87.9975%" y="991.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.12%)</title><rect x="87.7475%" y="965" width="0.1238%" height="15" fill="rgb(207,194,5)" fg:x="709" fg:w="1"/><text x="87.9975%" y="975.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::try_register_dtor (1 samples, 0.12%)</title><rect x="87.7475%" y="949" width="0.1238%" height="15" fill="rgb(206,111,30)" fg:x="709" fg:w="1"/><text x="87.9975%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.12%)</title><rect x="87.7475%" y="933" width="0.1238%" height="15" fill="rgb(243,70,54)" fg:x="709" fg:w="1"/><text x="87.9975%" y="943.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="87.8713%" y="1125" width="0.1238%" height="15" fill="rgb(242,28,8)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1135.50"></text></g><g><title>tcache_init (1 samples, 0.12%)</title><rect x="87.8713%" y="1109" width="0.1238%" height="15" fill="rgb(219,106,18)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1119.50"></text></g><g><title>tcache_init (1 samples, 0.12%)</title><rect x="87.8713%" y="1093" width="0.1238%" height="15" fill="rgb(244,222,10)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1103.50"></text></g><g><title>arena_get2 (1 samples, 0.12%)</title><rect x="87.8713%" y="1077" width="0.1238%" height="15" fill="rgb(236,179,52)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1087.50"></text></g><g><title>arena_get2 (1 samples, 0.12%)</title><rect x="87.8713%" y="1061" width="0.1238%" height="15" fill="rgb(213,23,39)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1071.50"></text></g><g><title>_int_new_arena (1 samples, 0.12%)</title><rect x="87.8713%" y="1045" width="0.1238%" height="15" fill="rgb(238,48,10)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1055.50"></text></g><g><title>new_heap (1 samples, 0.12%)</title><rect x="87.8713%" y="1029" width="0.1238%" height="15" fill="rgb(251,196,23)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1039.50"></text></g><g><title>alloc_new_heap (1 samples, 0.12%)</title><rect x="87.8713%" y="1013" width="0.1238%" height="15" fill="rgb(250,152,24)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="87.8713%" y="997" width="0.1238%" height="15" fill="rgb(209,150,17)" fg:x="710" fg:w="1"/><text x="88.1213%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="87.8713%" y="981" width="0.1238%" height="15" fill="rgb(234,202,34)" fg:x="710" fg:w="1"/><text x="88.1213%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="87.8713%" y="965" width="0.1238%" height="15" fill="rgb(253,148,53)" fg:x="710" fg:w="1"/><text x="88.1213%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="87.8713%" y="949" width="0.1238%" height="15" fill="rgb(218,129,16)" fg:x="710" fg:w="1"/><text x="88.1213%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="87.8713%" y="933" width="0.1238%" height="15" fill="rgb(216,85,19)" fg:x="710" fg:w="1"/><text x="88.1213%" y="943.50"></text></g><g><title>std::sys::unix::thread::guard::current (2 samples, 0.25%)</title><rect x="87.8713%" y="1157" width="0.2475%" height="15" fill="rgb(235,228,7)" fg:x="710" fg:w="2"/><text x="88.1213%" y="1167.50"></text></g><g><title>__pthread_getattr_np (2 samples, 0.25%)</title><rect x="87.8713%" y="1141" width="0.2475%" height="15" fill="rgb(245,175,0)" fg:x="710" fg:w="2"/><text x="88.1213%" y="1151.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.12%)</title><rect x="87.9950%" y="1125" width="0.1238%" height="15" fill="rgb(208,168,36)" fg:x="711" fg:w="1"/><text x="88.2450%" y="1135.50"></text></g><g><title>tokio-runtime-w (713 samples, 88.24%)</title><rect x="0.0000%" y="1285" width="88.2426%" height="15" fill="rgb(246,171,24)" fg:x="0" fg:w="713"/><text x="0.2500%" y="1295.50">tokio-runtime-w</text></g><g><title>clone3 (713 samples, 88.24%)</title><rect x="0.0000%" y="1269" width="88.2426%" height="15" fill="rgb(215,142,24)" fg:x="0" fg:w="713"/><text x="0.2500%" y="1279.50">clone3</text></g><g><title>start_thread (713 samples, 88.24%)</title><rect x="0.0000%" y="1253" width="88.2426%" height="15" fill="rgb(250,187,7)" fg:x="0" fg:w="713"/><text x="0.2500%" y="1263.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (693 samples, 85.77%)</title><rect x="2.4752%" y="1237" width="85.7673%" height="15" fill="rgb(228,66,33)" fg:x="20" fg:w="693"/><text x="2.7252%" y="1247.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (693 samples, 85.77%)</title><rect x="2.4752%" y="1221" width="85.7673%" height="15" fill="rgb(234,215,21)" fg:x="20" fg:w="693"/><text x="2.7252%" y="1231.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (693 samples, 85.77%)</title><rect x="2.4752%" y="1205" width="85.7673%" height="15" fill="rgb(222,191,20)" fg:x="20" fg:w="693"/><text x="2.7252%" y="1215.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (693 samples, 85.77%)</title><rect x="2.4752%" y="1189" width="85.7673%" height="15" fill="rgb(245,79,54)" fg:x="20" fg:w="693"/><text x="2.7252%" y="1199.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (693 samples, 85.77%)</title><rect x="2.4752%" y="1173" width="85.7673%" height="15" fill="rgb(240,10,37)" fg:x="20" fg:w="693"/><text x="2.7252%" y="1183.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys_common::thread_info::set (1 samples, 0.12%)</title><rect x="88.1188%" y="1157" width="0.1238%" height="15" fill="rgb(214,192,32)" fg:x="712" fg:w="1"/><text x="88.3688%" y="1167.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.12%)</title><rect x="88.1188%" y="1141" width="0.1238%" height="15" fill="rgb(209,36,54)" fg:x="712" fg:w="1"/><text x="88.3688%" y="1151.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.12%)</title><rect x="88.1188%" y="1125" width="0.1238%" height="15" fill="rgb(220,10,11)" fg:x="712" fg:w="1"/><text x="88.3688%" y="1135.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (1 samples, 0.12%)</title><rect x="88.1188%" y="1109" width="0.1238%" height="15" fill="rgb(221,106,17)" fg:x="712" fg:w="1"/><text x="88.3688%" y="1119.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::register_dtor (1 samples, 0.12%)</title><rect x="88.1188%" y="1093" width="0.1238%" height="15" fill="rgb(251,142,44)" fg:x="712" fg:w="1"/><text x="88.3688%" y="1103.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.12%)</title><rect x="88.1188%" y="1077" width="0.1238%" height="15" fill="rgb(238,13,15)" fg:x="712" fg:w="1"/><text x="88.3688%" y="1087.50"></text></g><g><title>___pthread_mutex_lock (1 samples, 0.12%)</title><rect x="88.1188%" y="1061" width="0.1238%" height="15" fill="rgb(208,107,27)" fg:x="712" fg:w="1"/><text x="88.3688%" y="1071.50"></text></g><g><title>[[heap]] (1 samples, 0.12%)</title><rect x="88.2426%" y="1269" width="0.1238%" height="15" fill="rgb(205,136,37)" fg:x="713" fg:w="1"/><text x="88.4926%" y="1279.50"></text></g><g><title>clone3 (1 samples, 0.12%)</title><rect x="88.2426%" y="1253" width="0.1238%" height="15" fill="rgb(250,205,27)" fg:x="713" fg:w="1"/><text x="88.4926%" y="1263.50"></text></g><g><title>[unknown] (11 samples, 1.36%)</title><rect x="88.3663%" y="1269" width="1.3614%" height="15" fill="rgb(210,80,43)" fg:x="714" fg:w="11"/><text x="88.6163%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.37%)</title><rect x="89.3564%" y="1253" width="0.3713%" height="15" fill="rgb(247,160,36)" fg:x="722" fg:w="3"/><text x="89.6064%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="89.4802%" y="1237" width="0.2475%" height="15" fill="rgb(234,13,49)" fg:x="723" fg:w="2"/><text x="89.7302%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="89.8515%" y="1253" width="0.1238%" height="15" fill="rgb(234,122,0)" fg:x="726" fg:w="1"/><text x="90.1015%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="89.8515%" y="1237" width="0.1238%" height="15" fill="rgb(207,146,38)" fg:x="726" fg:w="1"/><text x="90.1015%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="89.8515%" y="1221" width="0.1238%" height="15" fill="rgb(207,177,25)" fg:x="726" fg:w="1"/><text x="90.1015%" y="1231.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.12%)</title><rect x="89.9752%" y="965" width="0.1238%" height="15" fill="rgb(211,178,42)" fg:x="727" fg:w="1"/><text x="90.2252%" y="975.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.12%)</title><rect x="89.9752%" y="949" width="0.1238%" height="15" fill="rgb(230,69,54)" fg:x="727" fg:w="1"/><text x="90.2252%" y="959.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.12%)</title><rect x="89.9752%" y="933" width="0.1238%" height="15" fill="rgb(214,135,41)" fg:x="727" fg:w="1"/><text x="90.2252%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.12%)</title><rect x="90.0990%" y="901" width="0.1238%" height="15" fill="rgb(237,67,25)" fg:x="728" fg:w="1"/><text x="90.3490%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.12%)</title><rect x="90.0990%" y="885" width="0.1238%" height="15" fill="rgb(222,189,50)" fg:x="728" fg:w="1"/><text x="90.3490%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="90.0990%" y="869" width="0.1238%" height="15" fill="rgb(245,148,34)" fg:x="728" fg:w="1"/><text x="90.3490%" y="879.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="90.0990%" y="853" width="0.1238%" height="15" fill="rgb(222,29,6)" fg:x="728" fg:w="1"/><text x="90.3490%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="90.0990%" y="837" width="0.1238%" height="15" fill="rgb(221,189,43)" fg:x="728" fg:w="1"/><text x="90.3490%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.25%)</title><rect x="90.0990%" y="965" width="0.2475%" height="15" fill="rgb(207,36,27)" fg:x="728" fg:w="2"/><text x="90.3490%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.25%)</title><rect x="90.0990%" y="949" width="0.2475%" height="15" fill="rgb(217,90,24)" fg:x="728" fg:w="2"/><text x="90.3490%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.25%)</title><rect x="90.0990%" y="933" width="0.2475%" height="15" fill="rgb(224,66,35)" fg:x="728" fg:w="2"/><text x="90.3490%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.25%)</title><rect x="90.0990%" y="917" width="0.2475%" height="15" fill="rgb(221,13,50)" fg:x="728" fg:w="2"/><text x="90.3490%" y="927.50"></text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="90.2228%" y="901" width="0.1238%" height="15" fill="rgb(236,68,49)" fg:x="729" fg:w="1"/><text x="90.4728%" y="911.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="90.2228%" y="885" width="0.1238%" height="15" fill="rgb(229,146,28)" fg:x="729" fg:w="1"/><text x="90.4728%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="90.2228%" y="869" width="0.1238%" height="15" fill="rgb(225,31,38)" fg:x="729" fg:w="1"/><text x="90.4728%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="90.2228%" y="853" width="0.1238%" height="15" fill="rgb(250,208,3)" fg:x="729" fg:w="1"/><text x="90.4728%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.12%)</title><rect x="90.2228%" y="837" width="0.1238%" height="15" fill="rgb(246,54,23)" fg:x="729" fg:w="1"/><text x="90.4728%" y="847.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.12%)</title><rect x="90.2228%" y="821" width="0.1238%" height="15" fill="rgb(243,76,11)" fg:x="729" fg:w="1"/><text x="90.4728%" y="831.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1 samples, 0.12%)</title><rect x="90.3465%" y="965" width="0.1238%" height="15" fill="rgb(245,21,50)" fg:x="730" fg:w="1"/><text x="90.5965%" y="975.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.12%)</title><rect x="90.3465%" y="949" width="0.1238%" height="15" fill="rgb(228,9,43)" fg:x="730" fg:w="1"/><text x="90.5965%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::get_mut (1 samples, 0.12%)</title><rect x="90.3465%" y="933" width="0.1238%" height="15" fill="rgb(208,100,47)" fg:x="730" fg:w="1"/><text x="90.5965%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::is_unique (1 samples, 0.12%)</title><rect x="90.3465%" y="917" width="0.1238%" height="15" fill="rgb(232,26,8)" fg:x="730" fg:w="1"/><text x="90.5965%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.12%)</title><rect x="90.3465%" y="901" width="0.1238%" height="15" fill="rgb(216,166,38)" fg:x="730" fg:w="1"/><text x="90.5965%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.12%)</title><rect x="90.3465%" y="885" width="0.1238%" height="15" fill="rgb(251,202,51)" fg:x="730" fg:w="1"/><text x="90.5965%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (6 samples, 0.74%)</title><rect x="89.9752%" y="997" width="0.7426%" height="15" fill="rgb(254,216,34)" fg:x="727" fg:w="6"/><text x="90.2252%" y="1007.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (6 samples, 0.74%)</title><rect x="89.9752%" y="981" width="0.7426%" height="15" fill="rgb(251,32,27)" fg:x="727" fg:w="6"/><text x="90.2252%" y="991.50"></text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (2 samples, 0.25%)</title><rect x="90.4703%" y="965" width="0.2475%" height="15" fill="rgb(208,127,28)" fg:x="731" fg:w="2"/><text x="90.7203%" y="975.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (2 samples, 0.25%)</title><rect x="90.4703%" y="949" width="0.2475%" height="15" fill="rgb(224,137,22)" fg:x="731" fg:w="2"/><text x="90.7203%" y="959.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.12%)</title><rect x="90.5941%" y="933" width="0.1238%" height="15" fill="rgb(254,70,32)" fg:x="732" fg:w="1"/><text x="90.8441%" y="943.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park (1 samples, 0.12%)</title><rect x="90.5941%" y="917" width="0.1238%" height="15" fill="rgb(229,75,37)" fg:x="732" fg:w="1"/><text x="90.8441%" y="927.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (1 samples, 0.12%)</title><rect x="90.5941%" y="901" width="0.1238%" height="15" fill="rgb(252,64,23)" fg:x="732" fg:w="1"/><text x="90.8441%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.12%)</title><rect x="90.5941%" y="885" width="0.1238%" height="15" fill="rgb(232,162,48)" fg:x="732" fg:w="1"/><text x="90.8441%" y="895.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::{{closure}} (1 samples, 0.12%)</title><rect x="90.5941%" y="869" width="0.1238%" height="15" fill="rgb(246,160,12)" fg:x="732" fg:w="1"/><text x="90.8441%" y="879.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park::{{closure}} (1 samples, 0.12%)</title><rect x="90.5941%" y="853" width="0.1238%" height="15" fill="rgb(247,166,0)" fg:x="732" fg:w="1"/><text x="90.8441%" y="863.50"></text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.12%)</title><rect x="90.5941%" y="837" width="0.1238%" height="15" fill="rgb(249,219,21)" fg:x="732" fg:w="1"/><text x="90.8441%" y="847.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (1 samples, 0.12%)</title><rect x="90.5941%" y="821" width="0.1238%" height="15" fill="rgb(205,209,3)" fg:x="732" fg:w="1"/><text x="90.8441%" y="831.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (1 samples, 0.12%)</title><rect x="90.5941%" y="805" width="0.1238%" height="15" fill="rgb(243,44,1)" fg:x="732" fg:w="1"/><text x="90.8441%" y="815.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.12%)</title><rect x="90.5941%" y="789" width="0.1238%" height="15" fill="rgb(206,159,16)" fg:x="732" fg:w="1"/><text x="90.8441%" y="799.50"></text></g><g><title>parking_lot_core::parking_lot::park (1 samples, 0.12%)</title><rect x="90.5941%" y="773" width="0.1238%" height="15" fill="rgb(244,77,30)" fg:x="732" fg:w="1"/><text x="90.8441%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1 samples, 0.12%)</title><rect x="90.5941%" y="757" width="0.1238%" height="15" fill="rgb(218,69,12)" fg:x="732" fg:w="1"/><text x="90.8441%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.12%)</title><rect x="90.5941%" y="741" width="0.1238%" height="15" fill="rgb(212,87,7)" fg:x="732" fg:w="1"/><text x="90.8441%" y="751.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.12%)</title><rect x="90.5941%" y="725" width="0.1238%" height="15" fill="rgb(245,114,25)" fg:x="732" fg:w="1"/><text x="90.8441%" y="735.50"></text></g><g><title>tokio::runtime::coop::Budget::initial (1 samples, 0.12%)</title><rect x="90.7178%" y="917" width="0.1238%" height="15" fill="rgb(210,61,42)" fg:x="733" fg:w="1"/><text x="90.9678%" y="927.50"></text></g><g><title>zmem::memory::Processes::display (1 samples, 0.12%)</title><rect x="90.9653%" y="869" width="0.1238%" height="15" fill="rgb(211,52,33)" fg:x="735" fg:w="1"/><text x="91.2153%" y="879.50"></text></g><g><title>zmem::memory::ProcessMemoryStats::display (1 samples, 0.12%)</title><rect x="90.9653%" y="853" width="0.1238%" height="15" fill="rgb(234,58,33)" fg:x="735" fg:w="1"/><text x="91.2153%" y="863.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.12%)</title><rect x="90.9653%" y="837" width="0.1238%" height="15" fill="rgb(220,115,36)" fg:x="735" fg:w="1"/><text x="91.2153%" y="847.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.12%)</title><rect x="90.9653%" y="821" width="0.1238%" height="15" fill="rgb(243,153,54)" fg:x="735" fg:w="1"/><text x="91.2153%" y="831.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.12%)</title><rect x="90.9653%" y="805" width="0.1238%" height="15" fill="rgb(251,47,18)" fg:x="735" fg:w="1"/><text x="91.2153%" y="815.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.12%)</title><rect x="90.9653%" y="789" width="0.1238%" height="15" fill="rgb(242,102,42)" fg:x="735" fg:w="1"/><text x="91.2153%" y="799.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.12%)</title><rect x="90.9653%" y="773" width="0.1238%" height="15" fill="rgb(234,31,38)" fg:x="735" fg:w="1"/><text x="91.2153%" y="783.50"></text></g><g><title>core::fmt::write (1 samples, 0.12%)</title><rect x="90.9653%" y="757" width="0.1238%" height="15" fill="rgb(221,117,51)" fg:x="735" fg:w="1"/><text x="91.2153%" y="767.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.12%)</title><rect x="90.9653%" y="741" width="0.1238%" height="15" fill="rgb(212,20,18)" fg:x="735" fg:w="1"/><text x="91.2153%" y="751.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.12%)</title><rect x="90.9653%" y="725" width="0.1238%" height="15" fill="rgb(245,133,36)" fg:x="735" fg:w="1"/><text x="91.2153%" y="735.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.12%)</title><rect x="90.9653%" y="709" width="0.1238%" height="15" fill="rgb(212,6,19)" fg:x="735" fg:w="1"/><text x="91.2153%" y="719.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.12%)</title><rect x="90.9653%" y="693" width="0.1238%" height="15" fill="rgb(218,1,36)" fg:x="735" fg:w="1"/><text x="91.2153%" y="703.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.12%)</title><rect x="90.9653%" y="677" width="0.1238%" height="15" fill="rgb(246,84,54)" fg:x="735" fg:w="1"/><text x="91.2153%" y="687.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.12%)</title><rect x="90.9653%" y="661" width="0.1238%" height="15" fill="rgb(242,110,6)" fg:x="735" fg:w="1"/><text x="91.2153%" y="671.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.12%)</title><rect x="90.9653%" y="645" width="0.1238%" height="15" fill="rgb(214,47,5)" fg:x="735" fg:w="1"/><text x="91.2153%" y="655.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.12%)</title><rect x="90.9653%" y="629" width="0.1238%" height="15" fill="rgb(218,159,25)" fg:x="735" fg:w="1"/><text x="91.2153%" y="639.50"></text></g><g><title>__GI___libc_write (1 samples, 0.12%)</title><rect x="90.9653%" y="613" width="0.1238%" height="15" fill="rgb(215,211,28)" fg:x="735" fg:w="1"/><text x="91.2153%" y="623.50"></text></g><g><title>__GI___libc_write (1 samples, 0.12%)</title><rect x="90.9653%" y="597" width="0.1238%" height="15" fill="rgb(238,59,32)" fg:x="735" fg:w="1"/><text x="91.2153%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="90.9653%" y="581" width="0.1238%" height="15" fill="rgb(226,82,3)" fg:x="735" fg:w="1"/><text x="91.2153%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="90.9653%" y="565" width="0.1238%" height="15" fill="rgb(240,164,32)" fg:x="735" fg:w="1"/><text x="91.2153%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="90.9653%" y="549" width="0.1238%" height="15" fill="rgb(232,46,7)" fg:x="735" fg:w="1"/><text x="91.2153%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="90.9653%" y="533" width="0.1238%" height="15" fill="rgb(229,129,53)" fg:x="735" fg:w="1"/><text x="91.2153%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="90.9653%" y="517" width="0.1238%" height="15" fill="rgb(234,188,29)" fg:x="735" fg:w="1"/><text x="91.2153%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="90.9653%" y="501" width="0.1238%" height="15" fill="rgb(246,141,4)" fg:x="735" fg:w="1"/><text x="91.2153%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="90.9653%" y="485" width="0.1238%" height="15" fill="rgb(229,23,39)" fg:x="735" fg:w="1"/><text x="91.2153%" y="495.50"></text></g><g><title>&lt;futures_util::future::try_join_all::TryJoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="91.2129%" y="853" width="0.1238%" height="15" fill="rgb(206,12,3)" fg:x="737" fg:w="1"/><text x="91.4629%" y="863.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="91.2129%" y="837" width="0.1238%" height="15" fill="rgb(252,226,20)" fg:x="737" fg:w="1"/><text x="91.4629%" y="847.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (2 samples, 0.25%)</title><rect x="91.3366%" y="837" width="0.2475%" height="15" fill="rgb(216,123,35)" fg:x="738" fg:w="2"/><text x="91.5866%" y="847.50"></text></g><g><title>std::fs::buffer_capacity_required (2 samples, 0.25%)</title><rect x="91.3366%" y="821" width="0.2475%" height="15" fill="rgb(212,68,40)" fg:x="738" fg:w="2"/><text x="91.5866%" y="831.50"></text></g><g><title>std::fs::File::metadata (2 samples, 0.25%)</title><rect x="91.3366%" y="805" width="0.2475%" height="15" fill="rgb(254,125,32)" fg:x="738" fg:w="2"/><text x="91.5866%" y="815.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (2 samples, 0.25%)</title><rect x="91.3366%" y="789" width="0.2475%" height="15" fill="rgb(253,97,22)" fg:x="738" fg:w="2"/><text x="91.5866%" y="799.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.25%)</title><rect x="91.3366%" y="773" width="0.2475%" height="15" fill="rgb(241,101,14)" fg:x="738" fg:w="2"/><text x="91.5866%" y="783.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.12%)</title><rect x="91.4604%" y="757" width="0.1238%" height="15" fill="rgb(238,103,29)" fg:x="739" fg:w="1"/><text x="91.7104%" y="767.50"></text></g><g><title>statx (1 samples, 0.12%)</title><rect x="91.4604%" y="741" width="0.1238%" height="15" fill="rgb(233,195,47)" fg:x="739" fg:w="1"/><text x="91.7104%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="91.4604%" y="725" width="0.1238%" height="15" fill="rgb(246,218,30)" fg:x="739" fg:w="1"/><text x="91.7104%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="91.4604%" y="709" width="0.1238%" height="15" fill="rgb(219,145,47)" fg:x="739" fg:w="1"/><text x="91.7104%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="91.4604%" y="693" width="0.1238%" height="15" fill="rgb(243,12,26)" fg:x="739" fg:w="1"/><text x="91.7104%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="91.4604%" y="677" width="0.1238%" height="15" fill="rgb(214,87,16)" fg:x="739" fg:w="1"/><text x="91.7104%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="91.4604%" y="661" width="0.1238%" height="15" fill="rgb(208,99,42)" fg:x="739" fg:w="1"/><text x="91.7104%" y="671.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (1 samples, 0.12%)</title><rect x="91.5842%" y="837" width="0.1238%" height="15" fill="rgb(253,99,2)" fg:x="740" fg:w="1"/><text x="91.8342%" y="847.50"></text></g><g><title>&lt;core::str::iter::MatchIndices&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="91.5842%" y="821" width="0.1238%" height="15" fill="rgb(220,168,23)" fg:x="740" fg:w="1"/><text x="91.8342%" y="831.50"></text></g><g><title>core::str::iter::MatchIndicesInternal&lt;P&gt;::next (1 samples, 0.12%)</title><rect x="91.5842%" y="805" width="0.1238%" height="15" fill="rgb(242,38,24)" fg:x="740" fg:w="1"/><text x="91.8342%" y="815.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.12%)</title><rect x="91.5842%" y="789" width="0.1238%" height="15" fill="rgb(225,182,9)" fg:x="740" fg:w="1"/><text x="91.8342%" y="799.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.12%)</title><rect x="91.5842%" y="773" width="0.1238%" height="15" fill="rgb(243,178,37)" fg:x="740" fg:w="1"/><text x="91.8342%" y="783.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.12%)</title><rect x="91.5842%" y="757" width="0.1238%" height="15" fill="rgb(232,139,19)" fg:x="740" fg:w="1"/><text x="91.8342%" y="767.50"></text></g><g><title>__GI___libc_free (1 samples, 0.12%)</title><rect x="91.7079%" y="725" width="0.1238%" height="15" fill="rgb(225,201,24)" fg:x="741" fg:w="1"/><text x="91.9579%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.25%)</title><rect x="91.7079%" y="821" width="0.2475%" height="15" fill="rgb(221,47,46)" fg:x="741" fg:w="2"/><text x="91.9579%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.25%)</title><rect x="91.7079%" y="805" width="0.2475%" height="15" fill="rgb(249,23,13)" fg:x="741" fg:w="2"/><text x="91.9579%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.25%)</title><rect x="91.7079%" y="789" width="0.2475%" height="15" fill="rgb(219,9,5)" fg:x="741" fg:w="2"/><text x="91.9579%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.25%)</title><rect x="91.7079%" y="773" width="0.2475%" height="15" fill="rgb(254,171,16)" fg:x="741" fg:w="2"/><text x="91.9579%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.25%)</title><rect x="91.7079%" y="757" width="0.2475%" height="15" fill="rgb(230,171,20)" fg:x="741" fg:w="2"/><text x="91.9579%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.25%)</title><rect x="91.7079%" y="741" width="0.2475%" height="15" fill="rgb(210,71,41)" fg:x="741" fg:w="2"/><text x="91.9579%" y="751.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.12%)</title><rect x="91.8317%" y="725" width="0.1238%" height="15" fill="rgb(206,173,20)" fg:x="742" fg:w="1"/><text x="92.0817%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.12%)</title><rect x="91.8317%" y="709" width="0.1238%" height="15" fill="rgb(233,88,34)" fg:x="742" fg:w="1"/><text x="92.0817%" y="719.50"></text></g><g><title>tokio::runtime::coop::budget (12 samples, 1.49%)</title><rect x="90.7178%" y="933" width="1.4851%" height="15" fill="rgb(223,209,46)" fg:x="733" fg:w="12"/><text x="90.9678%" y="943.50"></text></g><g><title>tokio::runtime::coop::with_budget (11 samples, 1.36%)</title><rect x="90.8416%" y="917" width="1.3614%" height="15" fill="rgb(250,43,18)" fg:x="734" fg:w="11"/><text x="91.0916%" y="927.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (11 samples, 1.36%)</title><rect x="90.8416%" y="901" width="1.3614%" height="15" fill="rgb(208,13,10)" fg:x="734" fg:w="11"/><text x="91.0916%" y="911.50"></text></g><g><title>zmem::main::{{closure}} (11 samples, 1.36%)</title><rect x="90.8416%" y="885" width="1.3614%" height="15" fill="rgb(212,200,36)" fg:x="734" fg:w="11"/><text x="91.0916%" y="895.50"></text></g><g><title>zmem::memory::Processes::update::{{closure}} (9 samples, 1.11%)</title><rect x="91.0891%" y="869" width="1.1139%" height="15" fill="rgb(225,90,30)" fg:x="736" fg:w="9"/><text x="91.3391%" y="879.50"></text></g><g><title>zmem::memory::get_cmd (7 samples, 0.87%)</title><rect x="91.3366%" y="853" width="0.8663%" height="15" fill="rgb(236,182,39)" fg:x="738" fg:w="7"/><text x="91.5866%" y="863.50"></text></g><g><title>std::fs::File::open (4 samples, 0.50%)</title><rect x="91.7079%" y="837" width="0.4950%" height="15" fill="rgb(212,144,35)" fg:x="741" fg:w="4"/><text x="91.9579%" y="847.50"></text></g><g><title>std::fs::OpenOptions::open (2 samples, 0.25%)</title><rect x="91.9554%" y="821" width="0.2475%" height="15" fill="rgb(228,63,44)" fg:x="743" fg:w="2"/><text x="92.2054%" y="831.50"></text></g><g><title>std::fs::OpenOptions::_open (2 samples, 0.25%)</title><rect x="91.9554%" y="805" width="0.2475%" height="15" fill="rgb(228,109,6)" fg:x="743" fg:w="2"/><text x="92.2054%" y="815.50"></text></g><g><title>std::sys::unix::fs::File::open (2 samples, 0.25%)</title><rect x="91.9554%" y="789" width="0.2475%" height="15" fill="rgb(238,117,24)" fg:x="743" fg:w="2"/><text x="92.2054%" y="799.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.25%)</title><rect x="91.9554%" y="773" width="0.2475%" height="15" fill="rgb(242,26,26)" fg:x="743" fg:w="2"/><text x="92.2054%" y="783.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.25%)</title><rect x="91.9554%" y="757" width="0.2475%" height="15" fill="rgb(221,92,48)" fg:x="743" fg:w="2"/><text x="92.2054%" y="767.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (2 samples, 0.25%)</title><rect x="91.9554%" y="741" width="0.2475%" height="15" fill="rgb(209,209,32)" fg:x="743" fg:w="2"/><text x="92.2054%" y="751.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2 samples, 0.25%)</title><rect x="91.9554%" y="725" width="0.2475%" height="15" fill="rgb(221,70,22)" fg:x="743" fg:w="2"/><text x="92.2054%" y="735.50"></text></g><g><title>std::sys::unix::cvt_r (2 samples, 0.25%)</title><rect x="91.9554%" y="709" width="0.2475%" height="15" fill="rgb(248,145,5)" fg:x="743" fg:w="2"/><text x="92.2054%" y="719.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (2 samples, 0.25%)</title><rect x="91.9554%" y="693" width="0.2475%" height="15" fill="rgb(226,116,26)" fg:x="743" fg:w="2"/><text x="92.2054%" y="703.50"></text></g><g><title>__libc_open64 (2 samples, 0.25%)</title><rect x="91.9554%" y="677" width="0.2475%" height="15" fill="rgb(244,5,17)" fg:x="743" fg:w="2"/><text x="92.2054%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.0792%" y="661" width="0.1238%" height="15" fill="rgb(252,159,33)" fg:x="744" fg:w="1"/><text x="92.3292%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.0792%" y="645" width="0.1238%" height="15" fill="rgb(206,71,0)" fg:x="744" fg:w="1"/><text x="92.3292%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.0792%" y="629" width="0.1238%" height="15" fill="rgb(233,118,54)" fg:x="744" fg:w="1"/><text x="92.3292%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.0792%" y="613" width="0.1238%" height="15" fill="rgb(234,83,48)" fg:x="744" fg:w="1"/><text x="92.3292%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.0792%" y="597" width="0.1238%" height="15" fill="rgb(228,3,54)" fg:x="744" fg:w="1"/><text x="92.3292%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.0792%" y="581" width="0.1238%" height="15" fill="rgb(226,155,13)" fg:x="744" fg:w="1"/><text x="92.3292%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.0792%" y="565" width="0.1238%" height="15" fill="rgb(241,28,37)" fg:x="744" fg:w="1"/><text x="92.3292%" y="575.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park (1 samples, 0.12%)</title><rect x="92.2030%" y="933" width="0.1238%" height="15" fill="rgb(233,93,10)" fg:x="745" fg:w="1"/><text x="92.4530%" y="943.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (1 samples, 0.12%)</title><rect x="92.2030%" y="917" width="0.1238%" height="15" fill="rgb(225,113,19)" fg:x="745" fg:w="1"/><text x="92.4530%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.12%)</title><rect x="92.2030%" y="901" width="0.1238%" height="15" fill="rgb(241,2,18)" fg:x="745" fg:w="1"/><text x="92.4530%" y="911.50"></text></g><g><title>tokio::runtime::park::CURRENT_PARKER::__getit (1 samples, 0.12%)</title><rect x="92.2030%" y="885" width="0.1238%" height="15" fill="rgb(228,207,21)" fg:x="745" fg:w="1"/><text x="92.4530%" y="895.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::get (1 samples, 0.12%)</title><rect x="92.2030%" y="869" width="0.1238%" height="15" fill="rgb(213,211,35)" fg:x="745" fg:w="1"/><text x="92.4530%" y="879.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.12%)</title><rect x="92.2030%" y="853" width="0.1238%" height="15" fill="rgb(209,83,10)" fg:x="745" fg:w="1"/><text x="92.4530%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.12%)</title><rect x="92.2030%" y="837" width="0.1238%" height="15" fill="rgb(209,164,1)" fg:x="745" fg:w="1"/><text x="92.4530%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.12%)</title><rect x="92.4505%" y="869" width="0.1238%" height="15" fill="rgb(213,184,43)" fg:x="747" fg:w="1"/><text x="92.7005%" y="879.50"></text></g><g><title>__libc_start_main_impl (22 samples, 2.72%)</title><rect x="89.9752%" y="1253" width="2.7228%" height="15" fill="rgb(231,61,34)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1263.50">__..</text></g><g><title>__libc_start_call_main (22 samples, 2.72%)</title><rect x="89.9752%" y="1237" width="2.7228%" height="15" fill="rgb(235,75,3)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1247.50">__..</text></g><g><title>main (22 samples, 2.72%)</title><rect x="89.9752%" y="1221" width="2.7228%" height="15" fill="rgb(220,106,47)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1231.50">ma..</text></g><g><title>std::rt::lang_start_internal (22 samples, 2.72%)</title><rect x="89.9752%" y="1205" width="2.7228%" height="15" fill="rgb(210,196,33)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1215.50">st..</text></g><g><title>std::panic::catch_unwind (22 samples, 2.72%)</title><rect x="89.9752%" y="1189" width="2.7228%" height="15" fill="rgb(229,154,42)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1199.50">st..</text></g><g><title>std::panicking::try (22 samples, 2.72%)</title><rect x="89.9752%" y="1173" width="2.7228%" height="15" fill="rgb(228,114,26)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1183.50">st..</text></g><g><title>std::panicking::try::do_call (22 samples, 2.72%)</title><rect x="89.9752%" y="1157" width="2.7228%" height="15" fill="rgb(208,144,1)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1167.50">st..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (22 samples, 2.72%)</title><rect x="89.9752%" y="1141" width="2.7228%" height="15" fill="rgb(239,112,37)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1151.50">st..</text></g><g><title>std::panic::catch_unwind (22 samples, 2.72%)</title><rect x="89.9752%" y="1125" width="2.7228%" height="15" fill="rgb(210,96,50)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1135.50">st..</text></g><g><title>std::panicking::try (22 samples, 2.72%)</title><rect x="89.9752%" y="1109" width="2.7228%" height="15" fill="rgb(222,178,2)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1119.50">st..</text></g><g><title>std::panicking::try::do_call (22 samples, 2.72%)</title><rect x="89.9752%" y="1093" width="2.7228%" height="15" fill="rgb(226,74,18)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1103.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (22 samples, 2.72%)</title><rect x="89.9752%" y="1077" width="2.7228%" height="15" fill="rgb(225,67,54)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1087.50">co..</text></g><g><title>std::rt::lang_start::{{closure}} (22 samples, 2.72%)</title><rect x="89.9752%" y="1061" width="2.7228%" height="15" fill="rgb(251,92,32)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1071.50">st..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 2.72%)</title><rect x="89.9752%" y="1045" width="2.7228%" height="15" fill="rgb(228,149,22)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1055.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 2.72%)</title><rect x="89.9752%" y="1029" width="2.7228%" height="15" fill="rgb(243,54,13)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1039.50">co..</text></g><g><title>zmem::main (22 samples, 2.72%)</title><rect x="89.9752%" y="1013" width="2.7228%" height="15" fill="rgb(243,180,28)" fg:x="727" fg:w="22"/><text x="90.2252%" y="1023.50">zm..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (16 samples, 1.98%)</title><rect x="90.7178%" y="997" width="1.9802%" height="15" fill="rgb(208,167,24)" fg:x="733" fg:w="16"/><text x="90.9678%" y="1007.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (16 samples, 1.98%)</title><rect x="90.7178%" y="981" width="1.9802%" height="15" fill="rgb(245,73,45)" fg:x="733" fg:w="16"/><text x="90.9678%" y="991.50">t..</text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (16 samples, 1.98%)</title><rect x="90.7178%" y="965" width="1.9802%" height="15" fill="rgb(237,203,48)" fg:x="733" fg:w="16"/><text x="90.9678%" y="975.50">t..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (16 samples, 1.98%)</title><rect x="90.7178%" y="949" width="1.9802%" height="15" fill="rgb(211,197,16)" fg:x="733" fg:w="16"/><text x="90.9678%" y="959.50">t..</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 0.37%)</title><rect x="92.3267%" y="933" width="0.3713%" height="15" fill="rgb(243,99,51)" fg:x="746" fg:w="3"/><text x="92.5767%" y="943.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (3 samples, 0.37%)</title><rect x="92.3267%" y="917" width="0.3713%" height="15" fill="rgb(215,123,29)" fg:x="746" fg:w="3"/><text x="92.5767%" y="927.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (3 samples, 0.37%)</title><rect x="92.3267%" y="901" width="0.3713%" height="15" fill="rgb(239,186,37)" fg:x="746" fg:w="3"/><text x="92.5767%" y="911.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.37%)</title><rect x="92.3267%" y="885" width="0.3713%" height="15" fill="rgb(252,136,39)" fg:x="746" fg:w="3"/><text x="92.5767%" y="895.50"></text></g><g><title>parking_lot_core::parking_lot::park (1 samples, 0.12%)</title><rect x="92.5743%" y="869" width="0.1238%" height="15" fill="rgb(223,213,32)" fg:x="748" fg:w="1"/><text x="92.8243%" y="879.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1 samples, 0.12%)</title><rect x="92.5743%" y="853" width="0.1238%" height="15" fill="rgb(233,115,5)" fg:x="748" fg:w="1"/><text x="92.8243%" y="863.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.12%)</title><rect x="92.5743%" y="837" width="0.1238%" height="15" fill="rgb(207,226,44)" fg:x="748" fg:w="1"/><text x="92.8243%" y="847.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.12%)</title><rect x="92.5743%" y="821" width="0.1238%" height="15" fill="rgb(208,126,0)" fg:x="748" fg:w="1"/><text x="92.8243%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (1 samples, 0.12%)</title><rect x="92.5743%" y="805" width="0.1238%" height="15" fill="rgb(244,66,21)" fg:x="748" fg:w="1"/><text x="92.8243%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.12%)</title><rect x="92.5743%" y="789" width="0.1238%" height="15" fill="rgb(222,97,12)" fg:x="748" fg:w="1"/><text x="92.8243%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="92.6980%" y="1237" width="0.2475%" height="15" fill="rgb(219,213,19)" fg:x="749" fg:w="2"/><text x="92.9480%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="92.6980%" y="1221" width="0.2475%" height="15" fill="rgb(252,169,30)" fg:x="749" fg:w="2"/><text x="92.9480%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="92.6980%" y="1205" width="0.2475%" height="15" fill="rgb(206,32,51)" fg:x="749" fg:w="2"/><text x="92.9480%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="92.6980%" y="1189" width="0.2475%" height="15" fill="rgb(250,172,42)" fg:x="749" fg:w="2"/><text x="92.9480%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.8218%" y="1173" width="0.1238%" height="15" fill="rgb(209,34,43)" fg:x="750" fg:w="1"/><text x="93.0718%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.8218%" y="1157" width="0.1238%" height="15" fill="rgb(223,11,35)" fg:x="750" fg:w="1"/><text x="93.0718%" y="1167.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.12%)</title><rect x="92.9455%" y="1205" width="0.1238%" height="15" fill="rgb(251,219,26)" fg:x="751" fg:w="1"/><text x="93.1955%" y="1215.50"></text></g><g><title>_dl_start_final (2 samples, 0.25%)</title><rect x="92.9455%" y="1237" width="0.2475%" height="15" fill="rgb(231,119,3)" fg:x="751" fg:w="2"/><text x="93.1955%" y="1247.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.25%)</title><rect x="92.9455%" y="1221" width="0.2475%" height="15" fill="rgb(216,97,11)" fg:x="751" fg:w="2"/><text x="93.1955%" y="1231.50"></text></g><g><title>dl_main (1 samples, 0.12%)</title><rect x="93.0693%" y="1205" width="0.1238%" height="15" fill="rgb(223,59,9)" fg:x="752" fg:w="1"/><text x="93.3193%" y="1215.50"></text></g><g><title>_dl_receive_error (1 samples, 0.12%)</title><rect x="93.0693%" y="1189" width="0.1238%" height="15" fill="rgb(233,93,31)" fg:x="752" fg:w="1"/><text x="93.3193%" y="1199.50"></text></g><g><title>version_check_doit (1 samples, 0.12%)</title><rect x="93.0693%" y="1173" width="0.1238%" height="15" fill="rgb(239,81,33)" fg:x="752" fg:w="1"/><text x="93.3193%" y="1183.50"></text></g><g><title>_dl_check_all_versions (1 samples, 0.12%)</title><rect x="93.0693%" y="1157" width="0.1238%" height="15" fill="rgb(213,120,34)" fg:x="752" fg:w="1"/><text x="93.3193%" y="1167.50"></text></g><g><title>_dl_check_map_versions (1 samples, 0.12%)</title><rect x="93.0693%" y="1141" width="0.1238%" height="15" fill="rgb(243,49,53)" fg:x="752" fg:w="1"/><text x="93.3193%" y="1151.50"></text></g><g><title>find_needed (1 samples, 0.12%)</title><rect x="93.0693%" y="1125" width="0.1238%" height="15" fill="rgb(247,216,33)" fg:x="752" fg:w="1"/><text x="93.3193%" y="1135.50"></text></g><g><title>_dl_name_match_p (1 samples, 0.12%)</title><rect x="93.0693%" y="1109" width="0.1238%" height="15" fill="rgb(226,26,14)" fg:x="752" fg:w="1"/><text x="93.3193%" y="1119.50"></text></g><g><title>_start (29 samples, 3.59%)</title><rect x="89.7277%" y="1269" width="3.5891%" height="15" fill="rgb(215,49,53)" fg:x="725" fg:w="29"/><text x="89.9777%" y="1279.50">_sta..</text></g><g><title>_dl_start (5 samples, 0.62%)</title><rect x="92.6980%" y="1253" width="0.6188%" height="15" fill="rgb(245,162,40)" fg:x="749" fg:w="5"/><text x="92.9480%" y="1263.50"></text></g><g><title>rtld_timer_start (1 samples, 0.12%)</title><rect x="93.1931%" y="1237" width="0.1238%" height="15" fill="rgb(229,68,17)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1221" width="0.1238%" height="15" fill="rgb(213,182,10)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1205" width="0.1238%" height="15" fill="rgb(245,125,30)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1189" width="0.1238%" height="15" fill="rgb(232,202,2)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1173" width="0.1238%" height="15" fill="rgb(237,140,51)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1157" width="0.1238%" height="15" fill="rgb(236,157,25)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1141" width="0.1238%" height="15" fill="rgb(219,209,0)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1125" width="0.1238%" height="15" fill="rgb(240,116,54)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1109" width="0.1238%" height="15" fill="rgb(216,10,36)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1093" width="0.1238%" height="15" fill="rgb(222,72,44)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.1931%" y="1077" width="0.1238%" height="15" fill="rgb(232,159,9)" fg:x="753" fg:w="1"/><text x="93.4431%" y="1087.50"></text></g><g><title>[unknown] (13 samples, 1.61%)</title><rect x="93.8119%" y="1237" width="1.6089%" height="15" fill="rgb(210,39,32)" fg:x="758" fg:w="13"/><text x="94.0619%" y="1247.50"></text></g><g><title>[unknown] (11 samples, 1.36%)</title><rect x="94.0594%" y="1221" width="1.3614%" height="15" fill="rgb(216,194,45)" fg:x="760" fg:w="11"/><text x="94.3094%" y="1231.50"></text></g><g><title>[unknown] (9 samples, 1.11%)</title><rect x="94.3069%" y="1205" width="1.1139%" height="15" fill="rgb(218,18,35)" fg:x="762" fg:w="9"/><text x="94.5569%" y="1215.50"></text></g><g><title>[unknown] (7 samples, 0.87%)</title><rect x="94.5545%" y="1189" width="0.8663%" height="15" fill="rgb(207,83,51)" fg:x="764" fg:w="7"/><text x="94.8045%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.62%)</title><rect x="94.8020%" y="1173" width="0.6188%" height="15" fill="rgb(225,63,43)" fg:x="766" fg:w="5"/><text x="95.0520%" y="1183.50"></text></g><g><title>__GI___ctype_init (1 samples, 0.12%)</title><rect x="95.4208%" y="1237" width="0.1238%" height="15" fill="rgb(207,57,36)" fg:x="771" fg:w="1"/><text x="95.6708%" y="1247.50"></text></g><g><title>__GI___sigsetjmp (1 samples, 0.12%)</title><rect x="95.5446%" y="1237" width="0.1238%" height="15" fill="rgb(216,99,33)" fg:x="772" fg:w="1"/><text x="95.7946%" y="1247.50"></text></g><g><title>__GI__setjmp (3 samples, 0.37%)</title><rect x="95.6683%" y="1237" width="0.3713%" height="15" fill="rgb(225,42,16)" fg:x="773" fg:w="3"/><text x="95.9183%" y="1247.50"></text></g><g><title>__sigjmp_save (2 samples, 0.25%)</title><rect x="96.0396%" y="1237" width="0.2475%" height="15" fill="rgb(220,201,45)" fg:x="776" fg:w="2"/><text x="96.2896%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.1634%" y="1221" width="0.1238%" height="15" fill="rgb(225,33,4)" fg:x="777" fg:w="1"/><text x="96.4134%" y="1231.50"></text></g><g><title>rseq_register_current_thread (11 samples, 1.36%)</title><rect x="96.2871%" y="1237" width="1.3614%" height="15" fill="rgb(224,33,50)" fg:x="778" fg:w="11"/><text x="96.5371%" y="1247.50"></text></g><g><title>[unknown] (11 samples, 1.36%)</title><rect x="96.2871%" y="1221" width="1.3614%" height="15" fill="rgb(246,198,51)" fg:x="778" fg:w="11"/><text x="96.5371%" y="1231.50"></text></g><g><title>[unknown] (10 samples, 1.24%)</title><rect x="96.4109%" y="1205" width="1.2376%" height="15" fill="rgb(205,22,4)" fg:x="779" fg:w="10"/><text x="96.6609%" y="1215.50"></text></g><g><title>[unknown] (6 samples, 0.74%)</title><rect x="96.9059%" y="1189" width="0.7426%" height="15" fill="rgb(206,3,8)" fg:x="783" fg:w="6"/><text x="97.1559%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="97.4010%" y="1173" width="0.2475%" height="15" fill="rgb(251,23,15)" fg:x="787" fg:w="2"/><text x="97.6510%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.5248%" y="1157" width="0.1238%" height="15" fill="rgb(252,88,28)" fg:x="788" fg:w="1"/><text x="97.7748%" y="1167.50"></text></g><g><title>[libc.so.6] (1 samples, 0.12%)</title><rect x="97.7723%" y="1125" width="0.1238%" height="15" fill="rgb(212,127,14)" fg:x="790" fg:w="1"/><text x="98.0223%" y="1135.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.62%)</title><rect x="97.6485%" y="1221" width="0.6188%" height="15" fill="rgb(247,145,37)" fg:x="789" fg:w="5"/><text x="97.8985%" y="1231.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.62%)</title><rect x="97.6485%" y="1205" width="0.6188%" height="15" fill="rgb(209,117,53)" fg:x="789" fg:w="5"/><text x="97.8985%" y="1215.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5 samples, 0.62%)</title><rect x="97.6485%" y="1189" width="0.6188%" height="15" fill="rgb(212,90,42)" fg:x="789" fg:w="5"/><text x="97.8985%" y="1199.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (4 samples, 0.50%)</title><rect x="97.7723%" y="1173" width="0.4950%" height="15" fill="rgb(218,164,37)" fg:x="790" fg:w="4"/><text x="98.0223%" y="1183.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (4 samples, 0.50%)</title><rect x="97.7723%" y="1157" width="0.4950%" height="15" fill="rgb(246,65,34)" fg:x="790" fg:w="4"/><text x="98.0223%" y="1167.50"></text></g><g><title>__pthread_setname_np (4 samples, 0.50%)</title><rect x="97.7723%" y="1141" width="0.4950%" height="15" fill="rgb(231,100,33)" fg:x="790" fg:w="4"/><text x="98.0223%" y="1151.50"></text></g><g><title>__GI___prctl (3 samples, 0.37%)</title><rect x="97.8960%" y="1125" width="0.3713%" height="15" fill="rgb(228,126,14)" fg:x="791" fg:w="3"/><text x="98.1460%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.37%)</title><rect x="97.8960%" y="1109" width="0.3713%" height="15" fill="rgb(215,173,21)" fg:x="791" fg:w="3"/><text x="98.1460%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.37%)</title><rect x="97.8960%" y="1093" width="0.3713%" height="15" fill="rgb(210,6,40)" fg:x="791" fg:w="3"/><text x="98.1460%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.37%)</title><rect x="97.8960%" y="1077" width="0.3713%" height="15" fill="rgb(212,48,18)" fg:x="791" fg:w="3"/><text x="98.1460%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.37%)</title><rect x="97.8960%" y="1061" width="0.3713%" height="15" fill="rgb(230,214,11)" fg:x="791" fg:w="3"/><text x="98.1460%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="98.0198%" y="1045" width="0.2475%" height="15" fill="rgb(254,105,39)" fg:x="792" fg:w="2"/><text x="98.2698%" y="1055.50"></text></g><g><title>__GI_sigaltstack (4 samples, 0.50%)</title><rect x="98.3911%" y="1189" width="0.4950%" height="15" fill="rgb(245,158,5)" fg:x="795" fg:w="4"/><text x="98.6411%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.50%)</title><rect x="98.3911%" y="1173" width="0.4950%" height="15" fill="rgb(249,208,11)" fg:x="795" fg:w="4"/><text x="98.6411%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.50%)</title><rect x="98.3911%" y="1157" width="0.4950%" height="15" fill="rgb(210,39,28)" fg:x="795" fg:w="4"/><text x="98.6411%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.50%)</title><rect x="98.3911%" y="1141" width="0.4950%" height="15" fill="rgb(211,56,53)" fg:x="795" fg:w="4"/><text x="98.6411%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.7624%" y="1125" width="0.1238%" height="15" fill="rgb(226,201,30)" fg:x="798" fg:w="1"/><text x="99.0124%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.7624%" y="1109" width="0.1238%" height="15" fill="rgb(239,101,34)" fg:x="798" fg:w="1"/><text x="99.0124%" y="1119.50"></text></g><g><title>core::mem::zeroed (1 samples, 0.12%)</title><rect x="98.8861%" y="1189" width="0.1238%" height="15" fill="rgb(226,209,5)" fg:x="799" fg:w="1"/><text x="99.1361%" y="1199.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (1 samples, 0.12%)</title><rect x="98.8861%" y="1173" width="0.1238%" height="15" fill="rgb(250,105,47)" fg:x="799" fg:w="1"/><text x="99.1361%" y="1183.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.12%)</title><rect x="98.8861%" y="1157" width="0.1238%" height="15" fill="rgb(230,72,3)" fg:x="799" fg:w="1"/><text x="99.1361%" y="1167.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.12%)</title><rect x="98.8861%" y="1141" width="0.1238%" height="15" fill="rgb(232,218,39)" fg:x="799" fg:w="1"/><text x="99.1361%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.12%)</title><rect x="99.0099%" y="1189" width="0.1238%" height="15" fill="rgb(248,166,6)" fg:x="800" fg:w="1"/><text x="99.2599%" y="1199.50"></text></g><g><title>all (808 samples, 100%)</title><rect x="0.0000%" y="1301" width="100.0000%" height="15" fill="rgb(247,89,20)" fg:x="0" fg:w="808"/><text x="0.2500%" y="1311.50"></text></g><g><title>zmem (95 samples, 11.76%)</title><rect x="88.2426%" y="1285" width="11.7574%" height="15" fill="rgb(248,130,54)" fg:x="713" fg:w="95"/><text x="88.4926%" y="1295.50">zmem</text></g><g><title>clone3 (54 samples, 6.68%)</title><rect x="93.3168%" y="1269" width="6.6832%" height="15" fill="rgb(234,196,4)" fg:x="754" fg:w="54"/><text x="93.5668%" y="1279.50">clone3</text></g><g><title>start_thread (54 samples, 6.68%)</title><rect x="93.3168%" y="1253" width="6.6832%" height="15" fill="rgb(250,143,31)" fg:x="754" fg:w="54"/><text x="93.5668%" y="1263.50">start_thr..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (19 samples, 2.35%)</title><rect x="97.6485%" y="1237" width="2.3515%" height="15" fill="rgb(211,110,34)" fg:x="789" fg:w="19"/><text x="97.8985%" y="1247.50">s..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (14 samples, 1.73%)</title><rect x="98.2673%" y="1221" width="1.7327%" height="15" fill="rgb(215,124,48)" fg:x="794" fg:w="14"/><text x="98.5173%" y="1231.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (14 samples, 1.73%)</title><rect x="98.2673%" y="1205" width="1.7327%" height="15" fill="rgb(216,46,13)" fg:x="794" fg:w="14"/><text x="98.5173%" y="1215.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (7 samples, 0.87%)</title><rect x="99.1337%" y="1189" width="0.8663%" height="15" fill="rgb(205,184,25)" fg:x="801" fg:w="7"/><text x="99.3837%" y="1199.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (7 samples, 0.87%)</title><rect x="99.1337%" y="1173" width="0.8663%" height="15" fill="rgb(228,1,10)" fg:x="801" fg:w="7"/><text x="99.3837%" y="1183.50"></text></g><g><title>__GI___mmap64 (7 samples, 0.87%)</title><rect x="99.1337%" y="1157" width="0.8663%" height="15" fill="rgb(213,116,27)" fg:x="801" fg:w="7"/><text x="99.3837%" y="1167.50"></text></g><g><title>__GI___mmap64 (6 samples, 0.74%)</title><rect x="99.2574%" y="1141" width="0.7426%" height="15" fill="rgb(241,95,50)" fg:x="802" fg:w="6"/><text x="99.5074%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.74%)</title><rect x="99.2574%" y="1125" width="0.7426%" height="15" fill="rgb(238,48,32)" fg:x="802" fg:w="6"/><text x="99.5074%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.74%)</title><rect x="99.2574%" y="1109" width="0.7426%" height="15" fill="rgb(235,113,49)" fg:x="802" fg:w="6"/><text x="99.5074%" y="1119.50"></text></g><g><title>[unknown] (6 samples, 0.74%)</title><rect x="99.2574%" y="1093" width="0.7426%" height="15" fill="rgb(205,127,43)" fg:x="802" fg:w="6"/><text x="99.5074%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.37%)</title><rect x="99.6287%" y="1077" width="0.3713%" height="15" fill="rgb(250,162,2)" fg:x="805" fg:w="3"/><text x="99.8787%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8762%" y="1061" width="0.1238%" height="15" fill="rgb(220,13,41)" fg:x="807" fg:w="1"/><text x="100.1262%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8762%" y="1045" width="0.1238%" height="15" fill="rgb(249,221,25)" fg:x="807" fg:w="1"/><text x="100.1262%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8762%" y="1029" width="0.1238%" height="15" fill="rgb(215,208,19)" fg:x="807" fg:w="1"/><text x="100.1262%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8762%" y="1013" width="0.1238%" height="15" fill="rgb(236,175,2)" fg:x="807" fg:w="1"/><text x="100.1262%" y="1023.50"></text></g></svg></svg>