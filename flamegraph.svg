<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="962"><g><title>[unknown] (1 samples, 0.10%)</title><rect x="0.0000%" y="693" width="0.1040%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="0.5198%" y="645" width="0.1040%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="1"/><text x="0.7698%" y="655.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::destroy_value (2 samples, 0.21%)</title><rect x="0.6237%" y="645" width="0.2079%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="2"/><text x="0.8737%" y="655.50"></text></g><g><title>&lt;parking_lot_core::parking_lot::ThreadData as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="0.7277%" y="629" width="0.1040%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="1"/><text x="0.9777%" y="639.50"></text></g><g><title>__GI___call_tls_dtors (8 samples, 0.83%)</title><rect x="0.1040%" y="661" width="0.8316%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="8"/><text x="0.3540%" y="671.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit::destroy (1 samples, 0.10%)</title><rect x="0.8316%" y="645" width="0.1040%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="1"/><text x="1.0816%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;core::option::Option&lt;std::sys_common::thread_info::ThreadInfo&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="0.8316%" y="629" width="0.1040%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="1.0816%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;std::sys_common::thread_info::ThreadInfo&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="0.8316%" y="613" width="0.1040%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="1.0816%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::sys_common::thread_info::ThreadInfo&gt;&gt; (1 samples, 0.10%)</title><rect x="0.8316%" y="597" width="0.1040%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="1"/><text x="1.0816%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::thread_info::ThreadInfo&gt; (1 samples, 0.10%)</title><rect x="0.8316%" y="581" width="0.1040%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="1"/><text x="1.0816%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Thread&gt; (1 samples, 0.10%)</title><rect x="0.8316%" y="565" width="0.1040%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="1"/><text x="1.0816%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::sync::Arc&lt;std::thread::Inner&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="0.8316%" y="549" width="0.1040%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="1"/><text x="1.0816%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::Inner&gt;&gt; (1 samples, 0.10%)</title><rect x="0.8316%" y="533" width="0.1040%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="1.0816%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="0.8316%" y="517" width="0.1040%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="1.0816%" y="527.50"></text></g><g><title>__GI___nptl_deallocate_tsd (1 samples, 0.10%)</title><rect x="0.9356%" y="661" width="0.1040%" height="15" fill="rgb(217,207,13)" fg:x="9" fg:w="1"/><text x="1.1856%" y="671.50"></text></g><g><title>__malloc_arena_thread_freeres (5 samples, 0.52%)</title><rect x="1.0395%" y="661" width="0.5198%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="5"/><text x="1.2895%" y="671.50"></text></g><g><title>tcache_thread_shutdown (5 samples, 0.52%)</title><rect x="1.0395%" y="645" width="0.5198%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="5"/><text x="1.2895%" y="655.50"></text></g><g><title>__GI___libc_free (4 samples, 0.42%)</title><rect x="1.1435%" y="629" width="0.4158%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="4"/><text x="1.3935%" y="639.50"></text></g><g><title>_int_free (4 samples, 0.42%)</title><rect x="1.1435%" y="613" width="0.4158%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="4"/><text x="1.3935%" y="623.50"></text></g><g><title>unlink_chunk (1 samples, 0.10%)</title><rect x="1.4553%" y="597" width="0.1040%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="1"/><text x="1.7053%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="1.6632%" y="517" width="0.1040%" height="15" fill="rgb(249,33,26)" fg:x="16" fg:w="1"/><text x="1.9132%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="1.9751%" y="437" width="0.1040%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="1"/><text x="2.2251%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="1.9751%" y="421" width="0.1040%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="1"/><text x="2.2251%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="1.9751%" y="405" width="0.1040%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="1"/><text x="2.2251%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="1.9751%" y="389" width="0.1040%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="1"/><text x="2.2251%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="1.9751%" y="373" width="0.1040%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="1"/><text x="2.2251%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="1.9751%" y="357" width="0.1040%" height="15" fill="rgb(225,111,53)" fg:x="19" fg:w="1"/><text x="2.2251%" y="367.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.62%)</title><rect x="1.5593%" y="565" width="0.6237%" height="15" fill="rgb(238,160,17)" fg:x="15" fg:w="6"/><text x="1.8093%" y="575.50"></text></g><g><title>tcache_init (5 samples, 0.52%)</title><rect x="1.6632%" y="549" width="0.5198%" height="15" fill="rgb(214,148,48)" fg:x="16" fg:w="5"/><text x="1.9132%" y="559.50"></text></g><g><title>tcache_init (5 samples, 0.52%)</title><rect x="1.6632%" y="533" width="0.5198%" height="15" fill="rgb(232,36,49)" fg:x="16" fg:w="5"/><text x="1.9132%" y="543.50"></text></g><g><title>arena_get2 (4 samples, 0.42%)</title><rect x="1.7672%" y="517" width="0.4158%" height="15" fill="rgb(209,103,24)" fg:x="17" fg:w="4"/><text x="2.0172%" y="527.50"></text></g><g><title>arena_get2 (4 samples, 0.42%)</title><rect x="1.7672%" y="501" width="0.4158%" height="15" fill="rgb(229,88,8)" fg:x="17" fg:w="4"/><text x="2.0172%" y="511.50"></text></g><g><title>_int_new_arena (4 samples, 0.42%)</title><rect x="1.7672%" y="485" width="0.4158%" height="15" fill="rgb(213,181,19)" fg:x="17" fg:w="4"/><text x="2.0172%" y="495.50"></text></g><g><title>new_heap (3 samples, 0.31%)</title><rect x="1.8711%" y="469" width="0.3119%" height="15" fill="rgb(254,191,54)" fg:x="18" fg:w="3"/><text x="2.1211%" y="479.50"></text></g><g><title>alloc_new_heap (3 samples, 0.31%)</title><rect x="1.8711%" y="453" width="0.3119%" height="15" fill="rgb(241,83,37)" fg:x="18" fg:w="3"/><text x="2.1211%" y="463.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.10%)</title><rect x="2.0790%" y="437" width="0.1040%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="1"/><text x="2.3290%" y="447.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.10%)</title><rect x="2.0790%" y="421" width="0.1040%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="1"/><text x="2.3290%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.0790%" y="405" width="0.1040%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="1"/><text x="2.3290%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.0790%" y="389" width="0.1040%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="1"/><text x="2.3290%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.0790%" y="373" width="0.1040%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="1"/><text x="2.3290%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.0790%" y="357" width="0.1040%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="1"/><text x="2.3290%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.0790%" y="341" width="0.1040%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="2.3290%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.0790%" y="325" width="0.1040%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="1"/><text x="2.3290%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.0790%" y="309" width="0.1040%" height="15" fill="rgb(213,116,39)" fg:x="20" fg:w="1"/><text x="2.3290%" y="319.50"></text></g><g><title>__GI___pthread_attr_setaffinity_np (1 samples, 0.10%)</title><rect x="2.1830%" y="565" width="0.1040%" height="15" fill="rgb(222,207,29)" fg:x="21" fg:w="1"/><text x="2.4330%" y="575.50"></text></g><g><title>__pthread_attr_extension (1 samples, 0.10%)</title><rect x="2.1830%" y="549" width="0.1040%" height="15" fill="rgb(206,96,30)" fg:x="21" fg:w="1"/><text x="2.4330%" y="559.50"></text></g><g><title>__libc_calloc (1 samples, 0.10%)</title><rect x="2.1830%" y="533" width="0.1040%" height="15" fill="rgb(218,138,4)" fg:x="21" fg:w="1"/><text x="2.4330%" y="543.50"></text></g><g><title>std::sys::unix::thread::guard::current (8 samples, 0.83%)</title><rect x="1.5593%" y="597" width="0.8316%" height="15" fill="rgb(250,191,14)" fg:x="15" fg:w="8"/><text x="1.8093%" y="607.50"></text></g><g><title>__pthread_getattr_np (8 samples, 0.83%)</title><rect x="1.5593%" y="581" width="0.8316%" height="15" fill="rgb(239,60,40)" fg:x="15" fg:w="8"/><text x="1.8093%" y="591.50"></text></g><g><title>__GI___pthread_getaffinity_np (1 samples, 0.10%)</title><rect x="2.2869%" y="565" width="0.1040%" height="15" fill="rgb(206,27,48)" fg:x="22" fg:w="1"/><text x="2.5369%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.2869%" y="549" width="0.1040%" height="15" fill="rgb(225,35,8)" fg:x="22" fg:w="1"/><text x="2.5369%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.2869%" y="533" width="0.1040%" height="15" fill="rgb(250,213,24)" fg:x="22" fg:w="1"/><text x="2.5369%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.7027%" y="549" width="0.1040%" height="15" fill="rgb(247,123,22)" fg:x="26" fg:w="1"/><text x="2.9527%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.7027%" y="533" width="0.1040%" height="15" fill="rgb(231,138,38)" fg:x="26" fg:w="1"/><text x="2.9527%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.7027%" y="517" width="0.1040%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="1"/><text x="2.9527%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.7027%" y="501" width="0.1040%" height="15" fill="rgb(251,118,11)" fg:x="26" fg:w="1"/><text x="2.9527%" y="511.50"></text></g><g><title>__GI_sched_yield (1 samples, 0.10%)</title><rect x="2.8067%" y="549" width="0.1040%" height="15" fill="rgb(217,147,25)" fg:x="27" fg:w="1"/><text x="3.0567%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.8067%" y="533" width="0.1040%" height="15" fill="rgb(247,81,37)" fg:x="27" fg:w="1"/><text x="3.0567%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.8067%" y="517" width="0.1040%" height="15" fill="rgb(209,12,38)" fg:x="27" fg:w="1"/><text x="3.0567%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.8067%" y="501" width="0.1040%" height="15" fill="rgb(227,1,9)" fg:x="27" fg:w="1"/><text x="3.0567%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.8067%" y="485" width="0.1040%" height="15" fill="rgb(248,47,43)" fg:x="27" fg:w="1"/><text x="3.0567%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="2.8067%" y="469" width="0.1040%" height="15" fill="rgb(221,10,30)" fg:x="27" fg:w="1"/><text x="3.0567%" y="479.50"></text></g><g><title>std::sys::common::thread_local::fast_local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.10%)</title><rect x="2.9106%" y="549" width="0.1040%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="1"/><text x="3.1606%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::ThreadData::new (1 samples, 0.10%)</title><rect x="2.9106%" y="533" width="0.1040%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="1"/><text x="3.1606%" y="543.50"></text></g><g><title>parking_lot_core::parking_lot::create_hashtable (1 samples, 0.10%)</title><rect x="2.9106%" y="517" width="0.1040%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="1"/><text x="3.1606%" y="527.50"></text></g><g><title>parking_lot_core::parking_lot::HashTable::new (1 samples, 0.10%)</title><rect x="2.9106%" y="501" width="0.1040%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="1"/><text x="3.1606%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.10%)</title><rect x="2.9106%" y="485" width="0.1040%" height="15" fill="rgb(247,138,52)" fg:x="28" fg:w="1"/><text x="3.1606%" y="495.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (6 samples, 0.62%)</title><rect x="2.4948%" y="565" width="0.6237%" height="15" fill="rgb(213,79,30)" fg:x="24" fg:w="6"/><text x="2.7448%" y="575.50"></text></g><g><title>syscall (1 samples, 0.10%)</title><rect x="3.0146%" y="549" width="0.1040%" height="15" fill="rgb(246,177,23)" fg:x="29" fg:w="1"/><text x="3.2646%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="3.0146%" y="533" width="0.1040%" height="15" fill="rgb(230,62,27)" fg:x="29" fg:w="1"/><text x="3.2646%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Context&gt; (1 samples, 0.10%)</title><rect x="3.3264%" y="517" width="0.1040%" height="15" fill="rgb(216,154,8)" fg:x="32" fg:w="1"/><text x="3.5764%" y="527.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="3.3264%" y="501" width="0.1040%" height="15" fill="rgb(244,35,45)" fg:x="32" fg:w="1"/><text x="3.5764%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="3.3264%" y="485" width="0.1040%" height="15" fill="rgb(251,115,12)" fg:x="32" fg:w="1"/><text x="3.5764%" y="495.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (1 samples, 0.10%)</title><rect x="4.0541%" y="485" width="0.1040%" height="15" fill="rgb(240,54,50)" fg:x="39" fg:w="1"/><text x="4.3041%" y="495.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::shutdown (1 samples, 0.10%)</title><rect x="4.0541%" y="469" width="0.1040%" height="15" fill="rgb(233,84,52)" fg:x="39" fg:w="1"/><text x="4.3041%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.31%)</title><rect x="4.6778%" y="469" width="0.3119%" height="15" fill="rgb(207,117,47)" fg:x="45" fg:w="3"/><text x="4.9278%" y="479.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.21%)</title><rect x="4.7817%" y="453" width="0.2079%" height="15" fill="rgb(249,43,39)" fg:x="46" fg:w="2"/><text x="5.0317%" y="463.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (8 samples, 0.83%)</title><rect x="4.9896%" y="453" width="0.8316%" height="15" fill="rgb(209,38,44)" fg:x="48" fg:w="8"/><text x="5.2396%" y="463.50"></text></g><g><title>syscall (1 samples, 0.10%)</title><rect x="5.7173%" y="437" width="0.1040%" height="15" fill="rgb(236,212,23)" fg:x="55" fg:w="1"/><text x="5.9673%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="5.7173%" y="421" width="0.1040%" height="15" fill="rgb(242,79,21)" fg:x="55" fg:w="1"/><text x="5.9673%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="5.7173%" y="405" width="0.1040%" height="15" fill="rgb(211,96,35)" fg:x="55" fg:w="1"/><text x="5.9673%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="5.7173%" y="389" width="0.1040%" height="15" fill="rgb(253,215,40)" fg:x="55" fg:w="1"/><text x="5.9673%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="5.9252%" y="437" width="0.1040%" height="15" fill="rgb(211,81,21)" fg:x="57" fg:w="1"/><text x="6.1752%" y="447.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.10%)</title><rect x="6.0291%" y="437" width="0.1040%" height="15" fill="rgb(208,190,38)" fg:x="58" fg:w="1"/><text x="6.2791%" y="447.50"></text></g><g><title>&lt;&amp;mio::event::events::Events as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.10%)</title><rect x="6.1331%" y="421" width="0.1040%" height="15" fill="rgb(235,213,38)" fg:x="59" fg:w="1"/><text x="6.3831%" y="431.50"></text></g><g><title>tokio::runtime::io::Driver::turn (2 samples, 0.21%)</title><rect x="6.1331%" y="437" width="0.2079%" height="15" fill="rgb(237,122,38)" fg:x="59" fg:w="2"/><text x="6.3831%" y="447.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.10%)</title><rect x="6.2370%" y="421" width="0.1040%" height="15" fill="rgb(244,218,35)" fg:x="60" fg:w="1"/><text x="6.4870%" y="431.50"></text></g><g><title>epoll_wait (1 samples, 0.10%)</title><rect x="6.2370%" y="405" width="0.1040%" height="15" fill="rgb(240,68,47)" fg:x="60" fg:w="1"/><text x="6.4870%" y="415.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="6.2370%" y="389" width="0.1040%" height="15" fill="rgb(210,16,53)" fg:x="60" fg:w="1"/><text x="6.4870%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (22 samples, 2.29%)</title><rect x="4.1580%" y="485" width="2.2869%" height="15" fill="rgb(235,124,12)" fg:x="40" fg:w="22"/><text x="4.4080%" y="495.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (14 samples, 1.46%)</title><rect x="4.9896%" y="469" width="1.4553%" height="15" fill="rgb(224,169,11)" fg:x="48" fg:w="14"/><text x="5.2396%" y="479.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (6 samples, 0.62%)</title><rect x="5.8212%" y="453" width="0.6237%" height="15" fill="rgb(250,166,2)" fg:x="56" fg:w="6"/><text x="6.0712%" y="463.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.10%)</title><rect x="6.3410%" y="437" width="0.1040%" height="15" fill="rgb(242,216,29)" fg:x="61" fg:w="1"/><text x="6.5910%" y="447.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.21%)</title><rect x="6.4449%" y="469" width="0.2079%" height="15" fill="rgb(230,116,27)" fg:x="62" fg:w="2"/><text x="6.6949%" y="479.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="6.5489%" y="453" width="0.1040%" height="15" fill="rgb(228,99,48)" fg:x="63" fg:w="1"/><text x="6.7989%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (2 samples, 0.21%)</title><rect x="6.6528%" y="469" width="0.2079%" height="15" fill="rgb(253,11,6)" fg:x="64" fg:w="2"/><text x="6.9028%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="7.2765%" y="437" width="0.1040%" height="15" fill="rgb(247,143,39)" fg:x="70" fg:w="1"/><text x="7.5265%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="7.2765%" y="421" width="0.1040%" height="15" fill="rgb(236,97,10)" fg:x="70" fg:w="1"/><text x="7.5265%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="7.2765%" y="405" width="0.1040%" height="15" fill="rgb(233,208,19)" fg:x="70" fg:w="1"/><text x="7.5265%" y="415.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.42%)</title><rect x="7.5884%" y="421" width="0.4158%" height="15" fill="rgb(216,164,2)" fg:x="73" fg:w="4"/><text x="7.8384%" y="431.50"></text></g><g><title>__memcmp_avx2_movbe (11 samples, 1.14%)</title><rect x="12.8898%" y="389" width="1.1435%" height="15" fill="rgb(220,129,5)" fg:x="124" fg:w="11"/><text x="13.1398%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.10%)</title><rect x="15.4886%" y="373" width="0.1040%" height="15" fill="rgb(242,17,10)" fg:x="149" fg:w="1"/><text x="15.7386%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.10%)</title><rect x="15.4886%" y="357" width="0.1040%" height="15" fill="rgb(242,107,0)" fg:x="149" fg:w="1"/><text x="15.7386%" y="367.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (3 samples, 0.31%)</title><rect x="15.5925%" y="373" width="0.3119%" height="15" fill="rgb(251,28,31)" fg:x="150" fg:w="3"/><text x="15.8425%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.10%)</title><rect x="15.8004%" y="357" width="0.1040%" height="15" fill="rgb(233,223,10)" fg:x="152" fg:w="1"/><text x="16.0504%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (18 samples, 1.87%)</title><rect x="15.9044%" y="373" width="1.8711%" height="15" fill="rgb(215,21,27)" fg:x="153" fg:w="18"/><text x="16.1544%" y="383.50">c..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (74 samples, 7.69%)</title><rect x="10.2911%" y="405" width="7.6923%" height="15" fill="rgb(232,23,21)" fg:x="99" fg:w="74"/><text x="10.5411%" y="415.50">&lt;core::str:..</text></g><g><title>core::slice::memchr::memchr_aligned (38 samples, 3.95%)</title><rect x="14.0333%" y="389" width="3.9501%" height="15" fill="rgb(244,5,23)" fg:x="135" fg:w="38"/><text x="14.2833%" y="399.50">core..</text></g><g><title>core::slice::memchr::repeat_byte (2 samples, 0.21%)</title><rect x="17.7755%" y="373" width="0.2079%" height="15" fill="rgb(226,81,46)" fg:x="171" fg:w="2"/><text x="18.0255%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.10%)</title><rect x="18.0873%" y="357" width="0.1040%" height="15" fill="rgb(247,70,30)" fg:x="174" fg:w="1"/><text x="18.3373%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.10%)</title><rect x="18.0873%" y="341" width="0.1040%" height="15" fill="rgb(212,68,19)" fg:x="174" fg:w="1"/><text x="18.3373%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.10%)</title><rect x="18.0873%" y="325" width="0.1040%" height="15" fill="rgb(240,187,13)" fg:x="174" fg:w="1"/><text x="18.3373%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (77 samples, 8.00%)</title><rect x="18.1913%" y="357" width="8.0042%" height="15" fill="rgb(223,113,26)" fg:x="175" fg:w="77"/><text x="18.4413%" y="367.50">core::str::..</text></g><g><title>core::str::validations::run_utf8_validation (76 samples, 7.90%)</title><rect x="18.2952%" y="341" width="7.9002%" height="15" fill="rgb(206,192,2)" fg:x="176" fg:w="76"/><text x="18.5452%" y="351.50">core::str::..</text></g><g><title>[unknown] (207 samples, 21.52%)</title><rect x="29.4179%" y="245" width="21.5177%" height="15" fill="rgb(241,108,4)" fg:x="283" fg:w="207"/><text x="29.6679%" y="255.50">[unknown]</text></g><g><title>[unknown] (204 samples, 21.21%)</title><rect x="29.7297%" y="229" width="21.2058%" height="15" fill="rgb(247,173,49)" fg:x="286" fg:w="204"/><text x="29.9797%" y="239.50">[unknown]</text></g><g><title>[unknown] (198 samples, 20.58%)</title><rect x="30.3534%" y="213" width="20.5821%" height="15" fill="rgb(224,114,35)" fg:x="292" fg:w="198"/><text x="30.6034%" y="223.50">[unknown]</text></g><g><title>[unknown] (190 samples, 19.75%)</title><rect x="31.1850%" y="197" width="19.7505%" height="15" fill="rgb(245,159,27)" fg:x="300" fg:w="190"/><text x="31.4350%" y="207.50">[unknown]</text></g><g><title>[unknown] (160 samples, 16.63%)</title><rect x="34.3035%" y="181" width="16.6320%" height="15" fill="rgb(245,172,44)" fg:x="330" fg:w="160"/><text x="34.5535%" y="191.50">[unknown]</text></g><g><title>[unknown] (148 samples, 15.38%)</title><rect x="35.5509%" y="165" width="15.3846%" height="15" fill="rgb(236,23,11)" fg:x="342" fg:w="148"/><text x="35.8009%" y="175.50">[unknown]</text></g><g><title>[unknown] (130 samples, 13.51%)</title><rect x="37.4220%" y="149" width="13.5135%" height="15" fill="rgb(205,117,38)" fg:x="360" fg:w="130"/><text x="37.6720%" y="159.50">[unknown]</text></g><g><title>[unknown] (87 samples, 9.04%)</title><rect x="41.8919%" y="133" width="9.0437%" height="15" fill="rgb(237,72,25)" fg:x="403" fg:w="87"/><text x="42.1419%" y="143.50">[unknown]</text></g><g><title>[unknown] (50 samples, 5.20%)</title><rect x="45.7380%" y="117" width="5.1975%" height="15" fill="rgb(244,70,9)" fg:x="440" fg:w="50"/><text x="45.9880%" y="127.50">[unkno..</text></g><g><title>[unknown] (3 samples, 0.31%)</title><rect x="50.6237%" y="101" width="0.3119%" height="15" fill="rgb(217,125,39)" fg:x="487" fg:w="3"/><text x="50.8737%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="50.7277%" y="85" width="0.2079%" height="15" fill="rgb(235,36,10)" fg:x="488" fg:w="2"/><text x="50.9777%" y="95.50"></text></g><g><title>__GI___pthread_disable_asynccancel (35 samples, 3.64%)</title><rect x="50.9356%" y="245" width="3.6383%" height="15" fill="rgb(251,123,47)" fg:x="490" fg:w="35"/><text x="51.1856%" y="255.50">__GI..</text></g><g><title>[unknown] (7 samples, 0.73%)</title><rect x="53.8462%" y="229" width="0.7277%" height="15" fill="rgb(221,13,13)" fg:x="518" fg:w="7"/><text x="54.0962%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="54.3659%" y="213" width="0.2079%" height="15" fill="rgb(238,131,9)" fg:x="523" fg:w="2"/><text x="54.6159%" y="223.50"></text></g><g><title>__GI___libc_read (268 samples, 27.86%)</title><rect x="26.8191%" y="277" width="27.8586%" height="15" fill="rgb(211,50,8)" fg:x="258" fg:w="268"/><text x="27.0691%" y="287.50">__GI___libc_read</text></g><g><title>__GI___libc_read (250 samples, 25.99%)</title><rect x="28.6902%" y="261" width="25.9875%" height="15" fill="rgb(245,182,24)" fg:x="276" fg:w="250"/><text x="28.9402%" y="271.50">__GI___libc_read</text></g><g><title>__GI___pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="54.5738%" y="245" width="0.1040%" height="15" fill="rgb(242,14,37)" fg:x="525" fg:w="1"/><text x="54.8238%" y="255.50"></text></g><g><title>std::io::readbuf::BorrowedCursor::advance (9 samples, 0.94%)</title><rect x="54.6778%" y="277" width="0.9356%" height="15" fill="rgb(246,228,12)" fg:x="526" fg:w="9"/><text x="54.9278%" y="287.50"></text></g><g><title>core::cmp::max (9 samples, 0.94%)</title><rect x="54.6778%" y="261" width="0.9356%" height="15" fill="rgb(213,55,15)" fg:x="526" fg:w="9"/><text x="54.9278%" y="271.50"></text></g><g><title>core::cmp::Ord::max (9 samples, 0.94%)</title><rect x="54.6778%" y="245" width="0.9356%" height="15" fill="rgb(209,9,3)" fg:x="526" fg:w="9"/><text x="54.9278%" y="255.50"></text></g><g><title>core::cmp::max_by (9 samples, 0.94%)</title><rect x="54.6778%" y="229" width="0.9356%" height="15" fill="rgb(230,59,30)" fg:x="526" fg:w="9"/><text x="54.9278%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (294 samples, 30.56%)</title><rect x="26.8191%" y="325" width="30.5613%" height="15" fill="rgb(209,121,21)" fg:x="258" fg:w="294"/><text x="27.0691%" y="335.50">&lt;std::fs::File as std::io::Read&gt;::read_buf</text></g><g><title>std::sys::unix::fs::File::read_buf (294 samples, 30.56%)</title><rect x="26.8191%" y="309" width="30.5613%" height="15" fill="rgb(220,109,13)" fg:x="258" fg:w="294"/><text x="27.0691%" y="319.50">std::sys::unix::fs::File::read_buf</text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (294 samples, 30.56%)</title><rect x="26.8191%" y="293" width="30.5613%" height="15" fill="rgb(232,18,1)" fg:x="258" fg:w="294"/><text x="27.0691%" y="303.50">std::sys::unix::fd::FileDesc::read_buf</text></g><g><title>std::sys::unix::cvt (17 samples, 1.77%)</title><rect x="55.6133%" y="277" width="1.7672%" height="15" fill="rgb(215,41,42)" fg:x="535" fg:w="17"/><text x="55.8633%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="57.2765%" y="261" width="0.1040%" height="15" fill="rgb(224,123,36)" fg:x="551" fg:w="1"/><text x="57.5265%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="57.2765%" y="245" width="0.1040%" height="15" fill="rgb(240,125,3)" fg:x="551" fg:w="1"/><text x="57.5265%" y="255.50"></text></g><g><title>__GI___libc_read (3 samples, 0.31%)</title><rect x="57.3805%" y="293" width="0.3119%" height="15" fill="rgb(205,98,50)" fg:x="552" fg:w="3"/><text x="57.6305%" y="303.50"></text></g><g><title>__GI___libc_read (3 samples, 0.31%)</title><rect x="57.3805%" y="277" width="0.3119%" height="15" fill="rgb(205,185,37)" fg:x="552" fg:w="3"/><text x="57.6305%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.31%)</title><rect x="57.3805%" y="261" width="0.3119%" height="15" fill="rgb(238,207,15)" fg:x="552" fg:w="3"/><text x="57.6305%" y="271.50"></text></g><g><title>[unknown] (8 samples, 0.83%)</title><rect x="60.3950%" y="165" width="0.8316%" height="15" fill="rgb(213,199,42)" fg:x="581" fg:w="8"/><text x="60.6450%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.62%)</title><rect x="60.6029%" y="149" width="0.6237%" height="15" fill="rgb(235,201,11)" fg:x="583" fg:w="6"/><text x="60.8529%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.52%)</title><rect x="60.7069%" y="133" width="0.5198%" height="15" fill="rgb(207,46,11)" fg:x="584" fg:w="5"/><text x="60.9569%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.52%)</title><rect x="60.7069%" y="117" width="0.5198%" height="15" fill="rgb(241,35,35)" fg:x="584" fg:w="5"/><text x="60.9569%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.31%)</title><rect x="60.9148%" y="101" width="0.3119%" height="15" fill="rgb(243,32,47)" fg:x="586" fg:w="3"/><text x="61.1648%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="61.1227%" y="85" width="0.1040%" height="15" fill="rgb(247,202,23)" fg:x="588" fg:w="1"/><text x="61.3727%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="61.1227%" y="69" width="0.1040%" height="15" fill="rgb(219,102,11)" fg:x="588" fg:w="1"/><text x="61.3727%" y="79.50"></text></g><g><title>__memcpy_avx_unaligned_erms (63 samples, 6.55%)</title><rect x="61.2266%" y="165" width="6.5489%" height="15" fill="rgb(243,110,44)" fg:x="589" fg:w="63"/><text x="61.4766%" y="175.50">__memcpy_..</text></g><g><title>[unknown] (17 samples, 1.77%)</title><rect x="66.0083%" y="149" width="1.7672%" height="15" fill="rgb(222,74,54)" fg:x="635" fg:w="17"/><text x="66.2583%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.94%)</title><rect x="66.8399%" y="133" width="0.9356%" height="15" fill="rgb(216,99,12)" fg:x="643" fg:w="9"/><text x="67.0899%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.52%)</title><rect x="67.2557%" y="117" width="0.5198%" height="15" fill="rgb(226,22,26)" fg:x="647" fg:w="5"/><text x="67.5057%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.52%)</title><rect x="67.2557%" y="101" width="0.5198%" height="15" fill="rgb(217,163,10)" fg:x="647" fg:w="5"/><text x="67.5057%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.42%)</title><rect x="67.3597%" y="85" width="0.4158%" height="15" fill="rgb(213,25,53)" fg:x="648" fg:w="4"/><text x="67.6097%" y="95.50"></text></g><g><title>heap_for_ptr (1 samples, 0.10%)</title><rect x="67.8794%" y="149" width="0.1040%" height="15" fill="rgb(252,105,26)" fg:x="653" fg:w="1"/><text x="68.1294%" y="159.50"></text></g><g><title>heap_max_size (1 samples, 0.10%)</title><rect x="67.8794%" y="133" width="0.1040%" height="15" fill="rgb(220,39,43)" fg:x="653" fg:w="1"/><text x="68.1294%" y="143.50"></text></g><g><title>_int_free (3 samples, 0.31%)</title><rect x="67.7755%" y="165" width="0.3119%" height="15" fill="rgb(229,68,48)" fg:x="652" fg:w="3"/><text x="68.0255%" y="175.50"></text></g><g><title>heap_trim (1 samples, 0.10%)</title><rect x="67.9834%" y="149" width="0.1040%" height="15" fill="rgb(252,8,32)" fg:x="654" fg:w="1"/><text x="68.2334%" y="159.50"></text></g><g><title>alloc_perturb (2 samples, 0.21%)</title><rect x="68.0873%" y="149" width="0.2079%" height="15" fill="rgb(223,20,43)" fg:x="655" fg:w="2"/><text x="68.3373%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="68.1913%" y="133" width="0.1040%" height="15" fill="rgb(229,81,49)" fg:x="656" fg:w="1"/><text x="68.4413%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.73%)</title><rect x="70.4782%" y="133" width="0.7277%" height="15" fill="rgb(236,28,36)" fg:x="678" fg:w="7"/><text x="70.7282%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.42%)</title><rect x="70.7900%" y="117" width="0.4158%" height="15" fill="rgb(249,185,26)" fg:x="681" fg:w="4"/><text x="71.0400%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.31%)</title><rect x="70.8940%" y="101" width="0.3119%" height="15" fill="rgb(249,174,33)" fg:x="682" fg:w="3"/><text x="71.1440%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="71.1019%" y="85" width="0.1040%" height="15" fill="rgb(233,201,37)" fg:x="684" fg:w="1"/><text x="71.3519%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="71.1019%" y="69" width="0.1040%" height="15" fill="rgb(221,78,26)" fg:x="684" fg:w="1"/><text x="71.3519%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="71.1019%" y="53" width="0.1040%" height="15" fill="rgb(250,127,30)" fg:x="684" fg:w="1"/><text x="71.3519%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="71.5177%" y="117" width="0.1040%" height="15" fill="rgb(230,49,44)" fg:x="688" fg:w="1"/><text x="71.7677%" y="127.50"></text></g><g><title>grow_heap (7 samples, 0.73%)</title><rect x="71.2058%" y="133" width="0.7277%" height="15" fill="rgb(229,67,23)" fg:x="685" fg:w="7"/><text x="71.4558%" y="143.50"></text></g><g><title>__GI_mprotect (3 samples, 0.31%)</title><rect x="71.6216%" y="117" width="0.3119%" height="15" fill="rgb(249,83,47)" fg:x="689" fg:w="3"/><text x="71.8716%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="71.7256%" y="101" width="0.2079%" height="15" fill="rgb(215,43,3)" fg:x="690" fg:w="2"/><text x="71.9756%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="71.8295%" y="85" width="0.1040%" height="15" fill="rgb(238,154,13)" fg:x="691" fg:w="1"/><text x="72.0795%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="71.8295%" y="69" width="0.1040%" height="15" fill="rgb(219,56,2)" fg:x="691" fg:w="1"/><text x="72.0795%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="71.8295%" y="53" width="0.1040%" height="15" fill="rgb(233,0,4)" fg:x="691" fg:w="1"/><text x="72.0795%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="71.8295%" y="37" width="0.1040%" height="15" fill="rgb(235,30,7)" fg:x="691" fg:w="1"/><text x="72.0795%" y="47.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="72.1414%" y="117" width="0.1040%" height="15" fill="rgb(250,79,13)" fg:x="694" fg:w="1"/><text x="72.3914%" y="127.50"></text></g><g><title>_int_realloc (130 samples, 13.51%)</title><rect x="58.8358%" y="181" width="13.5135%" height="15" fill="rgb(211,146,34)" fg:x="566" fg:w="130"/><text x="59.0858%" y="191.50">_int_realloc</text></g><g><title>_int_malloc (41 samples, 4.26%)</title><rect x="68.0873%" y="165" width="4.2620%" height="15" fill="rgb(228,22,38)" fg:x="655" fg:w="41"/><text x="68.3373%" y="175.50">_int_..</text></g><g><title>sysmalloc (39 samples, 4.05%)</title><rect x="68.2952%" y="149" width="4.0541%" height="15" fill="rgb(235,168,5)" fg:x="657" fg:w="39"/><text x="68.5452%" y="159.50">sysm..</text></g><g><title>sysmalloc_mmap (4 samples, 0.42%)</title><rect x="71.9335%" y="133" width="0.4158%" height="15" fill="rgb(221,155,16)" fg:x="692" fg:w="4"/><text x="72.1835%" y="143.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.10%)</title><rect x="72.2453%" y="117" width="0.1040%" height="15" fill="rgb(215,215,53)" fg:x="695" fg:w="1"/><text x="72.4953%" y="127.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.10%)</title><rect x="72.2453%" y="101" width="0.1040%" height="15" fill="rgb(223,4,10)" fg:x="695" fg:w="1"/><text x="72.4953%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="72.2453%" y="85" width="0.1040%" height="15" fill="rgb(234,103,6)" fg:x="695" fg:w="1"/><text x="72.4953%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="72.2453%" y="69" width="0.1040%" height="15" fill="rgb(227,97,0)" fg:x="695" fg:w="1"/><text x="72.4953%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="72.7651%" y="149" width="0.1040%" height="15" fill="rgb(234,150,53)" fg:x="700" fg:w="1"/><text x="73.0151%" y="159.50"></text></g><g><title>arena_for_chunk (6 samples, 0.62%)</title><rect x="72.3493%" y="181" width="0.6237%" height="15" fill="rgb(228,201,54)" fg:x="696" fg:w="6"/><text x="72.5993%" y="191.50"></text></g><g><title>arena_for_chunk (6 samples, 0.62%)</title><rect x="72.3493%" y="165" width="0.6237%" height="15" fill="rgb(222,22,37)" fg:x="696" fg:w="6"/><text x="72.5993%" y="175.50"></text></g><g><title>heap_for_ptr (1 samples, 0.10%)</title><rect x="72.8690%" y="149" width="0.1040%" height="15" fill="rgb(237,53,32)" fg:x="701" fg:w="1"/><text x="73.1190%" y="159.50"></text></g><g><title>mremap_chunk (2 samples, 0.21%)</title><rect x="72.9730%" y="181" width="0.2079%" height="15" fill="rgb(233,25,53)" fg:x="702" fg:w="2"/><text x="73.2230%" y="191.50"></text></g><g><title>__GI___mremap (1 samples, 0.10%)</title><rect x="73.0769%" y="165" width="0.1040%" height="15" fill="rgb(210,40,34)" fg:x="703" fg:w="1"/><text x="73.3269%" y="175.50"></text></g><g><title>__GI___libc_realloc (155 samples, 16.11%)</title><rect x="57.9002%" y="197" width="16.1123%" height="15" fill="rgb(241,220,44)" fg:x="557" fg:w="155"/><text x="58.1502%" y="207.50">__GI___libc_realloc</text></g><g><title>musable (8 samples, 0.83%)</title><rect x="73.1809%" y="181" width="0.8316%" height="15" fill="rgb(235,28,35)" fg:x="704" fg:w="8"/><text x="73.4309%" y="191.50"></text></g><g><title>__rdl_realloc (4 samples, 0.42%)</title><rect x="74.0125%" y="197" width="0.4158%" height="15" fill="rgb(210,56,17)" fg:x="712" fg:w="4"/><text x="74.2625%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (162 samples, 16.84%)</title><rect x="57.9002%" y="245" width="16.8399%" height="15" fill="rgb(224,130,29)" fg:x="557" fg:w="162"/><text x="58.1502%" y="255.50">&lt;alloc::alloc::Global as c..</text></g><g><title>alloc::alloc::Global::grow_impl (162 samples, 16.84%)</title><rect x="57.9002%" y="229" width="16.8399%" height="15" fill="rgb(235,212,8)" fg:x="557" fg:w="162"/><text x="58.1502%" y="239.50">alloc::alloc::Global::grow..</text></g><g><title>alloc::alloc::realloc (162 samples, 16.84%)</title><rect x="57.9002%" y="213" width="16.8399%" height="15" fill="rgb(223,33,50)" fg:x="557" fg:w="162"/><text x="58.1502%" y="223.50">alloc::alloc::realloc</text></g><g><title>__rust_realloc (3 samples, 0.31%)</title><rect x="74.4283%" y="197" width="0.3119%" height="15" fill="rgb(219,149,13)" fg:x="716" fg:w="3"/><text x="74.6783%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="74.6362%" y="181" width="0.1040%" height="15" fill="rgb(250,156,29)" fg:x="718" fg:w="1"/><text x="74.8862%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="74.6362%" y="165" width="0.1040%" height="15" fill="rgb(216,193,19)" fg:x="718" fg:w="1"/><text x="74.8862%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="74.6362%" y="149" width="0.1040%" height="15" fill="rgb(216,135,14)" fg:x="718" fg:w="1"/><text x="74.8862%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="74.6362%" y="133" width="0.1040%" height="15" fill="rgb(241,47,5)" fg:x="718" fg:w="1"/><text x="74.8862%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="74.6362%" y="117" width="0.1040%" height="15" fill="rgb(233,42,35)" fg:x="718" fg:w="1"/><text x="74.8862%" y="127.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (549 samples, 57.07%)</title><rect x="17.9834%" y="405" width="57.0686%" height="15" fill="rgb(231,13,6)" fg:x="173" fg:w="549"/><text x="18.2334%" y="415.50">&lt;std::fs::File as std::io::Read&gt;::read_to_string</text></g><g><title>std::io::default_read_to_string (548 samples, 56.96%)</title><rect x="18.0873%" y="389" width="56.9647%" height="15" fill="rgb(207,181,40)" fg:x="174" fg:w="548"/><text x="18.3373%" y="399.50">std::io::default_read_to_string</text></g><g><title>std::io::append_to_string (548 samples, 56.96%)</title><rect x="18.0873%" y="373" width="56.9647%" height="15" fill="rgb(254,173,49)" fg:x="174" fg:w="548"/><text x="18.3373%" y="383.50">std::io::append_to_string</text></g><g><title>std::io::default_read_to_string::{{closure}} (470 samples, 48.86%)</title><rect x="26.1954%" y="357" width="48.8565%" height="15" fill="rgb(221,1,38)" fg:x="252" fg:w="470"/><text x="26.4454%" y="367.50">std::io::default_read_to_string::{{closure}}</text></g><g><title>std::io::default_read_to_end (470 samples, 48.86%)</title><rect x="26.1954%" y="341" width="48.8565%" height="15" fill="rgb(206,124,46)" fg:x="252" fg:w="470"/><text x="26.4454%" y="351.50">std::io::default_read_to_end</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (170 samples, 17.67%)</title><rect x="57.3805%" y="325" width="17.6715%" height="15" fill="rgb(249,21,11)" fg:x="552" fg:w="170"/><text x="57.6305%" y="335.50">alloc::vec::Vec&lt;T,A&gt;::reser..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (170 samples, 17.67%)</title><rect x="57.3805%" y="309" width="17.6715%" height="15" fill="rgb(222,201,40)" fg:x="552" fg:w="170"/><text x="57.6305%" y="319.50">alloc::raw_vec::RawVec&lt;T,A&gt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (167 samples, 17.36%)</title><rect x="57.6923%" y="293" width="17.3597%" height="15" fill="rgb(235,61,29)" fg:x="555" fg:w="167"/><text x="57.9423%" y="303.50">alloc::raw_vec::RawVec&lt;T,A&gt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (167 samples, 17.36%)</title><rect x="57.6923%" y="277" width="17.3597%" height="15" fill="rgb(219,207,3)" fg:x="555" fg:w="167"/><text x="57.9423%" y="287.50">alloc::raw_vec::RawVec&lt;T,A&gt;..</text></g><g><title>alloc::raw_vec::finish_grow (167 samples, 17.36%)</title><rect x="57.6923%" y="261" width="17.3597%" height="15" fill="rgb(222,56,46)" fg:x="555" fg:w="167"/><text x="57.9423%" y="271.50">alloc::raw_vec::finish_grow</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.31%)</title><rect x="74.7401%" y="245" width="0.3119%" height="15" fill="rgb(239,76,54)" fg:x="719" fg:w="3"/><text x="74.9901%" y="255.50"></text></g><g><title>__GI___libc_free (3 samples, 0.31%)</title><rect x="75.0520%" y="405" width="0.3119%" height="15" fill="rgb(231,124,27)" fg:x="722" fg:w="3"/><text x="75.3020%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="75.2599%" y="389" width="0.1040%" height="15" fill="rgb(249,195,6)" fg:x="724" fg:w="1"/><text x="75.5099%" y="399.50"></text></g><g><title>__memcmp_avx2_movbe (48 samples, 4.99%)</title><rect x="75.3638%" y="405" width="4.9896%" height="15" fill="rgb(237,174,47)" fg:x="725" fg:w="48"/><text x="75.6138%" y="415.50">__memc..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (40 samples, 4.16%)</title><rect x="80.3534%" y="405" width="4.1580%" height="15" fill="rgb(206,201,31)" fg:x="773" fg:w="40"/><text x="80.6034%" y="415.50">core:..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (2 samples, 0.21%)</title><rect x="84.5114%" y="405" width="0.2079%" height="15" fill="rgb(231,57,52)" fg:x="813" fg:w="2"/><text x="84.7614%" y="415.50"></text></g><g><title>core::num::from_str_radix (2 samples, 0.21%)</title><rect x="84.5114%" y="389" width="0.2079%" height="15" fill="rgb(248,177,22)" fg:x="813" fg:w="2"/><text x="84.7614%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="84.7193%" y="389" width="0.1040%" height="15" fill="rgb(215,211,37)" fg:x="815" fg:w="1"/><text x="84.9693%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="84.7193%" y="373" width="0.1040%" height="15" fill="rgb(241,128,51)" fg:x="815" fg:w="1"/><text x="84.9693%" y="383.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="84.7193%" y="357" width="0.1040%" height="15" fill="rgb(227,165,31)" fg:x="815" fg:w="1"/><text x="84.9693%" y="367.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="84.7193%" y="341" width="0.1040%" height="15" fill="rgb(228,167,24)" fg:x="815" fg:w="1"/><text x="84.9693%" y="351.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (746 samples, 77.55%)</title><rect x="7.3805%" y="437" width="77.5468%" height="15" fill="rgb(228,143,12)" fg:x="71" fg:w="746"/><text x="7.6305%" y="447.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>zmem::memory::Process::new (740 samples, 76.92%)</title><rect x="8.0042%" y="421" width="76.9231%" height="15" fill="rgb(249,149,8)" fg:x="77" fg:w="740"/><text x="8.2542%" y="431.50">zmem::memory::Process::new</text></g><g><title>zmem::memory::Process::get_cmd (2 samples, 0.21%)</title><rect x="84.7193%" y="405" width="0.2079%" height="15" fill="rgb(243,35,44)" fg:x="815" fg:w="2"/><text x="84.9693%" y="415.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.10%)</title><rect x="84.8233%" y="389" width="0.1040%" height="15" fill="rgb(246,89,9)" fg:x="816" fg:w="1"/><text x="85.0733%" y="399.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.10%)</title><rect x="84.8233%" y="373" width="0.1040%" height="15" fill="rgb(233,213,13)" fg:x="816" fg:w="1"/><text x="85.0733%" y="383.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.10%)</title><rect x="84.8233%" y="357" width="0.1040%" height="15" fill="rgb(233,141,41)" fg:x="816" fg:w="1"/><text x="85.0733%" y="367.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.10%)</title><rect x="84.8233%" y="341" width="0.1040%" height="15" fill="rgb(239,167,4)" fg:x="816" fg:w="1"/><text x="85.0733%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.10%)</title><rect x="84.8233%" y="325" width="0.1040%" height="15" fill="rgb(209,217,16)" fg:x="816" fg:w="1"/><text x="85.0733%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.10%)</title><rect x="84.8233%" y="309" width="0.1040%" height="15" fill="rgb(219,88,35)" fg:x="816" fg:w="1"/><text x="85.0733%" y="319.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.10%)</title><rect x="84.8233%" y="293" width="0.1040%" height="15" fill="rgb(220,193,23)" fg:x="816" fg:w="1"/><text x="85.0733%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.10%)</title><rect x="84.8233%" y="277" width="0.1040%" height="15" fill="rgb(230,90,52)" fg:x="816" fg:w="1"/><text x="85.0733%" y="287.50"></text></g><g><title>__libc_open64 (1 samples, 0.10%)</title><rect x="84.8233%" y="261" width="0.1040%" height="15" fill="rgb(252,106,19)" fg:x="816" fg:w="1"/><text x="85.0733%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="84.8233%" y="245" width="0.1040%" height="15" fill="rgb(206,74,20)" fg:x="816" fg:w="1"/><text x="85.0733%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="84.8233%" y="229" width="0.1040%" height="15" fill="rgb(230,138,44)" fg:x="816" fg:w="1"/><text x="85.0733%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="84.8233%" y="213" width="0.1040%" height="15" fill="rgb(235,182,43)" fg:x="816" fg:w="1"/><text x="85.0733%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="84.8233%" y="197" width="0.1040%" height="15" fill="rgb(242,16,51)" fg:x="816" fg:w="1"/><text x="85.0733%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="84.8233%" y="181" width="0.1040%" height="15" fill="rgb(248,9,4)" fg:x="816" fg:w="1"/><text x="85.0733%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="84.8233%" y="165" width="0.1040%" height="15" fill="rgb(210,31,22)" fg:x="816" fg:w="1"/><text x="85.0733%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="84.8233%" y="149" width="0.1040%" height="15" fill="rgb(239,54,39)" fg:x="816" fg:w="1"/><text x="85.0733%" y="159.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (750 samples, 77.96%)</title><rect x="7.0686%" y="453" width="77.9626%" height="15" fill="rgb(230,99,41)" fg:x="68" fg:w="750"/><text x="7.3186%" y="463.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.10%)</title><rect x="84.9272%" y="437" width="0.1040%" height="15" fill="rgb(253,106,12)" fg:x="817" fg:w="1"/><text x="85.1772%" y="447.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::store_output (1 samples, 0.10%)</title><rect x="85.0312%" y="453" width="0.1040%" height="15" fill="rgb(213,46,41)" fg:x="818" fg:w="1"/><text x="85.2812%" y="463.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (1 samples, 0.10%)</title><rect x="85.3430%" y="405" width="0.1040%" height="15" fill="rgb(215,133,35)" fg:x="821" fg:w="1"/><text x="85.5930%" y="415.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="85.5509%" y="373" width="0.1040%" height="15" fill="rgb(213,28,5)" fg:x="823" fg:w="1"/><text x="85.8009%" y="383.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (801 samples, 83.26%)</title><rect x="2.4948%" y="581" width="83.2640%" height="15" fill="rgb(215,77,49)" fg:x="24" fg:w="801"/><text x="2.7448%" y="591.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (795 samples, 82.64%)</title><rect x="3.1185%" y="565" width="82.6403%" height="15" fill="rgb(248,100,22)" fg:x="30" fg:w="795"/><text x="3.3685%" y="575.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (795 samples, 82.64%)</title><rect x="3.1185%" y="549" width="82.6403%" height="15" fill="rgb(208,67,9)" fg:x="30" fg:w="795"/><text x="3.3685%" y="559.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (794 samples, 82.54%)</title><rect x="3.2225%" y="533" width="82.5364%" height="15" fill="rgb(219,133,21)" fg:x="31" fg:w="794"/><text x="3.4725%" y="543.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (792 samples, 82.33%)</title><rect x="3.4304%" y="517" width="82.3285%" height="15" fill="rgb(246,46,29)" fg:x="33" fg:w="792"/><text x="3.6804%" y="527.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (792 samples, 82.33%)</title><rect x="3.4304%" y="501" width="82.3285%" height="15" fill="rgb(246,185,52)" fg:x="33" fg:w="792"/><text x="3.6804%" y="511.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (763 samples, 79.31%)</title><rect x="6.4449%" y="485" width="79.3139%" height="15" fill="rgb(252,136,11)" fg:x="62" fg:w="763"/><text x="6.6949%" y="495.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (759 samples, 78.90%)</title><rect x="6.8607%" y="469" width="78.8981%" height="15" fill="rgb(219,138,53)" fg:x="66" fg:w="759"/><text x="7.1107%" y="479.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (6 samples, 0.62%)</title><rect x="85.1351%" y="453" width="0.6237%" height="15" fill="rgb(211,51,23)" fg:x="819" fg:w="6"/><text x="85.3851%" y="463.50"></text></g><g><title>futures_task::waker::wake_by_ref_arc_raw (6 samples, 0.62%)</title><rect x="85.1351%" y="437" width="0.6237%" height="15" fill="rgb(247,221,28)" fg:x="819" fg:w="6"/><text x="85.3851%" y="447.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (5 samples, 0.52%)</title><rect x="85.2391%" y="421" width="0.5198%" height="15" fill="rgb(251,222,45)" fg:x="820" fg:w="5"/><text x="85.4891%" y="431.50"></text></g><g><title>tokio::runtime::park::wake (3 samples, 0.31%)</title><rect x="85.4470%" y="405" width="0.3119%" height="15" fill="rgb(217,162,53)" fg:x="822" fg:w="3"/><text x="85.6970%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.21%)</title><rect x="85.5509%" y="389" width="0.2079%" height="15" fill="rgb(229,93,14)" fg:x="823" fg:w="2"/><text x="85.8009%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.10%)</title><rect x="85.6549%" y="373" width="0.1040%" height="15" fill="rgb(209,67,49)" fg:x="824" fg:w="1"/><text x="85.9049%" y="383.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.10%)</title><rect x="85.6549%" y="357" width="0.1040%" height="15" fill="rgb(213,87,29)" fg:x="824" fg:w="1"/><text x="85.9049%" y="367.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.10%)</title><rect x="85.6549%" y="341" width="0.1040%" height="15" fill="rgb(205,151,52)" fg:x="824" fg:w="1"/><text x="85.9049%" y="351.50"></text></g><g><title>tokio-runtime-w (827 samples, 85.97%)</title><rect x="0.0000%" y="709" width="85.9667%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="827"/><text x="0.2500%" y="719.50">tokio-runtime-w</text></g><g><title>clone3 (826 samples, 85.86%)</title><rect x="0.1040%" y="693" width="85.8628%" height="15" fill="rgb(221,220,41)" fg:x="1" fg:w="826"/><text x="0.3540%" y="703.50">clone3</text></g><g><title>start_thread (826 samples, 85.86%)</title><rect x="0.1040%" y="677" width="85.8628%" height="15" fill="rgb(218,133,21)" fg:x="1" fg:w="826"/><text x="0.3540%" y="687.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (812 samples, 84.41%)</title><rect x="1.5593%" y="661" width="84.4075%" height="15" fill="rgb(221,193,43)" fg:x="15" fg:w="812"/><text x="1.8093%" y="671.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (812 samples, 84.41%)</title><rect x="1.5593%" y="645" width="84.4075%" height="15" fill="rgb(240,128,52)" fg:x="15" fg:w="812"/><text x="1.8093%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (812 samples, 84.41%)</title><rect x="1.5593%" y="629" width="84.4075%" height="15" fill="rgb(253,114,12)" fg:x="15" fg:w="812"/><text x="1.8093%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (812 samples, 84.41%)</title><rect x="1.5593%" y="613" width="84.4075%" height="15" fill="rgb(215,223,47)" fg:x="15" fg:w="812"/><text x="1.8093%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (804 samples, 83.58%)</title><rect x="2.3909%" y="597" width="83.5759%" height="15" fill="rgb(248,225,23)" fg:x="23" fg:w="804"/><text x="2.6409%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::context::Context::set_current (2 samples, 0.21%)</title><rect x="85.7588%" y="581" width="0.2079%" height="15" fill="rgb(250,108,0)" fg:x="825" fg:w="2"/><text x="86.0088%" y="591.50"></text></g><g><title>tokio::util::rand::RngSeedGenerator::next_seed (1 samples, 0.10%)</title><rect x="85.8628%" y="565" width="0.1040%" height="15" fill="rgb(228,208,7)" fg:x="826" fg:w="1"/><text x="86.1128%" y="575.50"></text></g><g><title>[unknown] (7 samples, 0.73%)</title><rect x="85.9667%" y="693" width="0.7277%" height="15" fill="rgb(244,45,10)" fg:x="827" fg:w="7"/><text x="86.2167%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.31%)</title><rect x="86.3825%" y="677" width="0.3119%" height="15" fill="rgb(207,125,25)" fg:x="831" fg:w="3"/><text x="86.6325%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="86.5904%" y="661" width="0.1040%" height="15" fill="rgb(210,195,18)" fg:x="833" fg:w="1"/><text x="86.8404%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="86.5904%" y="645" width="0.1040%" height="15" fill="rgb(249,80,12)" fg:x="833" fg:w="1"/><text x="86.8404%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="86.7983%" y="677" width="0.1040%" height="15" fill="rgb(221,65,9)" fg:x="835" fg:w="1"/><text x="87.0483%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="86.9023%" y="389" width="0.1040%" height="15" fill="rgb(235,49,36)" fg:x="836" fg:w="1"/><text x="87.1523%" y="399.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="86.9023%" y="373" width="0.1040%" height="15" fill="rgb(225,32,20)" fg:x="836" fg:w="1"/><text x="87.1523%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="87.1102%" y="373" width="0.1040%" height="15" fill="rgb(215,141,46)" fg:x="838" fg:w="1"/><text x="87.3602%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.42%)</title><rect x="86.9023%" y="405" width="0.4158%" height="15" fill="rgb(250,160,47)" fg:x="836" fg:w="4"/><text x="87.1523%" y="415.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.31%)</title><rect x="87.0062%" y="389" width="0.3119%" height="15" fill="rgb(216,222,40)" fg:x="837" fg:w="3"/><text x="87.2562%" y="399.50"></text></g><g><title>tcache_get (1 samples, 0.10%)</title><rect x="87.2141%" y="373" width="0.1040%" height="15" fill="rgb(234,217,39)" fg:x="839" fg:w="1"/><text x="87.4641%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.10%)</title><rect x="87.3181%" y="405" width="0.1040%" height="15" fill="rgb(207,178,40)" fg:x="840" fg:w="1"/><text x="87.5681%" y="415.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1 samples, 0.10%)</title><rect x="87.4220%" y="405" width="0.1040%" height="15" fill="rgb(221,136,13)" fg:x="841" fg:w="1"/><text x="87.6720%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (7 samples, 0.73%)</title><rect x="86.9023%" y="437" width="0.7277%" height="15" fill="rgb(249,199,10)" fg:x="836" fg:w="7"/><text x="87.1523%" y="447.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (7 samples, 0.73%)</title><rect x="86.9023%" y="421" width="0.7277%" height="15" fill="rgb(249,222,13)" fg:x="836" fg:w="7"/><text x="87.1523%" y="431.50"></text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (1 samples, 0.10%)</title><rect x="87.5260%" y="405" width="0.1040%" height="15" fill="rgb(244,185,38)" fg:x="842" fg:w="1"/><text x="87.7760%" y="415.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.10%)</title><rect x="87.5260%" y="389" width="0.1040%" height="15" fill="rgb(236,202,9)" fg:x="842" fg:w="1"/><text x="87.7760%" y="399.50"></text></g><g><title>__pthread_create_2_1 (1 samples, 0.10%)</title><rect x="87.6299%" y="325" width="0.1040%" height="15" fill="rgb(250,229,37)" fg:x="843" fg:w="1"/><text x="87.8799%" y="335.50"></text></g><g><title>allocate_stack (1 samples, 0.10%)</title><rect x="87.6299%" y="309" width="0.1040%" height="15" fill="rgb(206,174,23)" fg:x="843" fg:w="1"/><text x="87.8799%" y="319.50"></text></g><g><title>setup_stack_prot (1 samples, 0.10%)</title><rect x="87.6299%" y="293" width="0.1040%" height="15" fill="rgb(211,33,43)" fg:x="843" fg:w="1"/><text x="87.8799%" y="303.50"></text></g><g><title>__GI_mprotect (1 samples, 0.10%)</title><rect x="87.6299%" y="277" width="0.1040%" height="15" fill="rgb(245,58,50)" fg:x="843" fg:w="1"/><text x="87.8799%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="87.6299%" y="261" width="0.1040%" height="15" fill="rgb(244,68,36)" fg:x="843" fg:w="1"/><text x="87.8799%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="87.6299%" y="245" width="0.1040%" height="15" fill="rgb(232,229,15)" fg:x="843" fg:w="1"/><text x="87.8799%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="87.6299%" y="229" width="0.1040%" height="15" fill="rgb(254,30,23)" fg:x="843" fg:w="1"/><text x="87.8799%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="87.6299%" y="213" width="0.1040%" height="15" fill="rgb(235,160,14)" fg:x="843" fg:w="1"/><text x="87.8799%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="87.6299%" y="197" width="0.1040%" height="15" fill="rgb(212,155,44)" fg:x="843" fg:w="1"/><text x="87.8799%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="87.6299%" y="181" width="0.1040%" height="15" fill="rgb(226,2,50)" fg:x="843" fg:w="1"/><text x="87.8799%" y="191.50"></text></g><g><title>std::thread::Builder::spawn (2 samples, 0.21%)</title><rect x="87.6299%" y="357" width="0.2079%" height="15" fill="rgb(234,177,6)" fg:x="843" fg:w="2"/><text x="87.8799%" y="367.50"></text></g><g><title>std::sys::unix::thread::Thread::new (2 samples, 0.21%)</title><rect x="87.6299%" y="341" width="0.2079%" height="15" fill="rgb(217,24,9)" fg:x="843" fg:w="2"/><text x="87.8799%" y="351.50"></text></g><g><title>std::sys::unix::thread::min_stack_size (1 samples, 0.10%)</title><rect x="87.7339%" y="325" width="0.1040%" height="15" fill="rgb(220,13,46)" fg:x="844" fg:w="1"/><text x="87.9839%" y="335.50"></text></g><g><title>std::sys::unix::weak::DlsymWeak&lt;F&gt;::get (1 samples, 0.10%)</title><rect x="87.7339%" y="309" width="0.1040%" height="15" fill="rgb(239,221,27)" fg:x="844" fg:w="1"/><text x="87.9839%" y="319.50"></text></g><g><title>std::sys::unix::weak::DlsymWeak&lt;F&gt;::initialize (1 samples, 0.10%)</title><rect x="87.7339%" y="293" width="0.1040%" height="15" fill="rgb(222,198,25)" fg:x="844" fg:w="1"/><text x="87.9839%" y="303.50"></text></g><g><title>std::sys::unix::weak::fetch (1 samples, 0.10%)</title><rect x="87.7339%" y="277" width="0.1040%" height="15" fill="rgb(211,99,13)" fg:x="844" fg:w="1"/><text x="87.9839%" y="287.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.10%)</title><rect x="87.7339%" y="261" width="0.1040%" height="15" fill="rgb(232,111,31)" fg:x="844" fg:w="1"/><text x="87.9839%" y="271.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.10%)</title><rect x="87.7339%" y="245" width="0.1040%" height="15" fill="rgb(245,82,37)" fg:x="844" fg:w="1"/><text x="87.9839%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.10%)</title><rect x="87.7339%" y="229" width="0.1040%" height="15" fill="rgb(227,149,46)" fg:x="844" fg:w="1"/><text x="87.9839%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.10%)</title><rect x="87.7339%" y="213" width="0.1040%" height="15" fill="rgb(218,36,50)" fg:x="844" fg:w="1"/><text x="87.9839%" y="223.50"></text></g><g><title>tokio::runtime::builder::Builder::build (3 samples, 0.31%)</title><rect x="87.6299%" y="437" width="0.3119%" height="15" fill="rgb(226,80,48)" fg:x="843" fg:w="3"/><text x="87.8799%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (3 samples, 0.31%)</title><rect x="87.6299%" y="421" width="0.3119%" height="15" fill="rgb(238,224,15)" fg:x="843" fg:w="3"/><text x="87.8799%" y="431.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3 samples, 0.31%)</title><rect x="87.6299%" y="405" width="0.3119%" height="15" fill="rgb(241,136,10)" fg:x="843" fg:w="3"/><text x="87.8799%" y="415.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (3 samples, 0.31%)</title><rect x="87.6299%" y="389" width="0.3119%" height="15" fill="rgb(208,32,45)" fg:x="843" fg:w="3"/><text x="87.8799%" y="399.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.31%)</title><rect x="87.6299%" y="373" width="0.3119%" height="15" fill="rgb(207,135,9)" fg:x="843" fg:w="3"/><text x="87.8799%" y="383.50"></text></g><g><title>tokio::runtime::builder::Builder::new::{{closure}} (1 samples, 0.10%)</title><rect x="87.8378%" y="357" width="0.1040%" height="15" fill="rgb(206,86,44)" fg:x="845" fg:w="1"/><text x="88.0878%" y="367.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="87.8378%" y="341" width="0.1040%" height="15" fill="rgb(245,177,15)" fg:x="845" fg:w="1"/><text x="88.0878%" y="351.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="87.8378%" y="325" width="0.1040%" height="15" fill="rgb(206,64,50)" fg:x="845" fg:w="1"/><text x="88.0878%" y="335.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (1 samples, 0.10%)</title><rect x="89.7089%" y="309" width="0.1040%" height="15" fill="rgb(234,36,40)" fg:x="863" fg:w="1"/><text x="89.9589%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (2 samples, 0.21%)</title><rect x="89.8129%" y="309" width="0.2079%" height="15" fill="rgb(213,64,8)" fg:x="864" fg:w="2"/><text x="90.0629%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.10%)</title><rect x="89.9168%" y="293" width="0.1040%" height="15" fill="rgb(210,75,36)" fg:x="865" fg:w="1"/><text x="90.1668%" y="303.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.42%)</title><rect x="89.7089%" y="325" width="0.4158%" height="15" fill="rgb(229,88,21)" fg:x="863" fg:w="4"/><text x="89.9589%" y="335.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (1 samples, 0.10%)</title><rect x="90.0208%" y="309" width="0.1040%" height="15" fill="rgb(252,204,47)" fg:x="866" fg:w="1"/><text x="90.2708%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (3 samples, 0.31%)</title><rect x="90.1247%" y="309" width="0.3119%" height="15" fill="rgb(208,77,27)" fg:x="867" fg:w="3"/><text x="90.3747%" y="319.50"></text></g><g><title>futures_task::waker::drop_arc_raw (2 samples, 0.21%)</title><rect x="90.2287%" y="293" width="0.2079%" height="15" fill="rgb(221,76,26)" fg:x="868" fg:w="2"/><text x="90.4787%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;tokio::runtime::task::join::JoinHandle&lt;zmem::memory::Process&gt;&gt;&gt;&gt; (4 samples, 0.42%)</title><rect x="90.1247%" y="325" width="0.4158%" height="15" fill="rgb(225,139,18)" fg:x="867" fg:w="4"/><text x="90.3747%" y="335.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1 samples, 0.10%)</title><rect x="90.4366%" y="309" width="0.1040%" height="15" fill="rgb(230,137,11)" fg:x="870" fg:w="1"/><text x="90.6866%" y="319.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.10%)</title><rect x="90.4366%" y="293" width="0.1040%" height="15" fill="rgb(212,28,1)" fg:x="870" fg:w="1"/><text x="90.6866%" y="303.50"></text></g><g><title>&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (19 samples, 1.98%)</title><rect x="88.9813%" y="389" width="1.9751%" height="15" fill="rgb(248,164,17)" fg:x="856" fg:w="19"/><text x="89.2313%" y="399.50">&lt;..</text></g><g><title>&lt;futures_util::stream::stream::collect::Collect&lt;St,C&gt; as core::future::future::Future&gt;::poll (19 samples, 1.98%)</title><rect x="88.9813%" y="373" width="1.9751%" height="15" fill="rgb(222,171,42)" fg:x="856" fg:w="19"/><text x="89.2313%" y="383.50">&lt;..</text></g><g><title>&lt;futures_util::stream::futures_ordered::FuturesOrdered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (19 samples, 1.98%)</title><rect x="88.9813%" y="357" width="1.9751%" height="15" fill="rgb(243,84,45)" fg:x="856" fg:w="19"/><text x="89.2313%" y="367.50">&lt;..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (17 samples, 1.77%)</title><rect x="89.1892%" y="341" width="1.7672%" height="15" fill="rgb(252,49,23)" fg:x="858" fg:w="17"/><text x="89.4392%" y="351.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (4 samples, 0.42%)</title><rect x="90.5405%" y="325" width="0.4158%" height="15" fill="rgb(215,19,7)" fg:x="871" fg:w="4"/><text x="90.7905%" y="335.50"></text></g><g><title>tokio::runtime::park::clone (2 samples, 0.21%)</title><rect x="90.7484%" y="309" width="0.2079%" height="15" fill="rgb(238,81,41)" fg:x="873" fg:w="2"/><text x="90.9984%" y="319.50"></text></g><g><title>tokio::runtime::context::with_defer (1 samples, 0.10%)</title><rect x="90.9563%" y="389" width="0.1040%" height="15" fill="rgb(210,199,37)" fg:x="875" fg:w="1"/><text x="91.2063%" y="399.50"></text></g><g><title>tokio::runtime::defer::Defer::wake (1 samples, 0.10%)</title><rect x="90.9563%" y="373" width="0.1040%" height="15" fill="rgb(244,192,49)" fg:x="875" fg:w="1"/><text x="91.2063%" y="383.50"></text></g><g><title>tokio::runtime::coop::Budget::initial (8 samples, 0.83%)</title><rect x="91.0603%" y="389" width="0.8316%" height="15" fill="rgb(226,211,11)" fg:x="876" fg:w="8"/><text x="91.3103%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.6590%" y="357" width="0.1040%" height="15" fill="rgb(236,162,54)" fg:x="901" fg:w="1"/><text x="93.9090%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.6590%" y="341" width="0.1040%" height="15" fill="rgb(220,229,9)" fg:x="901" fg:w="1"/><text x="93.9090%" y="351.50"></text></g><g><title>tokio::runtime::park::Inner::park (21 samples, 2.18%)</title><rect x="91.8919%" y="389" width="2.1830%" height="15" fill="rgb(250,87,22)" fg:x="884" fg:w="21"/><text x="92.1419%" y="399.50">t..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (17 samples, 1.77%)</title><rect x="92.3077%" y="373" width="1.7672%" height="15" fill="rgb(239,43,17)" fg:x="888" fg:w="17"/><text x="92.5577%" y="383.50"></text></g><g><title>syscall (3 samples, 0.31%)</title><rect x="93.7630%" y="357" width="0.3119%" height="15" fill="rgb(231,177,25)" fg:x="902" fg:w="3"/><text x="94.0130%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="93.9709%" y="341" width="0.1040%" height="15" fill="rgb(219,179,1)" fg:x="904" fg:w="1"/><text x="94.2209%" y="351.50"></text></g><g><title>tokio::task::spawn::spawn (1 samples, 0.10%)</title><rect x="94.0748%" y="389" width="0.1040%" height="15" fill="rgb(238,219,53)" fg:x="905" fg:w="1"/><text x="94.3248%" y="399.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (1 samples, 0.10%)</title><rect x="94.0748%" y="373" width="0.1040%" height="15" fill="rgb(232,167,36)" fg:x="905" fg:w="1"/><text x="94.3248%" y="383.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (1 samples, 0.10%)</title><rect x="94.0748%" y="357" width="0.1040%" height="15" fill="rgb(244,19,51)" fg:x="905" fg:w="1"/><text x="94.3248%" y="367.50"></text></g><g><title>tokio::runtime::task::core::Header::get_trailer (1 samples, 0.10%)</title><rect x="94.0748%" y="341" width="0.1040%" height="15" fill="rgb(224,6,22)" fg:x="905" fg:w="1"/><text x="94.3248%" y="351.50"></text></g><g><title>&lt;&amp;str as colored::Colorize&gt;::bold (1 samples, 0.10%)</title><rect x="94.1788%" y="373" width="0.1040%" height="15" fill="rgb(224,145,5)" fg:x="906" fg:w="1"/><text x="94.4288%" y="383.50"></text></g><g><title>zmem::memory::MemoryStats::display (2 samples, 0.21%)</title><rect x="94.1788%" y="389" width="0.2079%" height="15" fill="rgb(234,130,49)" fg:x="906" fg:w="2"/><text x="94.4288%" y="399.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.10%)</title><rect x="94.2827%" y="373" width="0.1040%" height="15" fill="rgb(254,6,2)" fg:x="907" fg:w="1"/><text x="94.5327%" y="383.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.10%)</title><rect x="94.2827%" y="357" width="0.1040%" height="15" fill="rgb(208,96,46)" fg:x="907" fg:w="1"/><text x="94.5327%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.10%)</title><rect x="94.2827%" y="341" width="0.1040%" height="15" fill="rgb(239,3,39)" fg:x="907" fg:w="1"/><text x="94.5327%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.10%)</title><rect x="94.2827%" y="325" width="0.1040%" height="15" fill="rgb(233,210,1)" fg:x="907" fg:w="1"/><text x="94.5327%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.10%)</title><rect x="94.2827%" y="309" width="0.1040%" height="15" fill="rgb(244,137,37)" fg:x="907" fg:w="1"/><text x="94.5327%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="94.2827%" y="293" width="0.1040%" height="15" fill="rgb(240,136,2)" fg:x="907" fg:w="1"/><text x="94.5327%" y="303.50"></text></g><g><title>&lt;colored::ColoredString as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="94.2827%" y="277" width="0.1040%" height="15" fill="rgb(239,18,37)" fg:x="907" fg:w="1"/><text x="94.5327%" y="287.50"></text></g><g><title>colored::ColoredString::compute_style (1 samples, 0.10%)</title><rect x="94.2827%" y="261" width="0.1040%" height="15" fill="rgb(218,185,22)" fg:x="907" fg:w="1"/><text x="94.5327%" y="271.50"></text></g><g><title>__GI___close (1 samples, 0.10%)</title><rect x="94.3867%" y="373" width="0.1040%" height="15" fill="rgb(225,218,4)" fg:x="908" fg:w="1"/><text x="94.6367%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.3867%" y="357" width="0.1040%" height="15" fill="rgb(230,182,32)" fg:x="908" fg:w="1"/><text x="94.6367%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.3867%" y="341" width="0.1040%" height="15" fill="rgb(242,56,43)" fg:x="908" fg:w="1"/><text x="94.6367%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.3867%" y="325" width="0.1040%" height="15" fill="rgb(233,99,24)" fg:x="908" fg:w="1"/><text x="94.6367%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.3867%" y="309" width="0.1040%" height="15" fill="rgb(234,209,42)" fg:x="908" fg:w="1"/><text x="94.6367%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.3867%" y="293" width="0.1040%" height="15" fill="rgb(227,7,12)" fg:x="908" fg:w="1"/><text x="94.6367%" y="303.50"></text></g><g><title>zmem::memory::Process::get_cmd (2 samples, 0.21%)</title><rect x="94.3867%" y="389" width="0.2079%" height="15" fill="rgb(245,203,43)" fg:x="908" fg:w="2"/><text x="94.6367%" y="399.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.10%)</title><rect x="94.4906%" y="373" width="0.1040%" height="15" fill="rgb(238,205,33)" fg:x="909" fg:w="1"/><text x="94.7406%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.10%)</title><rect x="94.4906%" y="357" width="0.1040%" height="15" fill="rgb(231,56,7)" fg:x="909" fg:w="1"/><text x="94.7406%" y="367.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.10%)</title><rect x="94.4906%" y="341" width="0.1040%" height="15" fill="rgb(244,186,29)" fg:x="909" fg:w="1"/><text x="94.7406%" y="351.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.10%)</title><rect x="94.4906%" y="325" width="0.1040%" height="15" fill="rgb(234,111,31)" fg:x="909" fg:w="1"/><text x="94.7406%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.10%)</title><rect x="94.4906%" y="309" width="0.1040%" height="15" fill="rgb(241,149,10)" fg:x="909" fg:w="1"/><text x="94.7406%" y="319.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.10%)</title><rect x="94.4906%" y="293" width="0.1040%" height="15" fill="rgb(249,206,44)" fg:x="909" fg:w="1"/><text x="94.7406%" y="303.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.10%)</title><rect x="94.4906%" y="277" width="0.1040%" height="15" fill="rgb(251,153,30)" fg:x="909" fg:w="1"/><text x="94.7406%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.10%)</title><rect x="94.4906%" y="261" width="0.1040%" height="15" fill="rgb(239,152,38)" fg:x="909" fg:w="1"/><text x="94.7406%" y="271.50"></text></g><g><title>__libc_open64 (1 samples, 0.10%)</title><rect x="94.4906%" y="245" width="0.1040%" height="15" fill="rgb(249,139,47)" fg:x="909" fg:w="1"/><text x="94.7406%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.4906%" y="229" width="0.1040%" height="15" fill="rgb(244,64,35)" fg:x="909" fg:w="1"/><text x="94.7406%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.4906%" y="213" width="0.1040%" height="15" fill="rgb(216,46,15)" fg:x="909" fg:w="1"/><text x="94.7406%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.4906%" y="197" width="0.1040%" height="15" fill="rgb(250,74,19)" fg:x="909" fg:w="1"/><text x="94.7406%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.4906%" y="181" width="0.1040%" height="15" fill="rgb(249,42,33)" fg:x="909" fg:w="1"/><text x="94.7406%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.4906%" y="165" width="0.1040%" height="15" fill="rgb(242,149,17)" fg:x="909" fg:w="1"/><text x="94.7406%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.4906%" y="149" width="0.1040%" height="15" fill="rgb(244,29,21)" fg:x="909" fg:w="1"/><text x="94.7406%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.4906%" y="133" width="0.1040%" height="15" fill="rgb(220,130,37)" fg:x="909" fg:w="1"/><text x="94.7406%" y="143.50"></text></g><g><title>__libc_start_main_impl (75 samples, 7.80%)</title><rect x="86.9023%" y="677" width="7.7963%" height="15" fill="rgb(211,67,2)" fg:x="836" fg:w="75"/><text x="87.1523%" y="687.50">__libc_star..</text></g><g><title>__libc_start_call_main (75 samples, 7.80%)</title><rect x="86.9023%" y="661" width="7.7963%" height="15" fill="rgb(235,68,52)" fg:x="836" fg:w="75"/><text x="87.1523%" y="671.50">__libc_star..</text></g><g><title>main (75 samples, 7.80%)</title><rect x="86.9023%" y="645" width="7.7963%" height="15" fill="rgb(246,142,3)" fg:x="836" fg:w="75"/><text x="87.1523%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (75 samples, 7.80%)</title><rect x="86.9023%" y="629" width="7.7963%" height="15" fill="rgb(241,25,7)" fg:x="836" fg:w="75"/><text x="87.1523%" y="639.50">std::rt::la..</text></g><g><title>std::panic::catch_unwind (75 samples, 7.80%)</title><rect x="86.9023%" y="613" width="7.7963%" height="15" fill="rgb(242,119,39)" fg:x="836" fg:w="75"/><text x="87.1523%" y="623.50">std::panic:..</text></g><g><title>std::panicking::try (75 samples, 7.80%)</title><rect x="86.9023%" y="597" width="7.7963%" height="15" fill="rgb(241,98,45)" fg:x="836" fg:w="75"/><text x="87.1523%" y="607.50">std::panick..</text></g><g><title>std::panicking::try::do_call (75 samples, 7.80%)</title><rect x="86.9023%" y="581" width="7.7963%" height="15" fill="rgb(254,28,30)" fg:x="836" fg:w="75"/><text x="87.1523%" y="591.50">std::panick..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (75 samples, 7.80%)</title><rect x="86.9023%" y="565" width="7.7963%" height="15" fill="rgb(241,142,54)" fg:x="836" fg:w="75"/><text x="87.1523%" y="575.50">std::rt::la..</text></g><g><title>std::panic::catch_unwind (75 samples, 7.80%)</title><rect x="86.9023%" y="549" width="7.7963%" height="15" fill="rgb(222,85,15)" fg:x="836" fg:w="75"/><text x="87.1523%" y="559.50">std::panic:..</text></g><g><title>std::panicking::try (75 samples, 7.80%)</title><rect x="86.9023%" y="533" width="7.7963%" height="15" fill="rgb(210,85,47)" fg:x="836" fg:w="75"/><text x="87.1523%" y="543.50">std::panick..</text></g><g><title>std::panicking::try::do_call (75 samples, 7.80%)</title><rect x="86.9023%" y="517" width="7.7963%" height="15" fill="rgb(224,206,25)" fg:x="836" fg:w="75"/><text x="87.1523%" y="527.50">std::panick..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (75 samples, 7.80%)</title><rect x="86.9023%" y="501" width="7.7963%" height="15" fill="rgb(243,201,19)" fg:x="836" fg:w="75"/><text x="87.1523%" y="511.50">core::ops::..</text></g><g><title>std::rt::lang_start::{{closure}} (75 samples, 7.80%)</title><rect x="86.9023%" y="485" width="7.7963%" height="15" fill="rgb(236,59,4)" fg:x="836" fg:w="75"/><text x="87.1523%" y="495.50">std::rt::la..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (75 samples, 7.80%)</title><rect x="86.9023%" y="469" width="7.7963%" height="15" fill="rgb(254,179,45)" fg:x="836" fg:w="75"/><text x="87.1523%" y="479.50">std::sys_co..</text></g><g><title>zmem::main (75 samples, 7.80%)</title><rect x="86.9023%" y="453" width="7.7963%" height="15" fill="rgb(226,14,10)" fg:x="836" fg:w="75"/><text x="87.1523%" y="463.50">zmem::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (65 samples, 6.76%)</title><rect x="87.9418%" y="437" width="6.7568%" height="15" fill="rgb(244,27,41)" fg:x="846" fg:w="65"/><text x="88.1918%" y="447.50">tokio::ru..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (65 samples, 6.76%)</title><rect x="87.9418%" y="421" width="6.7568%" height="15" fill="rgb(235,35,32)" fg:x="846" fg:w="65"/><text x="88.1918%" y="431.50">tokio::ru..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (65 samples, 6.76%)</title><rect x="87.9418%" y="405" width="6.7568%" height="15" fill="rgb(218,68,31)" fg:x="846" fg:w="65"/><text x="88.1918%" y="415.50">tokio::ru..</text></g><g><title>zmem::memory::Processes::display (1 samples, 0.10%)</title><rect x="94.5946%" y="389" width="0.1040%" height="15" fill="rgb(207,120,37)" fg:x="910" fg:w="1"/><text x="94.8446%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.10%)</title><rect x="94.5946%" y="373" width="0.1040%" height="15" fill="rgb(227,98,0)" fg:x="910" fg:w="1"/><text x="94.8446%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.10%)</title><rect x="94.5946%" y="357" width="0.1040%" height="15" fill="rgb(207,7,3)" fg:x="910" fg:w="1"/><text x="94.8446%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="94.5946%" y="341" width="0.1040%" height="15" fill="rgb(206,98,19)" fg:x="910" fg:w="1"/><text x="94.8446%" y="351.50"></text></g><g><title>core::fmt::run (1 samples, 0.10%)</title><rect x="94.5946%" y="325" width="0.1040%" height="15" fill="rgb(217,5,26)" fg:x="910" fg:w="1"/><text x="94.8446%" y="335.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.10%)</title><rect x="94.5946%" y="309" width="0.1040%" height="15" fill="rgb(235,190,38)" fg:x="910" fg:w="1"/><text x="94.8446%" y="319.50"></text></g><g><title>core::num::flt2dec::to_exact_fixed_str (1 samples, 0.10%)</title><rect x="94.5946%" y="293" width="0.1040%" height="15" fill="rgb(247,86,24)" fg:x="910" fg:w="1"/><text x="94.8446%" y="303.50"></text></g><g><title>core::num::flt2dec::decoder::decode (1 samples, 0.10%)</title><rect x="94.5946%" y="277" width="0.1040%" height="15" fill="rgb(205,101,16)" fg:x="910" fg:w="1"/><text x="94.8446%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.6985%" y="661" width="0.1040%" height="15" fill="rgb(246,168,33)" fg:x="911" fg:w="1"/><text x="94.9485%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.6985%" y="645" width="0.1040%" height="15" fill="rgb(231,114,1)" fg:x="911" fg:w="1"/><text x="94.9485%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.6985%" y="629" width="0.1040%" height="15" fill="rgb(207,184,53)" fg:x="911" fg:w="1"/><text x="94.9485%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.6985%" y="613" width="0.1040%" height="15" fill="rgb(224,95,51)" fg:x="911" fg:w="1"/><text x="94.9485%" y="623.50"></text></g><g><title>_dl_setup_hash (1 samples, 0.10%)</title><rect x="94.8025%" y="645" width="0.1040%" height="15" fill="rgb(212,188,45)" fg:x="912" fg:w="1"/><text x="95.0525%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.8025%" y="629" width="0.1040%" height="15" fill="rgb(223,154,38)" fg:x="912" fg:w="1"/><text x="95.0525%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.8025%" y="613" width="0.1040%" height="15" fill="rgb(251,22,52)" fg:x="912" fg:w="1"/><text x="95.0525%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.8025%" y="597" width="0.1040%" height="15" fill="rgb(229,209,22)" fg:x="912" fg:w="1"/><text x="95.0525%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.8025%" y="581" width="0.1040%" height="15" fill="rgb(234,138,34)" fg:x="912" fg:w="1"/><text x="95.0525%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="94.8025%" y="565" width="0.1040%" height="15" fill="rgb(212,95,11)" fg:x="912" fg:w="1"/><text x="95.0525%" y="575.50"></text></g><g><title>_dl_start_final (2 samples, 0.21%)</title><rect x="94.8025%" y="661" width="0.2079%" height="15" fill="rgb(240,179,47)" fg:x="912" fg:w="2"/><text x="95.0525%" y="671.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.10%)</title><rect x="94.9064%" y="645" width="0.1040%" height="15" fill="rgb(240,163,11)" fg:x="913" fg:w="1"/><text x="95.1564%" y="655.50"></text></g><g><title>dl_main (1 samples, 0.10%)</title><rect x="94.9064%" y="629" width="0.1040%" height="15" fill="rgb(236,37,12)" fg:x="913" fg:w="1"/><text x="95.1564%" y="639.50"></text></g><g><title>strcmp (1 samples, 0.10%)</title><rect x="94.9064%" y="613" width="0.1040%" height="15" fill="rgb(232,164,16)" fg:x="913" fg:w="1"/><text x="95.1564%" y="623.50"></text></g><g><title>_start (82 samples, 8.52%)</title><rect x="86.6944%" y="693" width="8.5239%" height="15" fill="rgb(244,205,15)" fg:x="834" fg:w="82"/><text x="86.9444%" y="703.50">_start</text></g><g><title>_dl_start (5 samples, 0.52%)</title><rect x="94.6985%" y="677" width="0.5198%" height="15" fill="rgb(223,117,47)" fg:x="911" fg:w="5"/><text x="94.9485%" y="687.50"></text></g><g><title>rtld_timer_start (2 samples, 0.21%)</title><rect x="95.0104%" y="661" width="0.2079%" height="15" fill="rgb(244,107,35)" fg:x="914" fg:w="2"/><text x="95.2604%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="95.0104%" y="645" width="0.2079%" height="15" fill="rgb(205,140,8)" fg:x="914" fg:w="2"/><text x="95.2604%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="95.1143%" y="629" width="0.1040%" height="15" fill="rgb(228,84,46)" fg:x="915" fg:w="1"/><text x="95.3643%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="95.1143%" y="613" width="0.1040%" height="15" fill="rgb(254,188,9)" fg:x="915" fg:w="1"/><text x="95.3643%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="95.1143%" y="597" width="0.1040%" height="15" fill="rgb(206,112,54)" fg:x="915" fg:w="1"/><text x="95.3643%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="95.3222%" y="677" width="0.1040%" height="15" fill="rgb(216,84,49)" fg:x="917" fg:w="1"/><text x="95.5722%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.83%)</title><rect x="95.4262%" y="661" width="0.8316%" height="15" fill="rgb(214,194,35)" fg:x="918" fg:w="8"/><text x="95.6762%" y="671.50"></text></g><g><title>[unknown] (8 samples, 0.83%)</title><rect x="95.4262%" y="645" width="0.8316%" height="15" fill="rgb(249,28,3)" fg:x="918" fg:w="8"/><text x="95.6762%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.73%)</title><rect x="95.5301%" y="629" width="0.7277%" height="15" fill="rgb(222,56,52)" fg:x="919" fg:w="7"/><text x="95.7801%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.52%)</title><rect x="95.7380%" y="613" width="0.5198%" height="15" fill="rgb(245,217,50)" fg:x="921" fg:w="5"/><text x="95.9880%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="96.0499%" y="597" width="0.2079%" height="15" fill="rgb(213,201,24)" fg:x="924" fg:w="2"/><text x="96.2999%" y="607.50"></text></g><g><title>__GI___ctype_init (3 samples, 0.31%)</title><rect x="96.2578%" y="661" width="0.3119%" height="15" fill="rgb(248,116,28)" fg:x="926" fg:w="3"/><text x="96.5078%" y="671.50"></text></g><g><title>__GI__setjmp (2 samples, 0.21%)</title><rect x="96.5696%" y="661" width="0.2079%" height="15" fill="rgb(219,72,43)" fg:x="929" fg:w="2"/><text x="96.8196%" y="671.50"></text></g><g><title>__sigjmp_save (1 samples, 0.10%)</title><rect x="96.7775%" y="661" width="0.1040%" height="15" fill="rgb(209,138,14)" fg:x="931" fg:w="1"/><text x="97.0275%" y="671.50"></text></g><g><title>rseq_register_current_thread (9 samples, 0.94%)</title><rect x="96.8815%" y="661" width="0.9356%" height="15" fill="rgb(222,18,33)" fg:x="932" fg:w="9"/><text x="97.1315%" y="671.50"></text></g><g><title>[unknown] (9 samples, 0.94%)</title><rect x="96.8815%" y="645" width="0.9356%" height="15" fill="rgb(213,199,7)" fg:x="932" fg:w="9"/><text x="97.1315%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.73%)</title><rect x="97.0894%" y="629" width="0.7277%" height="15" fill="rgb(250,110,10)" fg:x="934" fg:w="7"/><text x="97.3394%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.62%)</title><rect x="97.1933%" y="613" width="0.6237%" height="15" fill="rgb(248,123,6)" fg:x="935" fg:w="6"/><text x="97.4433%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.42%)</title><rect x="97.4012%" y="597" width="0.4158%" height="15" fill="rgb(206,91,31)" fg:x="937" fg:w="4"/><text x="97.6512%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="97.6091%" y="581" width="0.2079%" height="15" fill="rgb(211,154,13)" fg:x="939" fg:w="2"/><text x="97.8591%" y="591.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (1 samples, 0.10%)</title><rect x="98.0249%" y="597" width="0.1040%" height="15" fill="rgb(225,148,7)" fg:x="943" fg:w="1"/><text x="98.2749%" y="607.50"></text></g><g><title>__pthread_setname_np (1 samples, 0.10%)</title><rect x="98.0249%" y="581" width="0.1040%" height="15" fill="rgb(220,160,43)" fg:x="943" fg:w="1"/><text x="98.2749%" y="591.50"></text></g><g><title>__GI___prctl (1 samples, 0.10%)</title><rect x="98.0249%" y="565" width="0.1040%" height="15" fill="rgb(213,52,39)" fg:x="943" fg:w="1"/><text x="98.2749%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.0249%" y="549" width="0.1040%" height="15" fill="rgb(243,137,7)" fg:x="943" fg:w="1"/><text x="98.2749%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.0249%" y="533" width="0.1040%" height="15" fill="rgb(230,79,13)" fg:x="943" fg:w="1"/><text x="98.2749%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.0249%" y="517" width="0.1040%" height="15" fill="rgb(247,105,23)" fg:x="943" fg:w="1"/><text x="98.2749%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.0249%" y="501" width="0.1040%" height="15" fill="rgb(223,179,41)" fg:x="943" fg:w="1"/><text x="98.2749%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.0249%" y="485" width="0.1040%" height="15" fill="rgb(218,9,34)" fg:x="943" fg:w="1"/><text x="98.2749%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.42%)</title><rect x="97.9210%" y="613" width="0.4158%" height="15" fill="rgb(222,106,8)" fg:x="942" fg:w="4"/><text x="98.1710%" y="623.50"></text></g><g><title>std::thread::Thread::cname (2 samples, 0.21%)</title><rect x="98.1289%" y="597" width="0.2079%" height="15" fill="rgb(211,220,0)" fg:x="944" fg:w="2"/><text x="98.3789%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_deref (2 samples, 0.21%)</title><rect x="98.1289%" y="581" width="0.2079%" height="15" fill="rgb(229,52,16)" fg:x="944" fg:w="2"/><text x="98.3789%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.21%)</title><rect x="98.1289%" y="565" width="0.2079%" height="15" fill="rgb(212,155,18)" fg:x="944" fg:w="2"/><text x="98.3789%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.52%)</title><rect x="97.9210%" y="645" width="0.5198%" height="15" fill="rgb(242,21,14)" fg:x="942" fg:w="5"/><text x="98.1710%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.52%)</title><rect x="97.9210%" y="629" width="0.5198%" height="15" fill="rgb(222,19,48)" fg:x="942" fg:w="5"/><text x="98.1710%" y="639.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.10%)</title><rect x="98.3368%" y="613" width="0.1040%" height="15" fill="rgb(232,45,27)" fg:x="946" fg:w="1"/><text x="98.5868%" y="623.50"></text></g><g><title>__GI_sigaltstack (1 samples, 0.10%)</title><rect x="98.3368%" y="597" width="0.1040%" height="15" fill="rgb(249,103,42)" fg:x="946" fg:w="1"/><text x="98.5868%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="98.3368%" y="581" width="0.1040%" height="15" fill="rgb(246,81,33)" fg:x="946" fg:w="1"/><text x="98.5868%" y="591.50"></text></g><g><title>__GI_sigaltstack (7 samples, 0.73%)</title><rect x="98.4407%" y="613" width="0.7277%" height="15" fill="rgb(252,33,42)" fg:x="947" fg:w="7"/><text x="98.6907%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.73%)</title><rect x="98.4407%" y="597" width="0.7277%" height="15" fill="rgb(209,212,41)" fg:x="947" fg:w="7"/><text x="98.6907%" y="607.50"></text></g><g><title>[unknown] (7 samples, 0.73%)</title><rect x="98.4407%" y="581" width="0.7277%" height="15" fill="rgb(207,154,6)" fg:x="947" fg:w="7"/><text x="98.6907%" y="591.50"></text></g><g><title>[unknown] (7 samples, 0.73%)</title><rect x="98.4407%" y="565" width="0.7277%" height="15" fill="rgb(223,64,47)" fg:x="947" fg:w="7"/><text x="98.6907%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.52%)</title><rect x="98.6486%" y="549" width="0.5198%" height="15" fill="rgb(211,161,38)" fg:x="949" fg:w="5"/><text x="98.8986%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.0644%" y="533" width="0.1040%" height="15" fill="rgb(219,138,40)" fg:x="953" fg:w="1"/><text x="99.3144%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.21%)</title><rect x="99.1684%" y="613" width="0.2079%" height="15" fill="rgb(241,228,46)" fg:x="954" fg:w="2"/><text x="99.4184%" y="623.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.42%)</title><rect x="99.3763%" y="581" width="0.4158%" height="15" fill="rgb(223,209,38)" fg:x="956" fg:w="4"/><text x="99.6263%" y="591.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.42%)</title><rect x="99.3763%" y="565" width="0.4158%" height="15" fill="rgb(236,164,45)" fg:x="956" fg:w="4"/><text x="99.6263%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.42%)</title><rect x="99.3763%" y="549" width="0.4158%" height="15" fill="rgb(231,15,5)" fg:x="956" fg:w="4"/><text x="99.6263%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.31%)</title><rect x="99.4802%" y="533" width="0.3119%" height="15" fill="rgb(252,35,15)" fg:x="957" fg:w="3"/><text x="99.7302%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="99.5842%" y="517" width="0.2079%" height="15" fill="rgb(248,181,18)" fg:x="958" fg:w="2"/><text x="99.8342%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="99.5842%" y="501" width="0.2079%" height="15" fill="rgb(233,39,42)" fg:x="958" fg:w="2"/><text x="99.8342%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.6881%" y="485" width="0.1040%" height="15" fill="rgb(238,110,33)" fg:x="959" fg:w="1"/><text x="99.9381%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.6881%" y="469" width="0.1040%" height="15" fill="rgb(233,195,10)" fg:x="959" fg:w="1"/><text x="99.9381%" y="479.50"></text></g><g><title>all (962 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(254,105,3)" fg:x="0" fg:w="962"/><text x="0.2500%" y="735.50"></text></g><g><title>zmem (135 samples, 14.03%)</title><rect x="85.9667%" y="709" width="14.0333%" height="15" fill="rgb(221,225,9)" fg:x="827" fg:w="135"/><text x="86.2167%" y="719.50">zmem</text></g><g><title>clone3 (46 samples, 4.78%)</title><rect x="95.2183%" y="693" width="4.7817%" height="15" fill="rgb(224,227,45)" fg:x="916" fg:w="46"/><text x="95.4683%" y="703.50">clone3</text></g><g><title>start_thread (44 samples, 4.57%)</title><rect x="95.4262%" y="677" width="4.5738%" height="15" fill="rgb(229,198,43)" fg:x="918" fg:w="44"/><text x="95.6762%" y="687.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (21 samples, 2.18%)</title><rect x="97.8170%" y="661" width="2.1830%" height="15" fill="rgb(206,209,35)" fg:x="941" fg:w="21"/><text x="98.0670%" y="671.50">s..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (15 samples, 1.56%)</title><rect x="98.4407%" y="645" width="1.5593%" height="15" fill="rgb(245,195,53)" fg:x="947" fg:w="15"/><text x="98.6907%" y="655.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (15 samples, 1.56%)</title><rect x="98.4407%" y="629" width="1.5593%" height="15" fill="rgb(240,92,26)" fg:x="947" fg:w="15"/><text x="98.6907%" y="639.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (6 samples, 0.62%)</title><rect x="99.3763%" y="613" width="0.6237%" height="15" fill="rgb(207,40,23)" fg:x="956" fg:w="6"/><text x="99.6263%" y="623.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (6 samples, 0.62%)</title><rect x="99.3763%" y="597" width="0.6237%" height="15" fill="rgb(223,111,35)" fg:x="956" fg:w="6"/><text x="99.6263%" y="607.50"></text></g><g><title>__GI_mprotect (2 samples, 0.21%)</title><rect x="99.7921%" y="581" width="0.2079%" height="15" fill="rgb(229,147,28)" fg:x="960" fg:w="2"/><text x="100.0421%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="99.7921%" y="565" width="0.2079%" height="15" fill="rgb(211,29,28)" fg:x="960" fg:w="2"/><text x="100.0421%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="99.7921%" y="549" width="0.2079%" height="15" fill="rgb(228,72,33)" fg:x="960" fg:w="2"/><text x="100.0421%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="99.7921%" y="533" width="0.2079%" height="15" fill="rgb(205,214,31)" fg:x="960" fg:w="2"/><text x="100.0421%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="99.7921%" y="517" width="0.2079%" height="15" fill="rgb(224,111,15)" fg:x="960" fg:w="2"/><text x="100.0421%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.21%)</title><rect x="99.7921%" y="501" width="0.2079%" height="15" fill="rgb(253,21,26)" fg:x="960" fg:w="2"/><text x="100.0421%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.8960%" y="485" width="0.1040%" height="15" fill="rgb(245,139,43)" fg:x="961" fg:w="1"/><text x="100.1460%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.10%)</title><rect x="99.8960%" y="469" width="0.1040%" height="15" fill="rgb(252,170,7)" fg:x="961" fg:w="1"/><text x="100.1460%" y="479.50"></text></g></svg></svg>